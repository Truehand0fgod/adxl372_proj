
mcu2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000604c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080061fc  080061fc  000071fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c0  080062c0  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080062c0  080062c0  000072c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c8  080062c8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c8  080062c8  000072c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062cc  080062cc  000072cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080062d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  0800632c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  0800632c  000082c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1b4  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235d  00000000  00000000  00017240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  000195a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2b  00000000  00000000  0001a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291ba  00000000  00000000  0001ad03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103c8  00000000  00000000  00043ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9352  00000000  00000000  00054285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d5d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b3c  00000000  00000000  0014d61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00151158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080061e4 	.word	0x080061e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080061e4 	.word	0x080061e4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a07      	ldr	r2, [pc, #28]	@ (80005b8 <HAL_UART_RxCpltCallback+0x28>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d107      	bne.n	80005b0 <HAL_UART_RxCpltCallback+0x20>
    	uart1_cmd_ready = 1;
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <HAL_UART_RxCpltCallback+0x2c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <HAL_UART_RxCpltCallback+0x30>)
 80005ac:	f000 ff10 	bl	80013d0 <HAL_GPIO_TogglePin>
    }
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000dc 	.word	0x200000dc
 80005bc:	20000164 	.word	0x20000164
 80005c0:	48000800 	.word	0x48000800

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b09f      	sub	sp, #124	@ 0x7c
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb2e 	bl	8000c2a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f87d 	bl	80006cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f939 	bl	8000848 <MX_GPIO_Init>
  MX_SPI2_Init();
 80005d6:	f000 f8c9 	bl	800076c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80005da:	f000 f905 	bl	80007e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  adxl372_Init();
 80005de:	f005 f81d 	bl	800561c <adxl372_Init>
  uint8_t size = 0;
  char str[100] = {0};
#endif

#ifdef L
  uint8_t cmd = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
  uint8_t size = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
  const uint8_t cmdSize = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  char str[100] = {0};
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2260      	movs	r2, #96	@ 0x60
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f005 f96f 	bl	80058e4 <memset>

  HAL_UART_Receive_IT(&huart1, &cmd, cmdSize);
 8000606:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800060a:	b29a      	uxth	r2, r3
 800060c:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 8000610:	4619      	mov	r1, r3
 8000612:	482a      	ldr	r0, [pc, #168]	@ (80006bc <main+0xf8>)
 8000614:	f003 fa66 	bl	8003ae4 <HAL_UART_Receive_IT>


  while (1)
  {
#ifdef L
	  HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fb7b 	bl	8000d14 <HAL_Delay>
	  adxl372_Get_Shock();
 800061e:	f005 f833 	bl	8005688 <adxl372_Get_Shock>
	  if(uart1_cmd_ready)
 8000622:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <main+0xfc>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0f5      	beq.n	8000618 <main+0x54>
	  {
		  uart1_cmd_ready = 0;
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <main+0xfc>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]

		  sprintf(str, "shock50_100 = %d, shock100_150 = %d, shock150+ = %d, maxShock = %dG\r\n",
			  	  	  	  	  	shock_cnt[0], shock_cnt[1], shock_cnt[2], shock_cnt[3]);
 8000632:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <main+0x100>)
 8000634:	781b      	ldrb	r3, [r3, #0]
		  sprintf(str, "shock50_100 = %d, shock100_150 = %d, shock150+ = %d, maxShock = %dG\r\n",
 8000636:	4619      	mov	r1, r3
			  	  	  	  	  	shock_cnt[0], shock_cnt[1], shock_cnt[2], shock_cnt[3]);
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <main+0x100>)
 800063a:	785b      	ldrb	r3, [r3, #1]
		  sprintf(str, "shock50_100 = %d, shock100_150 = %d, shock150+ = %d, maxShock = %dG\r\n",
 800063c:	461c      	mov	r4, r3
			  	  	  	  	  	shock_cnt[0], shock_cnt[1], shock_cnt[2], shock_cnt[3]);
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <main+0x100>)
 8000640:	789b      	ldrb	r3, [r3, #2]
		  sprintf(str, "shock50_100 = %d, shock100_150 = %d, shock150+ = %d, maxShock = %dG\r\n",
 8000642:	461a      	mov	r2, r3
			  	  	  	  	  	shock_cnt[0], shock_cnt[1], shock_cnt[2], shock_cnt[3]);
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <main+0x100>)
 8000646:	78db      	ldrb	r3, [r3, #3]
		  sprintf(str, "shock50_100 = %d, shock100_150 = %d, shock150+ = %d, maxShock = %dG\r\n",
 8000648:	1d38      	adds	r0, r7, #4
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	9200      	str	r2, [sp, #0]
 800064e:	4623      	mov	r3, r4
 8000650:	460a      	mov	r2, r1
 8000652:	491d      	ldr	r1, [pc, #116]	@ (80006c8 <main+0x104>)
 8000654:	f005 f926 	bl	80058a4 <siprintf>
	  	  size = strlen(str);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdc8 	bl	80001f0 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
	  	  HAL_UART_Transmit(&huart1, &size, 1, HAL_MAX_DELAY);
 8000668:	f107 0169 	add.w	r1, r7, #105	@ 0x69
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	2201      	movs	r2, #1
 8000672:	4812      	ldr	r0, [pc, #72]	@ (80006bc <main+0xf8>)
 8000674:	f003 f9ac 	bl	80039d0 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart1, (uint8_t*)str, size, HAL_MAX_DELAY);
 8000678:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800067c:	461a      	mov	r2, r3
 800067e:	1d39      	adds	r1, r7, #4
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	480d      	ldr	r0, [pc, #52]	@ (80006bc <main+0xf8>)
 8000686:	f003 f9a3 	bl	80039d0 <HAL_UART_Transmit>
	  	  HAL_UART_Receive_IT(&huart1, &cmd, cmdSize);
 800068a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800068e:	b29a      	uxth	r2, r3
 8000690:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 8000694:	4619      	mov	r1, r3
 8000696:	4809      	ldr	r0, [pc, #36]	@ (80006bc <main+0xf8>)
 8000698:	f003 fa24 	bl	8003ae4 <HAL_UART_Receive_IT>
	  	  for(int i = 0; i < 4; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80006a0:	e007      	b.n	80006b2 <main+0xee>
	  	  {
		  	  shock_cnt[i] = 0;
 80006a2:	4a08      	ldr	r2, [pc, #32]	@ (80006c4 <main+0x100>)
 80006a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006a6:	4413      	add	r3, r2
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	  	  for(int i = 0; i < 4; i++)
 80006ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006ae:	3301      	adds	r3, #1
 80006b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80006b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	ddf4      	ble.n	80006a2 <main+0xde>
	  HAL_Delay(1);
 80006b8:	e7ae      	b.n	8000618 <main+0x54>
 80006ba:	bf00      	nop
 80006bc:	200000dc 	.word	0x200000dc
 80006c0:	20000164 	.word	0x20000164
 80006c4:	20000174 	.word	0x20000174
 80006c8:	080061fc 	.word	0x080061fc

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b096      	sub	sp, #88	@ 0x58
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2244      	movs	r2, #68	@ 0x44
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 f902 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006f2:	f000 fe95 	bl	8001420 <HAL_PWREx_ControlVoltageScaling>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006fc:	f000 f914 	bl	8000928 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	2303      	movs	r3, #3
 8000710:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000712:	2301      	movs	r3, #1
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000716:	2314      	movs	r3, #20
 8000718:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fece 	bl	80014cc <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000736:	f000 f8f7 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2303      	movs	r3, #3
 8000740:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	2104      	movs	r1, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fad4 	bl	8001d00 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075e:	f000 f8e3 	bl	8000928 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3758      	adds	r7, #88	@ 0x58
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_SPI2_Init+0x74>)
 8000772:	4a1c      	ldr	r2, [pc, #112]	@ (80007e4 <MX_SPI2_Init+0x78>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_SPI2_Init+0x74>)
 8000778:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800077c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_SPI2_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_SPI2_Init+0x74>)
 8000786:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800078a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_SPI2_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_SPI2_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_SPI2_Init+0x74>)
 800079a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800079e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_SPI2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_SPI2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_SPI2_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_SPI2_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_SPI2_Init+0x74>)
 80007ba:	2207      	movs	r2, #7
 80007bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_SPI2_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_SPI2_Init+0x74>)
 80007c6:	2208      	movs	r2, #8
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_SPI2_Init+0x74>)
 80007cc:	f002 f986 	bl	8002adc <HAL_SPI_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f8a7 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000078 	.word	0x20000078
 80007e4:	40003800 	.word	0x40003800

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	@ (8000844 <MX_USART1_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 80007f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 800082c:	f003 f882 	bl	8003934 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f877 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000dc 	.word	0x200000dc
 8000844:	40013800 	.word	0x40013800

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b2f      	ldr	r3, [pc, #188]	@ (800091c <MX_GPIO_Init+0xd4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a2e      	ldr	r2, [pc, #184]	@ (800091c <MX_GPIO_Init+0xd4>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <MX_GPIO_Init+0xd4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	4b29      	ldr	r3, [pc, #164]	@ (800091c <MX_GPIO_Init+0xd4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	4a28      	ldr	r2, [pc, #160]	@ (800091c <MX_GPIO_Init+0xd4>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000882:	4b26      	ldr	r3, [pc, #152]	@ (800091c <MX_GPIO_Init+0xd4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b23      	ldr	r3, [pc, #140]	@ (800091c <MX_GPIO_Init+0xd4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	4a22      	ldr	r2, [pc, #136]	@ (800091c <MX_GPIO_Init+0xd4>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089a:	4b20      	ldr	r3, [pc, #128]	@ (800091c <MX_GPIO_Init+0xd4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <MX_GPIO_Init+0xd4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a1c      	ldr	r2, [pc, #112]	@ (800091c <MX_GPIO_Init+0xd4>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_GPIO_Init+0xd4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c4:	4816      	ldr	r0, [pc, #88]	@ (8000920 <MX_GPIO_Init+0xd8>)
 80008c6:	f000 fd6b 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL372_CS_GPIO_Port, ADXL372_CS_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d0:	4814      	ldr	r0, [pc, #80]	@ (8000924 <MX_GPIO_Init+0xdc>)
 80008d2:	f000 fd65 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	@ (8000920 <MX_GPIO_Init+0xd8>)
 80008f0:	f000 fbc4 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADXL372_CS_Pin */
  GPIO_InitStruct.Pin = ADXL372_CS_Pin;
 80008f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL372_CS_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_GPIO_Init+0xdc>)
 800090e:	f000 fbb5 	bl	800107c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	@ 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000
 8000920:	48000800 	.word	0x48000800
 8000924:	48000400 	.word	0x48000400

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000942:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <HAL_MspInit+0x44>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6613      	str	r3, [r2, #96]	@ 0x60
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_MspInit+0x44>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x44>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	6593      	str	r3, [r2, #88]	@ 0x58
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x44>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <HAL_SPI_MspInit+0x7c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d128      	bne.n	80009f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a6:	4a16      	ldr	r2, [pc, #88]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	4a10      	ldr	r2, [pc, #64]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009d2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e4:	2305      	movs	r3, #5
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <HAL_SPI_MspInit+0x84>)
 80009f0:	f000 fb44 	bl	800107c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	@ 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40003800 	.word	0x40003800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000400 	.word	0x48000400

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	228c      	movs	r2, #140	@ 0x8c
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 ff5b 	bl	80058e4 <memset>
  if(huart->Instance==USART1)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a26      	ldr	r2, [pc, #152]	@ (8000acc <HAL_UART_MspInit+0xc4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d144      	bne.n	8000ac2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fb7f 	bl	8002148 <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a50:	f7ff ff6a 	bl	8000928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <HAL_UART_MspInit+0xc8>)
 8000a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a58:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad0 <HAL_UART_MspInit+0xc8>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <HAL_UART_MspInit+0xc8>)
 8000a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <HAL_UART_MspInit+0xc8>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a70:	4a17      	ldr	r2, [pc, #92]	@ (8000ad0 <HAL_UART_MspInit+0xc8>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a78:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <HAL_UART_MspInit+0xc8>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a84:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aae:	f000 fae5 	bl	800107c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2025      	movs	r0, #37	@ 0x25
 8000ab8:	f000 fa2b 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000abc:	2025      	movs	r0, #37	@ 0x25
 8000abe:	f000 fa44 	bl	8000f4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ac2:	bf00      	nop
 8000ac4:	37b0      	adds	r7, #176	@ 0xb0
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40013800 	.word	0x40013800
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2a:	f000 f8d3 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <USART1_IRQHandler+0x10>)
 8000b3a:	f003 f81f 	bl	8003b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000dc 	.word	0x200000dc

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	@ (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d207      	bcs.n	8000b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b78:	f004 febc 	bl	80058f4 <__errno>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20040000 	.word	0x20040000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	20000168 	.word	0x20000168
 8000bb0:	200002c0 	.word	0x200002c0

08000bb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bdc:	f7ff ffea 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	@ (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f004 fe7b 	bl	8005900 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0a:	f7ff fcdb 	bl	80005c4 <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c10:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c1c:	080062d0 	.word	0x080062d0
  ldr r2, =_sbss
 8000c20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c24:	200002c0 	.word	0x200002c0

08000c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_2_IRQHandler>

08000c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f961 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f000 f80e 	bl	8000c5c <HAL_InitTick>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	e001      	b.n	8000c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4c:	f7ff fe74 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c68:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <HAL_InitTick+0x6c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d023      	beq.n	8000cb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c70:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <HAL_InitTick+0x70>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <HAL_InitTick+0x6c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f96d 	bl	8000f66 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10f      	bne.n	8000cb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d809      	bhi.n	8000cac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f937 	bl	8000f12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_InitTick+0x74>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e007      	b.n	8000cbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e004      	b.n	8000cbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e001      	b.n	8000cbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	2000016c 	.word	0x2000016c

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000016c 	.word	0x2000016c

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	@ (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	@ (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	@ (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	@ 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff29 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff3e 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff31 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d008      	beq.n	8000fa8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e022      	b.n	8000fee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 020e 	bic.w	r2, r2, #14
 8000fb6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fcc:	f003 021c 	and.w	r2, r3, #28
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fda:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d005      	beq.n	800101e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2204      	movs	r2, #4
 8001016:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e029      	b.n	8001072 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 020e 	bic.w	r2, r2, #14
 800102c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	f003 021c 	and.w	r2, r3, #28
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	4798      	blx	r3
    }
  }
  return status;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e166      	b.n	800135a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2101      	movs	r1, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8158 	beq.w	8001354 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d005      	beq.n	80010bc <HAL_GPIO_Init+0x40>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d130      	bne.n	800111e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010f2:	2201      	movs	r2, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 0201 	and.w	r2, r3, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b03      	cmp	r3, #3
 8001128:	d017      	beq.n	800115a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d123      	bne.n	80011ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	6939      	ldr	r1, [r7, #16]
 80011aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0203 	and.w	r2, r3, #3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80b2 	beq.w	8001354 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f0:	4b61      	ldr	r3, [pc, #388]	@ (8001378 <HAL_GPIO_Init+0x2fc>)
 80011f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f4:	4a60      	ldr	r2, [pc, #384]	@ (8001378 <HAL_GPIO_Init+0x2fc>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80011fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001378 <HAL_GPIO_Init+0x2fc>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001208:	4a5c      	ldr	r2, [pc, #368]	@ (800137c <HAL_GPIO_Init+0x300>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001232:	d02b      	beq.n	800128c <HAL_GPIO_Init+0x210>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a52      	ldr	r2, [pc, #328]	@ (8001380 <HAL_GPIO_Init+0x304>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d025      	beq.n	8001288 <HAL_GPIO_Init+0x20c>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a51      	ldr	r2, [pc, #324]	@ (8001384 <HAL_GPIO_Init+0x308>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d01f      	beq.n	8001284 <HAL_GPIO_Init+0x208>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a50      	ldr	r2, [pc, #320]	@ (8001388 <HAL_GPIO_Init+0x30c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d019      	beq.n	8001280 <HAL_GPIO_Init+0x204>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4f      	ldr	r2, [pc, #316]	@ (800138c <HAL_GPIO_Init+0x310>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d013      	beq.n	800127c <HAL_GPIO_Init+0x200>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4e      	ldr	r2, [pc, #312]	@ (8001390 <HAL_GPIO_Init+0x314>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d00d      	beq.n	8001278 <HAL_GPIO_Init+0x1fc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4d      	ldr	r2, [pc, #308]	@ (8001394 <HAL_GPIO_Init+0x318>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d007      	beq.n	8001274 <HAL_GPIO_Init+0x1f8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4c      	ldr	r2, [pc, #304]	@ (8001398 <HAL_GPIO_Init+0x31c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d101      	bne.n	8001270 <HAL_GPIO_Init+0x1f4>
 800126c:	2307      	movs	r3, #7
 800126e:	e00e      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001270:	2308      	movs	r3, #8
 8001272:	e00c      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001274:	2306      	movs	r3, #6
 8001276:	e00a      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001278:	2305      	movs	r3, #5
 800127a:	e008      	b.n	800128e <HAL_GPIO_Init+0x212>
 800127c:	2304      	movs	r3, #4
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001280:	2303      	movs	r3, #3
 8001282:	e004      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_GPIO_Init+0x212>
 800128c:	2300      	movs	r3, #0
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4093      	lsls	r3, r2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800129e:	4937      	ldr	r1, [pc, #220]	@ (800137c <HAL_GPIO_Init+0x300>)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ac:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <HAL_GPIO_Init+0x320>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012d0:	4a32      	ldr	r2, [pc, #200]	@ (800139c <HAL_GPIO_Init+0x320>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d6:	4b31      	ldr	r3, [pc, #196]	@ (800139c <HAL_GPIO_Init+0x320>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012fa:	4a28      	ldr	r2, [pc, #160]	@ (800139c <HAL_GPIO_Init+0x320>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001300:	4b26      	ldr	r3, [pc, #152]	@ (800139c <HAL_GPIO_Init+0x320>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001324:	4a1d      	ldr	r2, [pc, #116]	@ (800139c <HAL_GPIO_Init+0x320>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <HAL_GPIO_Init+0x320>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800134e:	4a13      	ldr	r2, [pc, #76]	@ (800139c <HAL_GPIO_Init+0x320>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	f47f ae91 	bne.w	800108c <HAL_GPIO_Init+0x10>
  }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000
 8001380:	48000400 	.word	0x48000400
 8001384:	48000800 	.word	0x48000800
 8001388:	48000c00 	.word	0x48000c00
 800138c:	48001000 	.word	0x48001000
 8001390:	48001400 	.word	0x48001400
 8001394:	48001800 	.word	0x48001800
 8001398:	48001c00 	.word	0x48001c00
 800139c:	40010400 	.word	0x40010400

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4013      	ands	r3, r2
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43d9      	mvns	r1, r3
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	400b      	ands	r3, r1
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001408:	4b04      	ldr	r3, [pc, #16]	@ (800141c <HAL_PWREx_GetVoltageRange+0x18>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000

08001420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800142e:	d130      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001430:	4b23      	ldr	r3, [pc, #140]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800143c:	d038      	beq.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001446:	4a1e      	ldr	r2, [pc, #120]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001448:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800144e:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2232      	movs	r2, #50	@ 0x32
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	4a1b      	ldr	r2, [pc, #108]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9b      	lsrs	r3, r3, #18
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001464:	e002      	b.n	800146c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3b01      	subs	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001478:	d102      	bne.n	8001480 <HAL_PWREx_ControlVoltageScaling+0x60>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f2      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800148c:	d110      	bne.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e00f      	b.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800149a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800149e:	d007      	beq.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014a0:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014a8:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40007000 	.word	0x40007000
 80014c4:	20000000 	.word	0x20000000
 80014c8:	431bde83 	.word	0x431bde83

080014cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	f000 bc08 	b.w	8001cf0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e0:	4b96      	ldr	r3, [pc, #600]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ea:	4b94      	ldr	r3, [pc, #592]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80e4 	beq.w	80016ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_RCC_OscConfig+0x4c>
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	f040 808b 	bne.w	8001626 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b01      	cmp	r3, #1
 8001514:	f040 8087 	bne.w	8001626 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001518:	4b88      	ldr	r3, [pc, #544]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x64>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e3df      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	4b81      	ldr	r3, [pc, #516]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_RCC_OscConfig+0x7e>
 8001540:	4b7e      	ldr	r3, [pc, #504]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001548:	e005      	b.n	8001556 <HAL_RCC_OscConfig+0x8a>
 800154a:	4b7c      	ldr	r3, [pc, #496]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 800154c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001556:	4293      	cmp	r3, r2
 8001558:	d223      	bcs.n	80015a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fd92 	bl	8002088 <RCC_SetFlashLatencyFromMSIRange>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e3c0      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156e:	4b73      	ldr	r3, [pc, #460]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a72      	ldr	r2, [pc, #456]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b70      	ldr	r3, [pc, #448]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	496d      	ldr	r1, [pc, #436]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158c:	4b6b      	ldr	r3, [pc, #428]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	4968      	ldr	r1, [pc, #416]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	e025      	b.n	80015ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a2:	4b66      	ldr	r3, [pc, #408]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a65      	ldr	r2, [pc, #404]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b63      	ldr	r3, [pc, #396]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4960      	ldr	r1, [pc, #384]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c0:	4b5e      	ldr	r3, [pc, #376]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	495b      	ldr	r1, [pc, #364]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fd52 	bl	8002088 <RCC_SetFlashLatencyFromMSIRange>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e380      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ee:	f000 fc87 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b51      	ldr	r3, [pc, #324]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	4950      	ldr	r1, [pc, #320]	@ (8001740 <HAL_RCC_OscConfig+0x274>)
 8001600:	5ccb      	ldrb	r3, [r1, r3]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	4a4e      	ldr	r2, [pc, #312]	@ (8001744 <HAL_RCC_OscConfig+0x278>)
 800160c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800160e:	4b4e      	ldr	r3, [pc, #312]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fb22 	bl	8000c5c <HAL_InitTick>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d052      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	e364      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d032      	beq.n	8001694 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800162e:	4b43      	ldr	r3, [pc, #268]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a42      	ldr	r2, [pc, #264]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800163a:	f7ff fb5f 	bl	8000cfc <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001642:	f7ff fb5b 	bl	8000cfc <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e34d      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001654:	4b39      	ldr	r3, [pc, #228]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001660:	4b36      	ldr	r3, [pc, #216]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a35      	ldr	r2, [pc, #212]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b33      	ldr	r3, [pc, #204]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4930      	ldr	r1, [pc, #192]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167e:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	492b      	ldr	r1, [pc, #172]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
 8001692:	e01a      	b.n	80016ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001694:	4b29      	ldr	r3, [pc, #164]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a28      	ldr	r2, [pc, #160]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb2c 	bl	8000cfc <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a8:	f7ff fb28 	bl	8000cfc <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e31a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1dc>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d073      	beq.n	80017be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_OscConfig+0x21c>
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d10e      	bne.n	8001700 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d10b      	bne.n	8001700 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d063      	beq.n	80017bc <HAL_RCC_OscConfig+0x2f0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d15f      	bne.n	80017bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e2f7      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001708:	d106      	bne.n	8001718 <HAL_RCC_OscConfig+0x24c>
 800170a:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a0b      	ldr	r2, [pc, #44]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e025      	b.n	8001764 <HAL_RCC_OscConfig+0x298>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001720:	d114      	bne.n	800174c <HAL_RCC_OscConfig+0x280>
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a05      	ldr	r2, [pc, #20]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b03      	ldr	r3, [pc, #12]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a02      	ldr	r2, [pc, #8]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e013      	b.n	8001764 <HAL_RCC_OscConfig+0x298>
 800173c:	40021000 	.word	0x40021000
 8001740:	08006244 	.word	0x08006244
 8001744:	20000000 	.word	0x20000000
 8001748:	20000004 	.word	0x20000004
 800174c:	4ba0      	ldr	r3, [pc, #640]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a9f      	ldr	r2, [pc, #636]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b9d      	ldr	r3, [pc, #628]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a9c      	ldr	r2, [pc, #624]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fac6 	bl	8000cfc <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fac2 	bl	8000cfc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	@ 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e2b4      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	4b92      	ldr	r3, [pc, #584]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x2a8>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fab2 	bl	8000cfc <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff faae 	bl	8000cfc <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	@ 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e2a0      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ae:	4b88      	ldr	r3, [pc, #544]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x2d0>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d060      	beq.n	800188c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x310>
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d119      	bne.n	800180a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d116      	bne.n	800180a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017dc:	4b7c      	ldr	r3, [pc, #496]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_OscConfig+0x328>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e27d      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f4:	4b76      	ldr	r3, [pc, #472]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	061b      	lsls	r3, r3, #24
 8001802:	4973      	ldr	r1, [pc, #460]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001808:	e040      	b.n	800188c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d023      	beq.n	800185a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001812:	4b6f      	ldr	r3, [pc, #444]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fa6d 	bl	8000cfc <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fa69 	bl	8000cfc <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e25b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b65      	ldr	r3, [pc, #404]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b62      	ldr	r3, [pc, #392]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	495f      	ldr	r1, [pc, #380]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e018      	b.n	800188c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b5d      	ldr	r3, [pc, #372]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a5c      	ldr	r2, [pc, #368]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fa49 	bl	8000cfc <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fa45 	bl	8000cfc <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e237      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001880:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03c      	beq.n	8001912 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01c      	beq.n	80018da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a0:	4b4b      	ldr	r3, [pc, #300]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a6:	4a4a      	ldr	r2, [pc, #296]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa24 	bl	8000cfc <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fa20 	bl	8000cfc <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e212      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ca:	4b41      	ldr	r3, [pc, #260]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ef      	beq.n	80018b8 <HAL_RCC_OscConfig+0x3ec>
 80018d8:	e01b      	b.n	8001912 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018da:	4b3d      	ldr	r3, [pc, #244]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e0:	4a3b      	ldr	r2, [pc, #236]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff fa07 	bl	8000cfc <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fa03 	bl	8000cfc <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1f5      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001904:	4b32      	ldr	r3, [pc, #200]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ef      	bne.n	80018f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80a6 	beq.w	8001a6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001924:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10d      	bne.n	800194c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001930:	4b27      	ldr	r3, [pc, #156]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001934:	4a26      	ldr	r2, [pc, #152]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800193a:	6593      	str	r3, [r2, #88]	@ 0x58
 800193c:	4b24      	ldr	r3, [pc, #144]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001948:	2301      	movs	r3, #1
 800194a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194c:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <HAL_RCC_OscConfig+0x508>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d118      	bne.n	800198a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001958:	4b1e      	ldr	r3, [pc, #120]	@ (80019d4 <HAL_RCC_OscConfig+0x508>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1d      	ldr	r2, [pc, #116]	@ (80019d4 <HAL_RCC_OscConfig+0x508>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001964:	f7ff f9ca 	bl	8000cfc <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196c:	f7ff f9c6 	bl	8000cfc <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1b8      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_RCC_OscConfig+0x508>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4d8>
 8001992:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001998:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a2:	e029      	b.n	80019f8 <HAL_RCC_OscConfig+0x52c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d115      	bne.n	80019d8 <HAL_RCC_OscConfig+0x50c>
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b2:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019bc:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c2:	4a03      	ldr	r2, [pc, #12]	@ (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x52c>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
 80019d8:	4b9d      	ldr	r3, [pc, #628]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019de:	4a9c      	ldr	r2, [pc, #624]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e8:	4b99      	ldr	r3, [pc, #612]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ee:	4a98      	ldr	r2, [pc, #608]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d016      	beq.n	8001a2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7ff f97c 	bl	8000cfc <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f978 	bl	8000cfc <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e168      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1e:	4b8c      	ldr	r3, [pc, #560]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0ed      	beq.n	8001a08 <HAL_RCC_OscConfig+0x53c>
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f965 	bl	8000cfc <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff f961 	bl	8000cfc <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e151      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a4c:	4b80      	ldr	r3, [pc, #512]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ed      	bne.n	8001a36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5a:	7ffb      	ldrb	r3, [r7, #31]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4b7b      	ldr	r3, [pc, #492]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a64:	4a7a      	ldr	r2, [pc, #488]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d03c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01c      	beq.n	8001aba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a80:	4b73      	ldr	r3, [pc, #460]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a86:	4a72      	ldr	r2, [pc, #456]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f934 	bl	8000cfc <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a98:	f7ff f930 	bl	8000cfc <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e122      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aaa:	4b69      	ldr	r3, [pc, #420]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ef      	beq.n	8001a98 <HAL_RCC_OscConfig+0x5cc>
 8001ab8:	e01b      	b.n	8001af2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aba:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ac0:	4a63      	ldr	r2, [pc, #396]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f917 	bl	8000cfc <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ad2:	f7ff f913 	bl	8000cfc <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e105      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1ef      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80f9 	beq.w	8001cee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	f040 80cf 	bne.w	8001ca4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b06:	4b52      	ldr	r3, [pc, #328]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 0203 	and.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d12c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	3b01      	subs	r3, #1
 8001b26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d123      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d11b      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d113      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d109      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d071      	beq.n	8001c58 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d068      	beq.n	8001c4c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b7a:	4b35      	ldr	r3, [pc, #212]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b86:	4b32      	ldr	r3, [pc, #200]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0ac      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b96:	4b2e      	ldr	r3, [pc, #184]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001b9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ba0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba2:	f7ff f8ab 	bl	8000cfc <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f8a7 	bl	8000cfc <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e099      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc8:	4b21      	ldr	r3, [pc, #132]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <HAL_RCC_OscConfig+0x788>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bd8:	3a01      	subs	r2, #1
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001be2:	0212      	lsls	r2, r2, #8
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bea:	0852      	lsrs	r2, r2, #1
 8001bec:	3a01      	subs	r2, #1
 8001bee:	0552      	lsls	r2, r2, #21
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bf6:	0852      	lsrs	r2, r2, #1
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	0652      	lsls	r2, r2, #25
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c02:	06d2      	lsls	r2, r2, #27
 8001c04:	430a      	orrs	r2, r1
 8001c06:	4912      	ldr	r1, [pc, #72]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0f      	ldr	r2, [pc, #60]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c18:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c24:	f7ff f86a 	bl	8000cfc <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff f866 	bl	8000cfc <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e058      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c4a:	e050      	b.n	8001cee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e04f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c58:	4b27      	ldr	r3, [pc, #156]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d144      	bne.n	8001cee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c64:	4b24      	ldr	r3, [pc, #144]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a23      	ldr	r2, [pc, #140]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c70:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a20      	ldr	r2, [pc, #128]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c7c:	f7ff f83e 	bl	8000cfc <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff f83a 	bl	8000cfc <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e02c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c96:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x7b8>
 8001ca2:	e024      	b.n	8001cee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d01f      	beq.n	8001cea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001cb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f821 	bl	8000cfc <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff f81d 	bl	8000cfc <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e00f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4905      	ldr	r1, [pc, #20]	@ (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_RCC_OscConfig+0x830>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60cb      	str	r3, [r1, #12]
 8001ce8:	e001      	b.n	8001cee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	feeefffc 	.word	0xfeeefffc

08001d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0e7      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b75      	ldr	r3, [pc, #468]	@ (8001eec <HAL_RCC_ClockConfig+0x1ec>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b72      	ldr	r3, [pc, #456]	@ (8001eec <HAL_RCC_ClockConfig+0x1ec>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	4970      	ldr	r1, [pc, #448]	@ (8001eec <HAL_RCC_ClockConfig+0x1ec>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b6e      	ldr	r3, [pc, #440]	@ (8001eec <HAL_RCC_ClockConfig+0x1ec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0cf      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d010      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	4b66      	ldr	r3, [pc, #408]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d908      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d60:	4b63      	ldr	r3, [pc, #396]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4960      	ldr	r1, [pc, #384]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d04c      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d121      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0a6      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9e:	4b54      	ldr	r3, [pc, #336]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e09a      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e08e      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e086      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b46      	ldr	r3, [pc, #280]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4943      	ldr	r1, [pc, #268]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de8:	f7fe ff88 	bl	8000cfc <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7fe ff84 	bl	8000cfc <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e06e      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d010      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d208      	bcs.n	8001e46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	492b      	ldr	r1, [pc, #172]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e46:	4b29      	ldr	r3, [pc, #164]	@ (8001eec <HAL_RCC_ClockConfig+0x1ec>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d210      	bcs.n	8001e76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e54:	4b25      	ldr	r3, [pc, #148]	@ (8001eec <HAL_RCC_ClockConfig+0x1ec>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f023 0207 	bic.w	r2, r3, #7
 8001e5c:	4923      	ldr	r1, [pc, #140]	@ (8001eec <HAL_RCC_ClockConfig+0x1ec>)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e64:	4b21      	ldr	r3, [pc, #132]	@ (8001eec <HAL_RCC_ClockConfig+0x1ec>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e036      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	4918      	ldr	r1, [pc, #96]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d009      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea0:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4910      	ldr	r1, [pc, #64]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb4:	f000 f824 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	490b      	ldr	r1, [pc, #44]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed0:	4a09      	ldr	r2, [pc, #36]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_RCC_ClockConfig+0x1fc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe febf 	bl	8000c5c <HAL_InitTick>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ee2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08006244 	.word	0x08006244
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	@ 0x24
 8001f04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f18:	4b3b      	ldr	r3, [pc, #236]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x34>
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d121      	bne.n	8001f72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d11e      	bne.n	8001f72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f34:	4b34      	ldr	r3, [pc, #208]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f40:	4b31      	ldr	r3, [pc, #196]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e005      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f50:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800200c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10d      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f78:	4b25      	ldr	r3, [pc, #148]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	e004      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f84:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d134      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d003      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0xac>
 8001fa4:	e005      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fa8:	617b      	str	r3, [r7, #20]
      break;
 8001faa:	e005      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fae:	617b      	str	r3, [r7, #20]
      break;
 8001fb0:	e002      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	617b      	str	r3, [r7, #20]
      break;
 8001fb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb8:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	fb03 f202 	mul.w	r2, r3, r2
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fde:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	0e5b      	lsrs	r3, r3, #25
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ff8:	69bb      	ldr	r3, [r7, #24]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	@ 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	0800625c 	.word	0x0800625c
 8002010:	00f42400 	.word	0x00f42400
 8002014:	007a1200 	.word	0x007a1200

08002018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <HAL_RCC_GetHCLKFreq+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000

08002030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002034:	f7ff fff0 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4904      	ldr	r1, [pc, #16]	@ (8002058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	08006254 	.word	0x08006254

0800205c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002060:	f7ff ffda 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0adb      	lsrs	r3, r3, #11
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4904      	ldr	r1, [pc, #16]	@ (8002084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	08006254 	.word	0x08006254

08002088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002094:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020a0:	f7ff f9b0 	bl	8001404 <HAL_PWREx_GetVoltageRange>
 80020a4:	6178      	str	r0, [r7, #20]
 80020a6:	e014      	b.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	4a24      	ldr	r2, [pc, #144]	@ (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b4:	4b22      	ldr	r3, [pc, #136]	@ (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020c0:	f7ff f9a0 	bl	8001404 <HAL_PWREx_GetVoltageRange>
 80020c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020d8:	d10b      	bne.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b80      	cmp	r3, #128	@ 0x80
 80020de:	d919      	bls.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80020e4:	d902      	bls.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e6:	2302      	movs	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e013      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020ec:	2301      	movs	r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	e010      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b80      	cmp	r3, #128	@ 0x80
 80020f6:	d902      	bls.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020f8:	2303      	movs	r3, #3
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e00a      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b80      	cmp	r3, #128	@ 0x80
 8002102:	d102      	bne.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002104:	2302      	movs	r3, #2
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e004      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b70      	cmp	r3, #112	@ 0x70
 800210e:	d101      	bne.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002110:	2301      	movs	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 0207 	bic.w	r2, r3, #7
 800211c:	4909      	ldr	r1, [pc, #36]	@ (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002124:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	40022000 	.word	0x40022000

08002148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002150:	2300      	movs	r3, #0
 8002152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002154:	2300      	movs	r3, #0
 8002156:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002160:	2b00      	cmp	r3, #0
 8002162:	d041      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002168:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800216c:	d02a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800216e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002172:	d824      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002174:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002178:	d008      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800217a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800217e:	d81e      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002184:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002188:	d010      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800218a:	e018      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800218c:	4b86      	ldr	r3, [pc, #536]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a85      	ldr	r2, [pc, #532]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002196:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002198:	e015      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 facd 	bl	8002740 <RCCEx_PLLSAI1_Config>
 80021a6:	4603      	mov	r3, r0
 80021a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021aa:	e00c      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3320      	adds	r3, #32
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fbb6 	bl	8002924 <RCCEx_PLLSAI2_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021bc:	e003      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	74fb      	strb	r3, [r7, #19]
      break;
 80021c2:	e000      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021cc:	4b76      	ldr	r3, [pc, #472]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021da:	4973      	ldr	r1, [pc, #460]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021e2:	e001      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d041      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80021fc:	d02a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002202:	d824      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002204:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002208:	d008      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800220a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800220e:	d81e      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002218:	d010      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800221a:	e018      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800221c:	4b62      	ldr	r3, [pc, #392]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a61      	ldr	r2, [pc, #388]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002226:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002228:	e015      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fa85 	bl	8002740 <RCCEx_PLLSAI1_Config>
 8002236:	4603      	mov	r3, r0
 8002238:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800223a:	e00c      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3320      	adds	r3, #32
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fb6e 	bl	8002924 <RCCEx_PLLSAI2_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800224c:	e003      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	74fb      	strb	r3, [r7, #19]
      break;
 8002252:	e000      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800225c:	4b52      	ldr	r3, [pc, #328]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800226a:	494f      	ldr	r1, [pc, #316]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002272:	e001      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a0 	beq.w	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a4:	4a40      	ldr	r2, [pc, #256]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ac:	4b3e      	ldr	r3, [pc, #248]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b8:	2301      	movs	r3, #1
 80022ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022bc:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a3a      	ldr	r2, [pc, #232]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fd18 	bl	8000cfc <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022ce:	e009      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d0:	f7fe fd14 	bl	8000cfc <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d902      	bls.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	74fb      	strb	r3, [r7, #19]
        break;
 80022e2:	e005      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e4:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ef      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d15c      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022f6:	4b2c      	ldr	r3, [pc, #176]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002300:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01f      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	d019      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002314:	4b24      	ldr	r3, [pc, #144]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800231e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002320:	4b21      	ldr	r3, [pc, #132]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002326:	4a20      	ldr	r2, [pc, #128]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002336:	4a1c      	ldr	r2, [pc, #112]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002340:	4a19      	ldr	r2, [pc, #100]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe fcd3 	bl	8000cfc <HAL_GetTick>
 8002356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002358:	e00b      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fccf 	bl	8000cfc <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d902      	bls.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	74fb      	strb	r3, [r7, #19]
            break;
 8002370:	e006      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ec      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002396:	4904      	ldr	r1, [pc, #16]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800239e:	e009      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	74bb      	strb	r3, [r7, #18]
 80023a4:	e006      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b4:	7c7b      	ldrb	r3, [r7, #17]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4ba6      	ldr	r3, [pc, #664]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023be:	4aa5      	ldr	r2, [pc, #660]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d2:	4ba0      	ldr	r3, [pc, #640]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d8:	f023 0203 	bic.w	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	499c      	ldr	r1, [pc, #624]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f4:	4b97      	ldr	r3, [pc, #604]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fa:	f023 020c 	bic.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002402:	4994      	ldr	r1, [pc, #592]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002416:	4b8f      	ldr	r3, [pc, #572]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	498b      	ldr	r1, [pc, #556]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002438:	4b86      	ldr	r3, [pc, #536]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	4983      	ldr	r1, [pc, #524]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800245a:	4b7e      	ldr	r3, [pc, #504]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002468:	497a      	ldr	r1, [pc, #488]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800247c:	4b75      	ldr	r3, [pc, #468]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	4972      	ldr	r1, [pc, #456]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800249e:	4b6d      	ldr	r3, [pc, #436]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ac:	4969      	ldr	r1, [pc, #420]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024c0:	4b64      	ldr	r3, [pc, #400]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024ce:	4961      	ldr	r1, [pc, #388]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f0:	4958      	ldr	r1, [pc, #352]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002504:	4b53      	ldr	r3, [pc, #332]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002512:	4950      	ldr	r1, [pc, #320]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002526:	4b4b      	ldr	r3, [pc, #300]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	4947      	ldr	r1, [pc, #284]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002548:	4b42      	ldr	r3, [pc, #264]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800254a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002556:	493f      	ldr	r1, [pc, #252]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d028      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800256a:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002570:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002578:	4936      	ldr	r1, [pc, #216]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002588:	d106      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800258a:	4b32      	ldr	r3, [pc, #200]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4a31      	ldr	r2, [pc, #196]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002594:	60d3      	str	r3, [r2, #12]
 8002596:	e011      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f8c9 	bl	8002740 <RCCEx_PLLSAI1_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d028      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025c8:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d6:	491f      	ldr	r1, [pc, #124]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025e6:	d106      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025f2:	60d3      	str	r3, [r2, #12]
 80025f4:	e011      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025fe:	d10c      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	2101      	movs	r1, #1
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f89a 	bl	8002740 <RCCEx_PLLSAI1_Config>
 800260c:	4603      	mov	r3, r0
 800260e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d02a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002634:	4907      	ldr	r1, [pc, #28]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002644:	d108      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002646:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	4a02      	ldr	r2, [pc, #8]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800264c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002650:	60d3      	str	r3, [r2, #12]
 8002652:	e013      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002654:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800265c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002660:	d10c      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3304      	adds	r3, #4
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f869 	bl	8002740 <RCCEx_PLLSAI1_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02f      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002688:	4b2c      	ldr	r3, [pc, #176]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002696:	4929      	ldr	r1, [pc, #164]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026a6:	d10d      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3304      	adds	r3, #4
 80026ac:	2102      	movs	r1, #2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f846 	bl	8002740 <RCCEx_PLLSAI1_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d014      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	74bb      	strb	r3, [r7, #18]
 80026c2:	e011      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3320      	adds	r3, #32
 80026d2:	2102      	movs	r1, #2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 f925 	bl	8002924 <RCCEx_PLLSAI2_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002704:	490d      	ldr	r1, [pc, #52]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002718:	4b08      	ldr	r3, [pc, #32]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002728:	4904      	ldr	r1, [pc, #16]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002730:	7cbb      	ldrb	r3, [r7, #18]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000

08002740 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800274e:	4b74      	ldr	r3, [pc, #464]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d018      	beq.n	800278c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800275a:	4b71      	ldr	r3, [pc, #452]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0203 	and.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d10d      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
       ||
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002772:	4b6b      	ldr	r3, [pc, #428]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
       ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d047      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e044      	b.n	8002816 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d018      	beq.n	80027c6 <RCCEx_PLLSAI1_Config+0x86>
 8002794:	2b03      	cmp	r3, #3
 8002796:	d825      	bhi.n	80027e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002798:	2b01      	cmp	r3, #1
 800279a:	d002      	beq.n	80027a2 <RCCEx_PLLSAI1_Config+0x62>
 800279c:	2b02      	cmp	r3, #2
 800279e:	d009      	beq.n	80027b4 <RCCEx_PLLSAI1_Config+0x74>
 80027a0:	e020      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d11d      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b2:	e01a      	b.n	80027ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d116      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c4:	e013      	b.n	80027ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027c6:	4b56      	ldr	r3, [pc, #344]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027d2:	4b53      	ldr	r3, [pc, #332]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027e2:	e006      	b.n	80027f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      break;
 80027e8:	e004      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ea:	bf00      	nop
 80027ec:	e002      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027fa:	4b49      	ldr	r3, [pc, #292]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	430b      	orrs	r3, r1
 8002810:	4943      	ldr	r1, [pc, #268]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d17c      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800281c:	4b40      	ldr	r3, [pc, #256]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a3f      	ldr	r2, [pc, #252]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002822:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002828:	f7fe fa68 	bl	8000cfc <HAL_GetTick>
 800282c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800282e:	e009      	b.n	8002844 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002830:	f7fe fa64 	bl	8000cfc <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d902      	bls.n	8002844 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	73fb      	strb	r3, [r7, #15]
        break;
 8002842:	e005      	b.n	8002850 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ef      	bne.n	8002830 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d15f      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d110      	bne.n	800287e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800285c:	4b30      	ldr	r3, [pc, #192]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002864:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6892      	ldr	r2, [r2, #8]
 800286c:	0211      	lsls	r1, r2, #8
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68d2      	ldr	r2, [r2, #12]
 8002872:	06d2      	lsls	r2, r2, #27
 8002874:	430a      	orrs	r2, r1
 8002876:	492a      	ldr	r1, [pc, #168]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	610b      	str	r3, [r1, #16]
 800287c:	e027      	b.n	80028ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d112      	bne.n	80028aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002884:	4b26      	ldr	r3, [pc, #152]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800288c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6892      	ldr	r2, [r2, #8]
 8002894:	0211      	lsls	r1, r2, #8
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6912      	ldr	r2, [r2, #16]
 800289a:	0852      	lsrs	r2, r2, #1
 800289c:	3a01      	subs	r2, #1
 800289e:	0552      	lsls	r2, r2, #21
 80028a0:	430a      	orrs	r2, r1
 80028a2:	491f      	ldr	r1, [pc, #124]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	610b      	str	r3, [r1, #16]
 80028a8:	e011      	b.n	80028ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	0211      	lsls	r1, r2, #8
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6952      	ldr	r2, [r2, #20]
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0652      	lsls	r2, r2, #25
 80028c6:	430a      	orrs	r2, r1
 80028c8:	4915      	ldr	r1, [pc, #84]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028ce:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a13      	ldr	r2, [pc, #76]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe fa0f 	bl	8000cfc <HAL_GetTick>
 80028de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028e0:	e009      	b.n	80028f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028e2:	f7fe fa0b 	bl	8000cfc <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d902      	bls.n	80028f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	73fb      	strb	r3, [r7, #15]
          break;
 80028f4:	e005      	b.n	8002902 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ef      	beq.n	80028e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002908:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4903      	ldr	r1, [pc, #12]	@ (8002920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000

08002924 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002932:	4b69      	ldr	r3, [pc, #420]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d018      	beq.n	8002970 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800293e:	4b66      	ldr	r3, [pc, #408]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 0203 	and.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d10d      	bne.n	800296a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
       ||
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002956:	4b60      	ldr	r3, [pc, #384]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
       ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d047      	beq.n	80029fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	e044      	b.n	80029fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d018      	beq.n	80029aa <RCCEx_PLLSAI2_Config+0x86>
 8002978:	2b03      	cmp	r3, #3
 800297a:	d825      	bhi.n	80029c8 <RCCEx_PLLSAI2_Config+0xa4>
 800297c:	2b01      	cmp	r3, #1
 800297e:	d002      	beq.n	8002986 <RCCEx_PLLSAI2_Config+0x62>
 8002980:	2b02      	cmp	r3, #2
 8002982:	d009      	beq.n	8002998 <RCCEx_PLLSAI2_Config+0x74>
 8002984:	e020      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002986:	4b54      	ldr	r3, [pc, #336]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11d      	bne.n	80029ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002996:	e01a      	b.n	80029ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002998:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d116      	bne.n	80029d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a8:	e013      	b.n	80029d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029aa:	4b4b      	ldr	r3, [pc, #300]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029b6:	4b48      	ldr	r3, [pc, #288]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029c6:	e006      	b.n	80029d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      break;
 80029cc:	e004      	b.n	80029d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ce:	bf00      	nop
 80029d0:	e002      	b.n	80029d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029d2:	bf00      	nop
 80029d4:	e000      	b.n	80029d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029de:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	430b      	orrs	r3, r1
 80029f4:	4938      	ldr	r1, [pc, #224]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d166      	bne.n	8002ace <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a00:	4b35      	ldr	r3, [pc, #212]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a34      	ldr	r2, [pc, #208]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0c:	f7fe f976 	bl	8000cfc <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a12:	e009      	b.n	8002a28 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a14:	f7fe f972 	bl	8000cfc <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d902      	bls.n	8002a28 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	73fb      	strb	r3, [r7, #15]
        break;
 8002a26:	e005      	b.n	8002a34 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a28:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ef      	bne.n	8002a14 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d149      	bne.n	8002ace <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d110      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a40:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002a48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6892      	ldr	r2, [r2, #8]
 8002a50:	0211      	lsls	r1, r2, #8
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	06d2      	lsls	r2, r2, #27
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	491f      	ldr	r1, [pc, #124]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	614b      	str	r3, [r1, #20]
 8002a60:	e011      	b.n	8002a86 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a6a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6892      	ldr	r2, [r2, #8]
 8002a72:	0211      	lsls	r1, r2, #8
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6912      	ldr	r2, [r2, #16]
 8002a78:	0852      	lsrs	r2, r2, #1
 8002a7a:	3a01      	subs	r2, #1
 8002a7c:	0652      	lsls	r2, r2, #25
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	4915      	ldr	r1, [pc, #84]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a92:	f7fe f933 	bl	8000cfc <HAL_GetTick>
 8002a96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a98:	e009      	b.n	8002aae <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a9a:	f7fe f92f 	bl	8000cfc <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d902      	bls.n	8002aae <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	73fb      	strb	r3, [r7, #15]
          break;
 8002aac:	e005      	b.n	8002aba <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ef      	beq.n	8002a9a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d106      	bne.n	8002ace <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	4903      	ldr	r1, [pc, #12]	@ (8002ad8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000

08002adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e095      	b.n	8002c1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002afe:	d009      	beq.n	8002b14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
 8002b06:	e005      	b.n	8002b14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fd ff26 	bl	8000980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b54:	d902      	bls.n	8002b5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	e002      	b.n	8002b62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b6a:	d007      	beq.n	8002b7c <HAL_SPI_Init+0xa0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b74:	d002      	beq.n	8002b7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bbe:	ea42 0103 	orr.w	r1, r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	f003 0204 	and.w	r2, r3, #4
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002bf8:	ea42 0103 	orr.w	r1, r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b088      	sub	sp, #32
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	603b      	str	r3, [r7, #0]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c32:	f7fe f863 	bl	8000cfc <HAL_GetTick>
 8002c36:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d001      	beq.n	8002c4c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e15c      	b.n	8002f06 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Transmit+0x36>
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e154      	b.n	8002f06 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_SPI_Transmit+0x48>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e14d      	b.n	8002f06 <HAL_SPI_Transmit+0x2e4>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2203      	movs	r2, #3
 8002c76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cbc:	d10f      	bne.n	8002cde <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce8:	2b40      	cmp	r3, #64	@ 0x40
 8002cea:	d007      	beq.n	8002cfc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d04:	d952      	bls.n	8002dac <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_SPI_Transmit+0xf2>
 8002d0e:	8b7b      	ldrh	r3, [r7, #26]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d145      	bne.n	8002da0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d18:	881a      	ldrh	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	1c9a      	adds	r2, r3, #2
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d38:	e032      	b.n	8002da0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d112      	bne.n	8002d6e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4c:	881a      	ldrh	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d58:	1c9a      	adds	r2, r3, #2
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d6c:	e018      	b.n	8002da0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d6e:	f7fd ffc5 	bl	8000cfc <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d803      	bhi.n	8002d86 <HAL_SPI_Transmit+0x164>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d102      	bne.n	8002d8c <HAL_SPI_Transmit+0x16a>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0b2      	b.n	8002f06 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1c7      	bne.n	8002d3a <HAL_SPI_Transmit+0x118>
 8002daa:	e083      	b.n	8002eb4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_SPI_Transmit+0x198>
 8002db4:	8b7b      	ldrh	r3, [r7, #26]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d177      	bne.n	8002eaa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d912      	bls.n	8002dea <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b02      	subs	r3, #2
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002de8:	e05f      	b.n	8002eaa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e10:	e04b      	b.n	8002eaa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d12b      	bne.n	8002e78 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d912      	bls.n	8002e50 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2e:	881a      	ldrh	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3a:	1c9a      	adds	r2, r3, #2
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b02      	subs	r3, #2
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e4e:	e02c      	b.n	8002eaa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	7812      	ldrb	r2, [r2, #0]
 8002e5c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e76:	e018      	b.n	8002eaa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e78:	f7fd ff40 	bl	8000cfc <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d803      	bhi.n	8002e90 <HAL_SPI_Transmit+0x26e>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8e:	d102      	bne.n	8002e96 <HAL_SPI_Transmit+0x274>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e02d      	b.n	8002f06 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ae      	bne.n	8002e12 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	6839      	ldr	r1, [r7, #0]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fcf5 	bl	80038a8 <SPI_EndRxTxTransaction>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
  }
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b088      	sub	sp, #32
 8002f12:	af02      	add	r7, sp, #8
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d001      	beq.n	8002f2e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e123      	b.n	8003176 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f36:	d112      	bne.n	8002f5e <HAL_SPI_Receive+0x50>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10e      	bne.n	8002f5e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2204      	movs	r2, #4
 8002f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f48:	88fa      	ldrh	r2, [r7, #6]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f912 	bl	800317e <HAL_SPI_TransmitReceive>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	e10b      	b.n	8003176 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f5e:	f7fd fecd 	bl	8000cfc <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_SPI_Receive+0x62>
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e100      	b.n	8003176 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_SPI_Receive+0x74>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0f9      	b.n	8003176 <HAL_SPI_Receive+0x268>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	88fa      	ldrh	r2, [r7, #6]
 8002faa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fd4:	d908      	bls.n	8002fe8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	e007      	b.n	8002ff8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ff6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003000:	d10f      	bne.n	8003022 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003010:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003020:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302c:	2b40      	cmp	r3, #64	@ 0x40
 800302e:	d007      	beq.n	8003040 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800303e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003048:	d875      	bhi.n	8003136 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800304a:	e037      	b.n	80030bc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d117      	bne.n	800308a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f103 020c 	add.w	r2, r3, #12
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	7812      	ldrb	r2, [r2, #0]
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003088:	e018      	b.n	80030bc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800308a:	f7fd fe37 	bl	8000cfc <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d803      	bhi.n	80030a2 <HAL_SPI_Receive+0x194>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d102      	bne.n	80030a8 <HAL_SPI_Receive+0x19a>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e05c      	b.n	8003176 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1c1      	bne.n	800304c <HAL_SPI_Receive+0x13e>
 80030c8:	e03b      	b.n	8003142 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d115      	bne.n	8003104 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	b292      	uxth	r2, r2
 80030e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	1c9a      	adds	r2, r3, #2
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003102:	e018      	b.n	8003136 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003104:	f7fd fdfa 	bl	8000cfc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d803      	bhi.n	800311c <HAL_SPI_Receive+0x20e>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d102      	bne.n	8003122 <HAL_SPI_Receive+0x214>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e01f      	b.n	8003176 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1c3      	bne.n	80030ca <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	6839      	ldr	r1, [r7, #0]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fb56 	bl	80037f8 <SPI_EndRxTransaction>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003174:	2300      	movs	r3, #0
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b08a      	sub	sp, #40	@ 0x28
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800318c:	2301      	movs	r3, #1
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003190:	f7fd fdb4 	bl	8000cfc <HAL_GetTick>
 8003194:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800319c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031ac:	7ffb      	ldrb	r3, [r7, #31]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d00c      	beq.n	80031cc <HAL_SPI_TransmitReceive+0x4e>
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031b8:	d106      	bne.n	80031c8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <HAL_SPI_TransmitReceive+0x4a>
 80031c2:	7ffb      	ldrb	r3, [r7, #31]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d001      	beq.n	80031cc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
 80031ca:	e1f3      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_SPI_TransmitReceive+0x60>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_SPI_TransmitReceive+0x60>
 80031d8:	887b      	ldrh	r3, [r7, #2]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e1e8      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x72>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e1e1      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x436>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b04      	cmp	r3, #4
 8003202:	d003      	beq.n	800320c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2205      	movs	r2, #5
 8003208:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	887a      	ldrh	r2, [r7, #2]
 8003232:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	887a      	ldrh	r2, [r7, #2]
 8003238:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800324e:	d802      	bhi.n	8003256 <HAL_SPI_TransmitReceive+0xd8>
 8003250:	8abb      	ldrh	r3, [r7, #20]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d908      	bls.n	8003268 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	e007      	b.n	8003278 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003276:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003282:	2b40      	cmp	r3, #64	@ 0x40
 8003284:	d007      	beq.n	8003296 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800329e:	f240 8083 	bls.w	80033a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_TransmitReceive+0x132>
 80032aa:	8afb      	ldrh	r3, [r7, #22]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d16f      	bne.n	8003390 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d4:	e05c      	b.n	8003390 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d11b      	bne.n	800331c <HAL_SPI_TransmitReceive+0x19e>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <HAL_SPI_TransmitReceive+0x19e>
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d113      	bne.n	800331c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	881a      	ldrh	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	1c9a      	adds	r2, r3, #2
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d11c      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x1e6>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	b292      	uxth	r2, r2
 8003342:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	1c9a      	adds	r2, r3, #2
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003360:	2301      	movs	r3, #1
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003364:	f7fd fcca 	bl	8000cfc <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003370:	429a      	cmp	r2, r3
 8003372:	d80d      	bhi.n	8003390 <HAL_SPI_TransmitReceive+0x212>
 8003374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d009      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e111      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d19d      	bne.n	80032d6 <HAL_SPI_TransmitReceive+0x158>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d197      	bne.n	80032d6 <HAL_SPI_TransmitReceive+0x158>
 80033a6:	e0e5      	b.n	8003574 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x23a>
 80033b0:	8afb      	ldrh	r3, [r7, #22]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	f040 80d1 	bne.w	800355a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d912      	bls.n	80033e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c6:	881a      	ldrh	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	1c9a      	adds	r2, r3, #2
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b02      	subs	r3, #2
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033e6:	e0b8      	b.n	800355a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	7812      	ldrb	r2, [r2, #0]
 80033f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800340e:	e0a4      	b.n	800355a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d134      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x30a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d02f      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x30a>
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342a:	2b01      	cmp	r3, #1
 800342c:	d12c      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d912      	bls.n	800345e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003448:	1c9a      	adds	r2, r3, #2
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b02      	subs	r3, #2
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800345c:	e012      	b.n	8003484 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	7812      	ldrb	r2, [r2, #0]
 800346a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d148      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x3aa>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d042      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d923      	bls.n	80034f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	b292      	uxth	r2, r2
 80034ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	1c9a      	adds	r2, r3, #2
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b02      	subs	r3, #2
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d81f      	bhi.n	8003524 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	e016      	b.n	8003524 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f103 020c 	add.w	r2, r3, #12
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003524:	2301      	movs	r3, #1
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003528:	f7fd fbe8 	bl	8000cfc <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003534:	429a      	cmp	r2, r3
 8003536:	d803      	bhi.n	8003540 <HAL_SPI_TransmitReceive+0x3c2>
 8003538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d102      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x3c8>
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e02c      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	f47f af55 	bne.w	8003410 <HAL_SPI_TransmitReceive+0x292>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	f47f af4e 	bne.w	8003410 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003574:	6a3a      	ldr	r2, [r7, #32]
 8003576:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f995 	bl	80038a8 <SPI_EndRxTxTransaction>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e00e      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80035b2:	2300      	movs	r3, #0
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3728      	adds	r7, #40	@ 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035cc:	f7fd fb96 	bl	8000cfc <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035dc:	f7fd fb8e 	bl	8000cfc <HAL_GetTick>
 80035e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035e2:	4b39      	ldr	r3, [pc, #228]	@ (80036c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	015b      	lsls	r3, r3, #5
 80035e8:	0d1b      	lsrs	r3, r3, #20
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	fb02 f303 	mul.w	r3, r2, r3
 80035f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035f2:	e054      	b.n	800369e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d050      	beq.n	800369e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035fc:	f7fd fb7e 	bl	8000cfc <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	429a      	cmp	r2, r3
 800360a:	d902      	bls.n	8003612 <SPI_WaitFlagStateUntilTimeout+0x56>
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d13d      	bne.n	800368e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003620:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800362a:	d111      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x94>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003634:	d004      	beq.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363e:	d107      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003658:	d10f      	bne.n	800367a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003678:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e017      	b.n	80036be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3b01      	subs	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d19b      	bne.n	80035f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000000 	.word	0x20000000

080036cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036de:	f7fd fb0d 	bl	8000cfc <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036ee:	f7fd fb05 	bl	8000cfc <HAL_GetTick>
 80036f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036fc:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00da      	lsls	r2, r3, #3
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	0d1b      	lsrs	r3, r3, #20
 800370c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003714:	e060      	b.n	80037d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800371c:	d107      	bne.n	800372e <SPI_WaitFifoStateUntilTimeout+0x62>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d104      	bne.n	800372e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800372c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d050      	beq.n	80037d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003736:	f7fd fae1 	bl	8000cfc <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003742:	429a      	cmp	r2, r3
 8003744:	d902      	bls.n	800374c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	2b00      	cmp	r3, #0
 800374a:	d13d      	bne.n	80037c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800375a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003764:	d111      	bne.n	800378a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800376e:	d004      	beq.n	800377a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003778:	d107      	bne.n	800378a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003788:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003792:	d10f      	bne.n	80037b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e010      	b.n	80037ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d196      	bne.n	8003716 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3728      	adds	r7, #40	@ 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000000 	.word	0x20000000

080037f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800380c:	d111      	bne.n	8003832 <SPI_EndRxTransaction+0x3a>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003816:	d004      	beq.n	8003822 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003820:	d107      	bne.n	8003832 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003830:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2200      	movs	r2, #0
 800383a:	2180      	movs	r1, #128	@ 0x80
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff febd 	bl	80035bc <SPI_WaitFlagStateUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e023      	b.n	80038a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003860:	d11d      	bne.n	800389e <SPI_EndRxTransaction+0xa6>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800386a:	d004      	beq.n	8003876 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003874:	d113      	bne.n	800389e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff ff22 	bl	80036cc <SPI_WaitFifoStateUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e000      	b.n	80038a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7ff ff03 	bl	80036cc <SPI_WaitFifoStateUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	f043 0220 	orr.w	r2, r3, #32
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e027      	b.n	800392c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2200      	movs	r2, #0
 80038e4:	2180      	movs	r1, #128	@ 0x80
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7ff fe68 	bl	80035bc <SPI_WaitFlagStateUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f6:	f043 0220 	orr.w	r2, r3, #32
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e014      	b.n	800392c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2200      	movs	r2, #0
 800390a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff fedc 	bl	80036cc <SPI_WaitFifoStateUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e000      	b.n	800392c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e040      	b.n	80039c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd f856 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	@ 0x24
 8003960:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fedc 	bl	8004738 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fc21 	bl	80041c8 <UART_SetConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e01b      	b.n	80039c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800399e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 ff5b 	bl	800487c <UART_CheckIdleState>
 80039c6:	4603      	mov	r3, r0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	@ 0x28
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d177      	bne.n	8003ad8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_UART_Transmit+0x24>
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e070      	b.n	8003ada <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2221      	movs	r2, #33	@ 0x21
 8003a04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a06:	f7fd f979 	bl	8000cfc <HAL_GetTick>
 8003a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a24:	d108      	bne.n	8003a38 <HAL_UART_Transmit+0x68>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d104      	bne.n	8003a38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	e003      	b.n	8003a40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a40:	e02f      	b.n	8003aa2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2180      	movs	r1, #128	@ 0x80
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 ffbd 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d004      	beq.n	8003a62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e03b      	b.n	8003ada <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a74:	b292      	uxth	r2, r2
 8003a76:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	3302      	adds	r3, #2
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e007      	b.n	8003a90 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	781a      	ldrb	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1c9      	bne.n	8003a42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2140      	movs	r1, #64	@ 0x40
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 ff87 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d004      	beq.n	8003ace <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e005      	b.n	8003ada <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e000      	b.n	8003ada <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
  }
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	@ 0x28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d137      	bne.n	8003b6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_UART_Receive_IT+0x24>
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e030      	b.n	8003b6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <HAL_UART_Receive_IT+0x94>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d01f      	beq.n	8003b5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d018      	beq.n	8003b5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	613b      	str	r3, [r7, #16]
   return(result);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b48:	623b      	str	r3, [r7, #32]
 8003b4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	69f9      	ldr	r1, [r7, #28]
 8003b4e:	6a3a      	ldr	r2, [r7, #32]
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e6      	bne.n	8003b2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 ffa0 	bl	8004aa8 <UART_Start_Receive_IT>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3728      	adds	r7, #40	@ 0x28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40008000 	.word	0x40008000

08003b7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b0ba      	sub	sp, #232	@ 0xe8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ba2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ba6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003baa:	4013      	ands	r3, r2
 8003bac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003bb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d115      	bne.n	8003be4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00f      	beq.n	8003be4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 82ca 	beq.w	800416e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
      }
      return;
 8003be2:	e2c4      	b.n	800416e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003be4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8117 	beq.w	8003e1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003bfe:	4b85      	ldr	r3, [pc, #532]	@ (8003e14 <HAL_UART_IRQHandler+0x298>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 810a 	beq.w	8003e1c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d011      	beq.n	8003c38 <HAL_UART_IRQHandler+0xbc>
 8003c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00b      	beq.n	8003c38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2201      	movs	r2, #1
 8003c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d011      	beq.n	8003c68 <HAL_UART_IRQHandler+0xec>
 8003c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2202      	movs	r2, #2
 8003c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c5e:	f043 0204 	orr.w	r2, r3, #4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d011      	beq.n	8003c98 <HAL_UART_IRQHandler+0x11c>
 8003c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2204      	movs	r2, #4
 8003c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c8e:	f043 0202 	orr.w	r2, r3, #2
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d017      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cca:	f043 0208 	orr.w	r2, r3, #8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d012      	beq.n	8003d06 <HAL_UART_IRQHandler+0x18a>
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00c      	beq.n	8003d06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8230 	beq.w	8004172 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00d      	beq.n	8003d3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4e:	2b40      	cmp	r3, #64	@ 0x40
 8003d50:	d005      	beq.n	8003d5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d04f      	beq.n	8003dfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 ff68 	bl	8004c34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	d141      	bne.n	8003df6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3308      	adds	r3, #8
 8003d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1d9      	bne.n	8003d72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d013      	beq.n	8003dee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dca:	4a13      	ldr	r2, [pc, #76]	@ (8003e18 <HAL_UART_IRQHandler+0x29c>)
 8003dcc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd f911 	bl	8000ffa <HAL_DMA_Abort_IT>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d017      	beq.n	8003e0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003de8:	4610      	mov	r0, r2
 8003dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	e00f      	b.n	8003e0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9d4 	bl	800419c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df4:	e00b      	b.n	8003e0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f9d0 	bl	800419c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfc:	e007      	b.n	8003e0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9cc 	bl	800419c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003e0c:	e1b1      	b.n	8004172 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0e:	bf00      	nop
    return;
 8003e10:	e1af      	b.n	8004172 <HAL_UART_IRQHandler+0x5f6>
 8003e12:	bf00      	nop
 8003e14:	04000120 	.word	0x04000120
 8003e18:	08004cfd 	.word	0x08004cfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	f040 816a 	bne.w	80040fa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8163 	beq.w	80040fa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 815c 	beq.w	80040fa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2210      	movs	r2, #16
 8003e48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e54:	2b40      	cmp	r3, #64	@ 0x40
 8003e56:	f040 80d4 	bne.w	8004002 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80ad 	beq.w	8003fca <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	f080 80a5 	bcs.w	8003fca <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 8086 	bne.w	8003fa8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ed2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1da      	bne.n	8003e9c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3308      	adds	r3, #8
 8003eec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ef6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e1      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e3      	bne.n	8003f22 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f78:	f023 0310 	bic.w	r3, r3, #16
 8003f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e4      	bne.n	8003f68 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fc ffeb 	bl	8000f7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8f4 	bl	80041b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003fc8:	e0d5      	b.n	8004176 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	f040 80ce 	bne.w	8004176 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	f040 80c5 	bne.w	8004176 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f8d8 	bl	80041b0 <HAL_UARTEx_RxEventCallback>
      return;
 8004000:	e0b9      	b.n	8004176 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800400e:	b29b      	uxth	r3, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80ab 	beq.w	800417a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a6 	beq.w	800417a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800403c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004042:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004050:	647b      	str	r3, [r7, #68]	@ 0x44
 8004052:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800405e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e4      	bne.n	800402e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	623b      	str	r3, [r7, #32]
   return(result);
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3308      	adds	r3, #8
 8004084:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004088:	633a      	str	r2, [r7, #48]	@ 0x30
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800408e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e3      	bne.n	8004064 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f023 0310 	bic.w	r3, r3, #16
 80040c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	69b9      	ldr	r1, [r7, #24]
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	617b      	str	r3, [r7, #20]
   return(result);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e4      	bne.n	80040b0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040f0:	4619      	mov	r1, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f85c 	bl	80041b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040f8:	e03f      	b.n	800417a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00e      	beq.n	8004124 <HAL_UART_IRQHandler+0x5a8>
 8004106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800410a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800411a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 ffe9 	bl	80050f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004122:	e02d      	b.n	8004180 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00e      	beq.n	800414e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01c      	beq.n	800417e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4798      	blx	r3
    }
    return;
 800414c:	e017      	b.n	800417e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800414e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d012      	beq.n	8004180 <HAL_UART_IRQHandler+0x604>
 800415a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00c      	beq.n	8004180 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fdde 	bl	8004d28 <UART_EndTransmit_IT>
    return;
 800416c:	e008      	b.n	8004180 <HAL_UART_IRQHandler+0x604>
      return;
 800416e:	bf00      	nop
 8004170:	e006      	b.n	8004180 <HAL_UART_IRQHandler+0x604>
    return;
 8004172:	bf00      	nop
 8004174:	e004      	b.n	8004180 <HAL_UART_IRQHandler+0x604>
      return;
 8004176:	bf00      	nop
 8004178:	e002      	b.n	8004180 <HAL_UART_IRQHandler+0x604>
      return;
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <HAL_UART_IRQHandler+0x604>
    return;
 800417e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004180:	37e8      	adds	r7, #232	@ 0xe8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop

08004188 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041cc:	b08a      	sub	sp, #40	@ 0x28
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4ba4      	ldr	r3, [pc, #656]	@ (8004488 <UART_SetConfig+0x2c0>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004200:	430b      	orrs	r3, r1
 8004202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a99      	ldr	r2, [pc, #612]	@ (800448c <UART_SetConfig+0x2c4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004230:	4313      	orrs	r3, r2
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004244:	430a      	orrs	r2, r1
 8004246:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a90      	ldr	r2, [pc, #576]	@ (8004490 <UART_SetConfig+0x2c8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d126      	bne.n	80042a0 <UART_SetConfig+0xd8>
 8004252:	4b90      	ldr	r3, [pc, #576]	@ (8004494 <UART_SetConfig+0x2cc>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b03      	cmp	r3, #3
 800425e:	d81b      	bhi.n	8004298 <UART_SetConfig+0xd0>
 8004260:	a201      	add	r2, pc, #4	@ (adr r2, 8004268 <UART_SetConfig+0xa0>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	08004279 	.word	0x08004279
 800426c:	08004289 	.word	0x08004289
 8004270:	08004281 	.word	0x08004281
 8004274:	08004291 	.word	0x08004291
 8004278:	2301      	movs	r3, #1
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427e:	e116      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004280:	2302      	movs	r3, #2
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004286:	e112      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004288:	2304      	movs	r3, #4
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428e:	e10e      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004290:	2308      	movs	r3, #8
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004296:	e10a      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004298:	2310      	movs	r3, #16
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429e:	e106      	b.n	80044ae <UART_SetConfig+0x2e6>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a7c      	ldr	r2, [pc, #496]	@ (8004498 <UART_SetConfig+0x2d0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d138      	bne.n	800431c <UART_SetConfig+0x154>
 80042aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004494 <UART_SetConfig+0x2cc>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b0c      	cmp	r3, #12
 80042b6:	d82d      	bhi.n	8004314 <UART_SetConfig+0x14c>
 80042b8:	a201      	add	r2, pc, #4	@ (adr r2, 80042c0 <UART_SetConfig+0xf8>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042f5 	.word	0x080042f5
 80042c4:	08004315 	.word	0x08004315
 80042c8:	08004315 	.word	0x08004315
 80042cc:	08004315 	.word	0x08004315
 80042d0:	08004305 	.word	0x08004305
 80042d4:	08004315 	.word	0x08004315
 80042d8:	08004315 	.word	0x08004315
 80042dc:	08004315 	.word	0x08004315
 80042e0:	080042fd 	.word	0x080042fd
 80042e4:	08004315 	.word	0x08004315
 80042e8:	08004315 	.word	0x08004315
 80042ec:	08004315 	.word	0x08004315
 80042f0:	0800430d 	.word	0x0800430d
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042fa:	e0d8      	b.n	80044ae <UART_SetConfig+0x2e6>
 80042fc:	2302      	movs	r3, #2
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004302:	e0d4      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004304:	2304      	movs	r3, #4
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800430a:	e0d0      	b.n	80044ae <UART_SetConfig+0x2e6>
 800430c:	2308      	movs	r3, #8
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004312:	e0cc      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004314:	2310      	movs	r3, #16
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e0c8      	b.n	80044ae <UART_SetConfig+0x2e6>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a5e      	ldr	r2, [pc, #376]	@ (800449c <UART_SetConfig+0x2d4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d125      	bne.n	8004372 <UART_SetConfig+0x1aa>
 8004326:	4b5b      	ldr	r3, [pc, #364]	@ (8004494 <UART_SetConfig+0x2cc>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004330:	2b30      	cmp	r3, #48	@ 0x30
 8004332:	d016      	beq.n	8004362 <UART_SetConfig+0x19a>
 8004334:	2b30      	cmp	r3, #48	@ 0x30
 8004336:	d818      	bhi.n	800436a <UART_SetConfig+0x1a2>
 8004338:	2b20      	cmp	r3, #32
 800433a:	d00a      	beq.n	8004352 <UART_SetConfig+0x18a>
 800433c:	2b20      	cmp	r3, #32
 800433e:	d814      	bhi.n	800436a <UART_SetConfig+0x1a2>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <UART_SetConfig+0x182>
 8004344:	2b10      	cmp	r3, #16
 8004346:	d008      	beq.n	800435a <UART_SetConfig+0x192>
 8004348:	e00f      	b.n	800436a <UART_SetConfig+0x1a2>
 800434a:	2300      	movs	r3, #0
 800434c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004350:	e0ad      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004352:	2302      	movs	r3, #2
 8004354:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004358:	e0a9      	b.n	80044ae <UART_SetConfig+0x2e6>
 800435a:	2304      	movs	r3, #4
 800435c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004360:	e0a5      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004362:	2308      	movs	r3, #8
 8004364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004368:	e0a1      	b.n	80044ae <UART_SetConfig+0x2e6>
 800436a:	2310      	movs	r3, #16
 800436c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004370:	e09d      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a4a      	ldr	r2, [pc, #296]	@ (80044a0 <UART_SetConfig+0x2d8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d125      	bne.n	80043c8 <UART_SetConfig+0x200>
 800437c:	4b45      	ldr	r3, [pc, #276]	@ (8004494 <UART_SetConfig+0x2cc>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004382:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004386:	2bc0      	cmp	r3, #192	@ 0xc0
 8004388:	d016      	beq.n	80043b8 <UART_SetConfig+0x1f0>
 800438a:	2bc0      	cmp	r3, #192	@ 0xc0
 800438c:	d818      	bhi.n	80043c0 <UART_SetConfig+0x1f8>
 800438e:	2b80      	cmp	r3, #128	@ 0x80
 8004390:	d00a      	beq.n	80043a8 <UART_SetConfig+0x1e0>
 8004392:	2b80      	cmp	r3, #128	@ 0x80
 8004394:	d814      	bhi.n	80043c0 <UART_SetConfig+0x1f8>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <UART_SetConfig+0x1d8>
 800439a:	2b40      	cmp	r3, #64	@ 0x40
 800439c:	d008      	beq.n	80043b0 <UART_SetConfig+0x1e8>
 800439e:	e00f      	b.n	80043c0 <UART_SetConfig+0x1f8>
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a6:	e082      	b.n	80044ae <UART_SetConfig+0x2e6>
 80043a8:	2302      	movs	r3, #2
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ae:	e07e      	b.n	80044ae <UART_SetConfig+0x2e6>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b6:	e07a      	b.n	80044ae <UART_SetConfig+0x2e6>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043be:	e076      	b.n	80044ae <UART_SetConfig+0x2e6>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c6:	e072      	b.n	80044ae <UART_SetConfig+0x2e6>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a35      	ldr	r2, [pc, #212]	@ (80044a4 <UART_SetConfig+0x2dc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d12a      	bne.n	8004428 <UART_SetConfig+0x260>
 80043d2:	4b30      	ldr	r3, [pc, #192]	@ (8004494 <UART_SetConfig+0x2cc>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043e0:	d01a      	beq.n	8004418 <UART_SetConfig+0x250>
 80043e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043e6:	d81b      	bhi.n	8004420 <UART_SetConfig+0x258>
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ec:	d00c      	beq.n	8004408 <UART_SetConfig+0x240>
 80043ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043f2:	d815      	bhi.n	8004420 <UART_SetConfig+0x258>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <UART_SetConfig+0x238>
 80043f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043fc:	d008      	beq.n	8004410 <UART_SetConfig+0x248>
 80043fe:	e00f      	b.n	8004420 <UART_SetConfig+0x258>
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004406:	e052      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004408:	2302      	movs	r3, #2
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440e:	e04e      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004410:	2304      	movs	r3, #4
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004416:	e04a      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004418:	2308      	movs	r3, #8
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441e:	e046      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004420:	2310      	movs	r3, #16
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004426:	e042      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a17      	ldr	r2, [pc, #92]	@ (800448c <UART_SetConfig+0x2c4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d13a      	bne.n	80044a8 <UART_SetConfig+0x2e0>
 8004432:	4b18      	ldr	r3, [pc, #96]	@ (8004494 <UART_SetConfig+0x2cc>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004438:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800443c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004440:	d01a      	beq.n	8004478 <UART_SetConfig+0x2b0>
 8004442:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004446:	d81b      	bhi.n	8004480 <UART_SetConfig+0x2b8>
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800444c:	d00c      	beq.n	8004468 <UART_SetConfig+0x2a0>
 800444e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004452:	d815      	bhi.n	8004480 <UART_SetConfig+0x2b8>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <UART_SetConfig+0x298>
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445c:	d008      	beq.n	8004470 <UART_SetConfig+0x2a8>
 800445e:	e00f      	b.n	8004480 <UART_SetConfig+0x2b8>
 8004460:	2300      	movs	r3, #0
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004466:	e022      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004468:	2302      	movs	r3, #2
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446e:	e01e      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004470:	2304      	movs	r3, #4
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004476:	e01a      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004478:	2308      	movs	r3, #8
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447e:	e016      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004480:	2310      	movs	r3, #16
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004486:	e012      	b.n	80044ae <UART_SetConfig+0x2e6>
 8004488:	efff69f3 	.word	0xefff69f3
 800448c:	40008000 	.word	0x40008000
 8004490:	40013800 	.word	0x40013800
 8004494:	40021000 	.word	0x40021000
 8004498:	40004400 	.word	0x40004400
 800449c:	40004800 	.word	0x40004800
 80044a0:	40004c00 	.word	0x40004c00
 80044a4:	40005000 	.word	0x40005000
 80044a8:	2310      	movs	r3, #16
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a9f      	ldr	r2, [pc, #636]	@ (8004730 <UART_SetConfig+0x568>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d17a      	bne.n	80045ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d824      	bhi.n	800450a <UART_SetConfig+0x342>
 80044c0:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <UART_SetConfig+0x300>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044ed 	.word	0x080044ed
 80044cc:	0800450b 	.word	0x0800450b
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	0800450b 	.word	0x0800450b
 80044d8:	080044fb 	.word	0x080044fb
 80044dc:	0800450b 	.word	0x0800450b
 80044e0:	0800450b 	.word	0x0800450b
 80044e4:	0800450b 	.word	0x0800450b
 80044e8:	08004503 	.word	0x08004503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ec:	f7fd fda0 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 80044f0:	61f8      	str	r0, [r7, #28]
        break;
 80044f2:	e010      	b.n	8004516 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004734 <UART_SetConfig+0x56c>)
 80044f6:	61fb      	str	r3, [r7, #28]
        break;
 80044f8:	e00d      	b.n	8004516 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fa:	f7fd fd01 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 80044fe:	61f8      	str	r0, [r7, #28]
        break;
 8004500:	e009      	b.n	8004516 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004506:	61fb      	str	r3, [r7, #28]
        break;
 8004508:	e005      	b.n	8004516 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004514:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80fb 	beq.w	8004714 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	429a      	cmp	r2, r3
 800452c:	d305      	bcc.n	800453a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	429a      	cmp	r2, r3
 8004538:	d903      	bls.n	8004542 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004540:	e0e8      	b.n	8004714 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	2200      	movs	r2, #0
 8004546:	461c      	mov	r4, r3
 8004548:	4615      	mov	r5, r2
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	022b      	lsls	r3, r5, #8
 8004554:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004558:	0222      	lsls	r2, r4, #8
 800455a:	68f9      	ldr	r1, [r7, #12]
 800455c:	6849      	ldr	r1, [r1, #4]
 800455e:	0849      	lsrs	r1, r1, #1
 8004560:	2000      	movs	r0, #0
 8004562:	4688      	mov	r8, r1
 8004564:	4681      	mov	r9, r0
 8004566:	eb12 0a08 	adds.w	sl, r2, r8
 800456a:	eb43 0b09 	adc.w	fp, r3, r9
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800457c:	4650      	mov	r0, sl
 800457e:	4659      	mov	r1, fp
 8004580:	f7fb fe8e 	bl	80002a0 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4613      	mov	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004592:	d308      	bcc.n	80045a6 <UART_SetConfig+0x3de>
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800459a:	d204      	bcs.n	80045a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	60da      	str	r2, [r3, #12]
 80045a4:	e0b6      	b.n	8004714 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045ac:	e0b2      	b.n	8004714 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b6:	d15e      	bne.n	8004676 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d828      	bhi.n	8004612 <UART_SetConfig+0x44a>
 80045c0:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <UART_SetConfig+0x400>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	08004613 	.word	0x08004613
 80045d8:	08004603 	.word	0x08004603
 80045dc:	08004613 	.word	0x08004613
 80045e0:	08004613 	.word	0x08004613
 80045e4:	08004613 	.word	0x08004613
 80045e8:	0800460b 	.word	0x0800460b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ec:	f7fd fd20 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 80045f0:	61f8      	str	r0, [r7, #28]
        break;
 80045f2:	e014      	b.n	800461e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f4:	f7fd fd32 	bl	800205c <HAL_RCC_GetPCLK2Freq>
 80045f8:	61f8      	str	r0, [r7, #28]
        break;
 80045fa:	e010      	b.n	800461e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004734 <UART_SetConfig+0x56c>)
 80045fe:	61fb      	str	r3, [r7, #28]
        break;
 8004600:	e00d      	b.n	800461e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004602:	f7fd fc7d 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8004606:	61f8      	str	r0, [r7, #28]
        break;
 8004608:	e009      	b.n	800461e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800460e:	61fb      	str	r3, [r7, #28]
        break;
 8004610:	e005      	b.n	800461e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800461c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d077      	beq.n	8004714 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	005a      	lsls	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	441a      	add	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b0f      	cmp	r3, #15
 800463e:	d916      	bls.n	800466e <UART_SetConfig+0x4a6>
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004646:	d212      	bcs.n	800466e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f023 030f 	bic.w	r3, r3, #15
 8004650:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	b29b      	uxth	r3, r3
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	b29a      	uxth	r2, r3
 800465e:	8afb      	ldrh	r3, [r7, #22]
 8004660:	4313      	orrs	r3, r2
 8004662:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	8afa      	ldrh	r2, [r7, #22]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	e052      	b.n	8004714 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004674:	e04e      	b.n	8004714 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004676:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800467a:	2b08      	cmp	r3, #8
 800467c:	d827      	bhi.n	80046ce <UART_SetConfig+0x506>
 800467e:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <UART_SetConfig+0x4bc>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046b1 	.word	0x080046b1
 800468c:	080046b9 	.word	0x080046b9
 8004690:	080046cf 	.word	0x080046cf
 8004694:	080046bf 	.word	0x080046bf
 8004698:	080046cf 	.word	0x080046cf
 800469c:	080046cf 	.word	0x080046cf
 80046a0:	080046cf 	.word	0x080046cf
 80046a4:	080046c7 	.word	0x080046c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a8:	f7fd fcc2 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 80046ac:	61f8      	str	r0, [r7, #28]
        break;
 80046ae:	e014      	b.n	80046da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b0:	f7fd fcd4 	bl	800205c <HAL_RCC_GetPCLK2Freq>
 80046b4:	61f8      	str	r0, [r7, #28]
        break;
 80046b6:	e010      	b.n	80046da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004734 <UART_SetConfig+0x56c>)
 80046ba:	61fb      	str	r3, [r7, #28]
        break;
 80046bc:	e00d      	b.n	80046da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046be:	f7fd fc1f 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 80046c2:	61f8      	str	r0, [r7, #28]
        break;
 80046c4:	e009      	b.n	80046da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ca:	61fb      	str	r3, [r7, #28]
        break;
 80046cc:	e005      	b.n	80046da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046d8:	bf00      	nop
    }

    if (pclk != 0U)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d019      	beq.n	8004714 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	085a      	lsrs	r2, r3, #1
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	441a      	add	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b0f      	cmp	r3, #15
 80046f8:	d909      	bls.n	800470e <UART_SetConfig+0x546>
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004700:	d205      	bcs.n	800470e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	e002      	b.n	8004714 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004720:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004724:	4618      	mov	r0, r3
 8004726:	3728      	adds	r7, #40	@ 0x28
 8004728:	46bd      	mov	sp, r7
 800472a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800472e:	bf00      	nop
 8004730:	40008000 	.word	0x40008000
 8004734:	00f42400 	.word	0x00f42400

08004738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01a      	beq.n	800484e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004836:	d10a      	bne.n	800484e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b098      	sub	sp, #96	@ 0x60
 8004880:	af02      	add	r7, sp, #8
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800488c:	f7fc fa36 	bl	8000cfc <HAL_GetTick>
 8004890:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b08      	cmp	r3, #8
 800489e:	d12e      	bne.n	80048fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a8:	2200      	movs	r2, #0
 80048aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f88c 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d021      	beq.n	80048fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e062      	b.n	80049c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b04      	cmp	r3, #4
 800490a:	d149      	bne.n	80049a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004914:	2200      	movs	r2, #0
 8004916:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f856 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d03c      	beq.n	80049a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	623b      	str	r3, [r7, #32]
   return(result);
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800493a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004944:	633b      	str	r3, [r7, #48]	@ 0x30
 8004946:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800494a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e6      	bne.n	8004926 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3308      	adds	r3, #8
 800495e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	60fb      	str	r3, [r7, #12]
   return(result);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004978:	61fa      	str	r2, [r7, #28]
 800497a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	69b9      	ldr	r1, [r7, #24]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	617b      	str	r3, [r7, #20]
   return(result);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e011      	b.n	80049c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3758      	adds	r7, #88	@ 0x58
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	e04f      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d04b      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fc f989 	bl	8000cfc <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <UART_WaitOnFlagUntilTimeout+0x30>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e04e      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d037      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b80      	cmp	r3, #128	@ 0x80
 8004a12:	d034      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b40      	cmp	r3, #64	@ 0x40
 8004a18:	d031      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d110      	bne.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f8ff 	bl	8004c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e029      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a58:	d111      	bne.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f8e5 	bl	8004c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e00f      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4013      	ands	r3, r2
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d0a0      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b097      	sub	sp, #92	@ 0x5c
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	88fa      	ldrh	r2, [r7, #6]
 8004ac0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ada:	d10e      	bne.n	8004afa <UART_Start_Receive_IT+0x52>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d105      	bne.n	8004af0 <UART_Start_Receive_IT+0x48>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004aea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aee:	e02d      	b.n	8004b4c <UART_Start_Receive_IT+0xa4>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	22ff      	movs	r2, #255	@ 0xff
 8004af4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004af8:	e028      	b.n	8004b4c <UART_Start_Receive_IT+0xa4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10d      	bne.n	8004b1e <UART_Start_Receive_IT+0x76>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <UART_Start_Receive_IT+0x6c>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	22ff      	movs	r2, #255	@ 0xff
 8004b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b12:	e01b      	b.n	8004b4c <UART_Start_Receive_IT+0xa4>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	227f      	movs	r2, #127	@ 0x7f
 8004b18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b1c:	e016      	b.n	8004b4c <UART_Start_Receive_IT+0xa4>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b26:	d10d      	bne.n	8004b44 <UART_Start_Receive_IT+0x9c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <UART_Start_Receive_IT+0x92>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	227f      	movs	r2, #127	@ 0x7f
 8004b34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b38:	e008      	b.n	8004b4c <UART_Start_Receive_IT+0xa4>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	223f      	movs	r2, #63	@ 0x3f
 8004b3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b42:	e003      	b.n	8004b4c <UART_Start_Receive_IT+0xa4>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2222      	movs	r2, #34	@ 0x22
 8004b58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b7e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b98:	d107      	bne.n	8004baa <UART_Start_Receive_IT+0x102>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4a21      	ldr	r2, [pc, #132]	@ (8004c2c <UART_Start_Receive_IT+0x184>)
 8004ba6:	669a      	str	r2, [r3, #104]	@ 0x68
 8004ba8:	e002      	b.n	8004bb0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4a20      	ldr	r2, [pc, #128]	@ (8004c30 <UART_Start_Receive_IT+0x188>)
 8004bae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d019      	beq.n	8004bec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e6      	bne.n	8004bb8 <UART_Start_Receive_IT+0x110>
 8004bea:	e018      	b.n	8004c1e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f043 0320 	orr.w	r3, r3, #32
 8004c00:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0a:	623b      	str	r3, [r7, #32]
 8004c0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	69f9      	ldr	r1, [r7, #28]
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e6      	bne.n	8004bec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	375c      	adds	r7, #92	@ 0x5c
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	08004f39 	.word	0x08004f39
 8004c30:	08004d7d 	.word	0x08004d7d

08004c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b095      	sub	sp, #84	@ 0x54
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e6      	bne.n	8004c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3308      	adds	r3, #8
 8004c74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e5      	bne.n	8004c6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d118      	bne.n	8004cdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f023 0310 	bic.w	r3, r3, #16
 8004cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6979      	ldr	r1, [r7, #20]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e6      	bne.n	8004caa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004cf0:	bf00      	nop
 8004cf2:	3754      	adds	r7, #84	@ 0x54
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff fa3e 	bl	800419c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e6      	bne.n	8004d30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff fa0a 	bl	8004188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d74:	bf00      	nop
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b09c      	sub	sp, #112	@ 0x70
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d94:	2b22      	cmp	r3, #34	@ 0x22
 8004d96:	f040 80be 	bne.w	8004f16 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004da0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004da4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004da8:	b2d9      	uxtb	r1, r3
 8004daa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db4:	400a      	ands	r2, r1
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f040 80a3 	bne.w	8004f2a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e6      	bne.n	8004de4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e36:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a34      	ldr	r2, [pc, #208]	@ (8004f34 <UART_RxISR_8BIT+0x1b8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d01f      	beq.n	8004ea8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	623b      	str	r3, [r7, #32]
   return(result);
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e6      	bne.n	8004e76 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d12e      	bne.n	8004f0e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0310 	bic.w	r3, r3, #16
 8004eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b10      	cmp	r3, #16
 8004ef4:	d103      	bne.n	8004efe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2210      	movs	r2, #16
 8004efc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff f952 	bl	80041b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f0c:	e00d      	b.n	8004f2a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fb fb3e 	bl	8000590 <HAL_UART_RxCpltCallback>
}
 8004f14:	e009      	b.n	8004f2a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	8b1b      	ldrh	r3, [r3, #24]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0208 	orr.w	r2, r2, #8
 8004f26:	b292      	uxth	r2, r2
 8004f28:	831a      	strh	r2, [r3, #24]
}
 8004f2a:	bf00      	nop
 8004f2c:	3770      	adds	r7, #112	@ 0x70
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40008000 	.word	0x40008000

08004f38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b09c      	sub	sp, #112	@ 0x70
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f50:	2b22      	cmp	r3, #34	@ 0x22
 8004f52:	f040 80be 	bne.w	80050d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004f5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f64:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004f6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004f6e:	4013      	ands	r3, r2
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f040 80a3 	bne.w	80050e6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fc0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004fc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e6      	bne.n	8004fa0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ff2:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ff8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e5      	bne.n	8004fd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a34      	ldr	r2, [pc, #208]	@ (80050f0 <UART_RxISR_16BIT+0x1b8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d01f      	beq.n	8005064 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d018      	beq.n	8005064 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005046:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005052:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e6      	bne.n	8005032 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005068:	2b01      	cmp	r3, #1
 800506a:	d12e      	bne.n	80050ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f023 0310 	bic.w	r3, r3, #16
 8005086:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	613b      	str	r3, [r7, #16]
   return(result);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e6      	bne.n	8005072 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d103      	bne.n	80050ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2210      	movs	r2, #16
 80050b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff f874 	bl	80041b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050c8:	e00d      	b.n	80050e6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fb fa60 	bl	8000590 <HAL_UART_RxCpltCallback>
}
 80050d0:	e009      	b.n	80050e6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	8b1b      	ldrh	r3, [r3, #24]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0208 	orr.w	r2, r2, #8
 80050e2:	b292      	uxth	r2, r2
 80050e4:	831a      	strh	r2, [r3, #24]
}
 80050e6:	bf00      	nop
 80050e8:	3770      	adds	r7, #112	@ 0x70
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40008000 	.word	0x40008000

080050f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <adxl_read_reg_multiple>:
uint8_t shock_cnt[4] = {0, 0, 0, 0}; // >50g, >100g, >150g, maxShock
extern SPI_HandleTypeDef hspi2;

int adxl_read_reg_multiple(unsigned char reg,
                                  unsigned short count, unsigned char *val)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	603a      	str	r2, [r7, #0]
 8005112:	71fb      	strb	r3, [r7, #7]
 8005114:	460b      	mov	r3, r1
 8005116:	80bb      	strh	r3, [r7, #4]
    reg = reg << 1 | ADXL_SPI_RNW;
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	b25b      	sxtb	r3, r3
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	b25b      	sxtb	r3, r3
 8005124:	b2db      	uxtb	r3, r3
 8005126:	71fb      	strb	r3, [r7, #7]
    return spi_write_then_read(&reg, 1, val, count);
 8005128:	88bb      	ldrh	r3, [r7, #4]
 800512a:	1df8      	adds	r0, r7, #7
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	2101      	movs	r1, #1
 8005130:	f000 fb6c 	bl	800580c <spi_write_then_read>
 8005134:	4603      	mov	r3, r0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <adxl_read_reg>:

int adxl_read_reg(unsigned char reg, unsigned char *val)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	4603      	mov	r3, r0
 8005146:	6039      	str	r1, [r7, #0]
 8005148:	71fb      	strb	r3, [r7, #7]
	//rv3149DeSelect();
    return adxl_read_reg_multiple(reg, 1, val);
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	2101      	movs	r1, #1
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff ffd9 	bl	8005108 <adxl_read_reg_multiple>
 8005156:	4603      	mov	r3, r0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <adxl_write_reg>:

int adxl_write_reg(unsigned char reg, unsigned char val)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	460a      	mov	r2, r1
 800516a:	71fb      	strb	r3, [r7, #7]
 800516c:	4613      	mov	r3, r2
 800516e:	71bb      	strb	r3, [r7, #6]
    unsigned char tmp[2];
    tmp[0] = reg << 1;
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	b2db      	uxtb	r3, r3
 8005176:	733b      	strb	r3, [r7, #12]
    tmp[1] = val;
 8005178:	79bb      	ldrb	r3, [r7, #6]
 800517a:	737b      	strb	r3, [r7, #13]
      dnm_ucli_printf("verify failed REG 0x%X - 0x%X != 0x%X\r\n", reg, val, tmp[0]);
    
    return 0;
    
#else
    return spi_write_then_read(tmp, 2, NULL, 0);
 800517c:	f107 000c 	add.w	r0, r7, #12
 8005180:	2300      	movs	r3, #0
 8005182:	2200      	movs	r2, #0
 8005184:	2102      	movs	r1, #2
 8005186:	f000 fb41 	bl	800580c <spi_write_then_read>
 800518a:	4603      	mov	r3, r0
#endif    
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <adxl_update_reg>:

static int adxl_update_reg(unsigned char reg, unsigned char mask, unsigned char shift, unsigned char val)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	461a      	mov	r2, r3
 80051a2:	4623      	mov	r3, r4
 80051a4:	71fb      	strb	r3, [r7, #7]
 80051a6:	4603      	mov	r3, r0
 80051a8:	71bb      	strb	r3, [r7, #6]
 80051aa:	460b      	mov	r3, r1
 80051ac:	717b      	strb	r3, [r7, #5]
 80051ae:	4613      	mov	r3, r2
 80051b0:	713b      	strb	r3, [r7, #4]
    unsigned char tmp;
    int err;

    err = adxl_read_reg(reg, &tmp);
 80051b2:	f107 020b 	add.w	r2, r7, #11
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff ffbf 	bl	800513e <adxl_read_reg>
 80051c0:	60f8      	str	r0, [r7, #12]
    if (err < 0)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	da01      	bge.n	80051cc <adxl_update_reg+0x38>
        return err;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	e01c      	b.n	8005206 <adxl_update_reg+0x72>

    tmp &= mask;
 80051cc:	7afa      	ldrb	r2, [r7, #11]
 80051ce:	79bb      	ldrb	r3, [r7, #6]
 80051d0:	4013      	ands	r3, r2
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	72fb      	strb	r3, [r7, #11]
    tmp |= (val << shift) & ~mask;
 80051d6:	793a      	ldrb	r2, [r7, #4]
 80051d8:	797b      	ldrb	r3, [r7, #5]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	b25a      	sxtb	r2, r3
 80051e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	b25b      	sxtb	r3, r3
 80051e8:	4013      	ands	r3, r2
 80051ea:	b25a      	sxtb	r2, r3
 80051ec:	7afb      	ldrb	r3, [r7, #11]
 80051ee:	b25b      	sxtb	r3, r3
 80051f0:	4313      	orrs	r3, r2
 80051f2:	b25b      	sxtb	r3, r3
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	72fb      	strb	r3, [r7, #11]

    return adxl_write_reg(reg, tmp);
 80051f8:	7afa      	ldrb	r2, [r7, #11]
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff ffae 	bl	8005160 <adxl_write_reg>
 8005204:	4603      	mov	r3, r0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bd90      	pop	{r4, r7, pc}

0800520e <adxl372_Set_Op_mode>:

int adxl372_Set_Op_mode(ADXL372_OP_MODE mode)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	4603      	mov	r3, r0
 8005216:	71fb      	strb	r3, [r7, #7]
    return adxl_update_reg(ADI_ADXL372_POWER_CTL, PWRCTRL_OPMODE_MASK, 0,
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	2200      	movs	r2, #0
 800521c:	21fc      	movs	r1, #252	@ 0xfc
 800521e:	203f      	movs	r0, #63	@ 0x3f
 8005220:	f7ff ffb8 	bl	8005194 <adxl_update_reg>
 8005224:	4603      	mov	r3, r0
                           mode);
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <adxl372_Set_ODR>:

int adxl372_Set_ODR(ADXL372_ODR odr)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	4603      	mov	r3, r0
 8005236:	71fb      	strb	r3, [r7, #7]
    return adxl_update_reg(ADI_ADXL372_TIMING, TIMING_ODR_MASK,
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	2205      	movs	r2, #5
 800523c:	211f      	movs	r1, #31
 800523e:	203d      	movs	r0, #61	@ 0x3d
 8005240:	f7ff ffa8 	bl	8005194 <adxl_update_reg>
 8005244:	4603      	mov	r3, r0
                           TIMING_ODR_POS, odr);
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <adxl372_Set_BandWidth>:
    return adxl_update_reg(ADI_ADXL372_TIMING, TIMING_WUR_MASK,
                           TIMING_WUR_POS, wur);
}

int adxl372_Set_BandWidth(ADXL372_BW bw)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	4603      	mov	r3, r0
 8005256:	71fb      	strb	r3, [r7, #7]
    return adxl_update_reg(ADI_ADXL372_MEASURE, MEASURE_BANDWIDTH_MASK, 0,
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	2200      	movs	r2, #0
 800525c:	21f8      	movs	r1, #248	@ 0xf8
 800525e:	203e      	movs	r0, #62	@ 0x3e
 8005260:	f7ff ff98 	bl	8005194 <adxl_update_reg>
 8005264:	4603      	mov	r3, r0
                           bw);
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <adxl372_Set_Act_Proc_Mode>:
    return adxl_update_reg(ADI_ADXL372_MEASURE, MEASURE_AUTOSLEEP_MASK,
                           MEASURE_AUTOSLEEP_POS, enable);
}

int adxl372_Set_Act_Proc_Mode(ADXL372_ACT_PROC_MODE mode)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	4603      	mov	r3, r0
 8005276:	71fb      	strb	r3, [r7, #7]
    return adxl_update_reg(ADI_ADXL372_MEASURE, MEASURE_ACTPROC_MASK,
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	2204      	movs	r2, #4
 800527c:	21cf      	movs	r1, #207	@ 0xcf
 800527e:	203e      	movs	r0, #62	@ 0x3e
 8005280:	f7ff ff88 	bl	8005194 <adxl_update_reg>
 8005284:	4603      	mov	r3, r0
                           MEASURE_ACTPROC_POS, mode);
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <adxl372_Set_Activity_Threshold>:
    return adxl_update_reg(ADI_ADXL372_POWER_CTL,
                           PWRCTRL_INSTON_THRESH_MASK, INSTAON_THRESH_POS, mode);
}

int adxl372_Set_Activity_Threshold(unsigned short thresh, bool referenced, bool enable)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	4603      	mov	r3, r0
 8005296:	80fb      	strh	r3, [r7, #6]
 8005298:	460b      	mov	r3, r1
 800529a:	717b      	strb	r3, [r7, #5]
 800529c:	4613      	mov	r3, r2
 800529e:	713b      	strb	r3, [r7, #4]
/*    int err = adxl372_Set_Op_mode(STAND_BY);  FIXME ?
    if (err < 0)
        return err;*/
	int err = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
    adxl_write_reg(ADI_ADXL372_X_THRESH_ACT_H, thresh >> 3);
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	08db      	lsrs	r3, r3, #3
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	2023      	movs	r0, #35	@ 0x23
 80052b0:	f7ff ff56 	bl	8005160 <adxl_write_reg>
    adxl_write_reg(ADI_ADXL372_X_THRESH_ACT_L, (thresh << 5) | (referenced << 1) | enable);
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	015b      	lsls	r3, r3, #5
 80052b8:	b25a      	sxtb	r2, r3
 80052ba:	797b      	ldrb	r3, [r7, #5]
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	b25b      	sxtb	r3, r3
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b25a      	sxtb	r2, r3
 80052c4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	b25b      	sxtb	r3, r3
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	4619      	mov	r1, r3
 80052d0:	2024      	movs	r0, #36	@ 0x24
 80052d2:	f7ff ff45 	bl	8005160 <adxl_write_reg>
    adxl_write_reg(ADI_ADXL372_Y_THRESH_ACT_H, thresh >> 3);
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	b29b      	uxth	r3, r3
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	4619      	mov	r1, r3
 80052e0:	2025      	movs	r0, #37	@ 0x25
 80052e2:	f7ff ff3d 	bl	8005160 <adxl_write_reg>
    adxl_write_reg(ADI_ADXL372_Y_THRESH_ACT_L, (thresh << 5) | enable);
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	015b      	lsls	r3, r3, #5
 80052ea:	b25a      	sxtb	r2, r3
 80052ec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	b25b      	sxtb	r3, r3
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	4619      	mov	r1, r3
 80052f8:	2026      	movs	r0, #38	@ 0x26
 80052fa:	f7ff ff31 	bl	8005160 <adxl_write_reg>
    adxl_write_reg(ADI_ADXL372_Z_THRESH_ACT_H, thresh >> 3);
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	b29b      	uxth	r3, r3
 8005304:	b2db      	uxtb	r3, r3
 8005306:	4619      	mov	r1, r3
 8005308:	2027      	movs	r0, #39	@ 0x27
 800530a:	f7ff ff29 	bl	8005160 <adxl_write_reg>
    adxl_write_reg(ADI_ADXL372_Z_THRESH_ACT_L, (thresh << 5) | enable);
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	015b      	lsls	r3, r3, #5
 8005312:	b25a      	sxtb	r2, r3
 8005314:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005318:	4313      	orrs	r3, r2
 800531a:	b25b      	sxtb	r3, r3
 800531c:	b2db      	uxtb	r3, r3
 800531e:	4619      	mov	r1, r3
 8005320:	2028      	movs	r0, #40	@ 0x28
 8005322:	f7ff ff1d 	bl	8005160 <adxl_write_reg>

    return err;
 8005326:	68fb      	ldr	r3, [r7, #12]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <adxl372_Set_Inactivity_Threshold>:

    return err;
}

int adxl372_Set_Inactivity_Threshold(unsigned short thresh, bool referenced, bool enable)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	80fb      	strh	r3, [r7, #6]
 800533a:	460b      	mov	r3, r1
 800533c:	717b      	strb	r3, [r7, #5]
 800533e:	4613      	mov	r3, r2
 8005340:	713b      	strb	r3, [r7, #4]
    int err = adxl372_Set_Op_mode(STAND_BY);  /* FIXME ? */
 8005342:	2000      	movs	r0, #0
 8005344:	f7ff ff63 	bl	800520e <adxl372_Set_Op_mode>
 8005348:	60f8      	str	r0, [r7, #12]
    if (err < 0)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	da01      	bge.n	8005354 <adxl372_Set_Inactivity_Threshold+0x24>
        return err;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	e041      	b.n	80053d8 <adxl372_Set_Inactivity_Threshold+0xa8>

    adxl_write_reg(ADI_ADXL372_X_THRESH_INACT_H, thresh >> 3);
 8005354:	88fb      	ldrh	r3, [r7, #6]
 8005356:	08db      	lsrs	r3, r3, #3
 8005358:	b29b      	uxth	r3, r3
 800535a:	b2db      	uxtb	r3, r3
 800535c:	4619      	mov	r1, r3
 800535e:	202a      	movs	r0, #42	@ 0x2a
 8005360:	f7ff fefe 	bl	8005160 <adxl_write_reg>
    adxl_write_reg(ADI_ADXL372_X_THRESH_INACT_L,
                   (thresh << 5) | (referenced << 1) | enable);
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	015b      	lsls	r3, r3, #5
 8005368:	b25a      	sxtb	r2, r3
 800536a:	797b      	ldrb	r3, [r7, #5]
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	b25b      	sxtb	r3, r3
 8005370:	4313      	orrs	r3, r2
 8005372:	b25a      	sxtb	r2, r3
 8005374:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005378:	4313      	orrs	r3, r2
 800537a:	b25b      	sxtb	r3, r3
    adxl_write_reg(ADI_ADXL372_X_THRESH_INACT_L,
 800537c:	b2db      	uxtb	r3, r3
 800537e:	4619      	mov	r1, r3
 8005380:	202b      	movs	r0, #43	@ 0x2b
 8005382:	f7ff feed 	bl	8005160 <adxl_write_reg>
    adxl_write_reg(ADI_ADXL372_Y_THRESH_INACT_H, thresh >> 3);
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	08db      	lsrs	r3, r3, #3
 800538a:	b29b      	uxth	r3, r3
 800538c:	b2db      	uxtb	r3, r3
 800538e:	4619      	mov	r1, r3
 8005390:	202c      	movs	r0, #44	@ 0x2c
 8005392:	f7ff fee5 	bl	8005160 <adxl_write_reg>
    adxl_write_reg(ADI_ADXL372_Y_THRESH_INACT_L, (thresh << 5) | enable);
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	015b      	lsls	r3, r3, #5
 800539a:	b25a      	sxtb	r2, r3
 800539c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	b25b      	sxtb	r3, r3
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	4619      	mov	r1, r3
 80053a8:	202d      	movs	r0, #45	@ 0x2d
 80053aa:	f7ff fed9 	bl	8005160 <adxl_write_reg>
    adxl_write_reg(ADI_ADXL372_Z_THRESH_INACT_H, thresh >> 3);
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	4619      	mov	r1, r3
 80053b8:	202e      	movs	r0, #46	@ 0x2e
 80053ba:	f7ff fed1 	bl	8005160 <adxl_write_reg>
    adxl_write_reg(ADI_ADXL372_Z_THRESH_INACT_L, (thresh << 5) | enable);
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	015b      	lsls	r3, r3, #5
 80053c2:	b25a      	sxtb	r2, r3
 80053c4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	b25b      	sxtb	r3, r3
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	4619      	mov	r1, r3
 80053d0:	202f      	movs	r0, #47	@ 0x2f
 80053d2:	f7ff fec5 	bl	8005160 <adxl_write_reg>

    return err;
 80053d6:	68fb      	ldr	r3, [r7, #12]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <adxl372_Set_Activity_Time>:

int adxl372_Set_Activity_Time(unsigned char time)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	71fb      	strb	r3, [r7, #7]
    return adxl_write_reg(ADI_ADXL372_TIME_ACT, time);
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	4619      	mov	r1, r3
 80053ee:	2029      	movs	r0, #41	@ 0x29
 80053f0:	f7ff feb6 	bl	8005160 <adxl_write_reg>
 80053f4:	4603      	mov	r3, r0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <adxl372_Set_Inactivity_Time>:

int adxl372_Set_Inactivity_Time(unsigned short time)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	4603      	mov	r3, r0
 8005406:	80fb      	strh	r3, [r7, #6]
    adxl_write_reg(ADI_ADXL372_TIME_INACT_H, time >> 8);
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	0a1b      	lsrs	r3, r3, #8
 800540c:	b29b      	uxth	r3, r3
 800540e:	b2db      	uxtb	r3, r3
 8005410:	4619      	mov	r1, r3
 8005412:	2030      	movs	r0, #48	@ 0x30
 8005414:	f7ff fea4 	bl	8005160 <adxl_write_reg>

    return adxl_write_reg(ADI_ADXL372_TIME_INACT_L, time & 0xFF);
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	4619      	mov	r1, r3
 800541e:	2031      	movs	r0, #49	@ 0x31
 8005420:	f7ff fe9e 	bl	8005160 <adxl_write_reg>
 8005424:	4603      	mov	r3, r0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <adxl372_Set_Filter_Settle>:

int adxl372_Set_Filter_Settle(ADXL372_Filter_Settle mode)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	4603      	mov	r3, r0
 8005436:	71fb      	strb	r3, [r7, #7]
    return adxl_update_reg(ADI_ADXL372_POWER_CTL,
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2204      	movs	r2, #4
 800543c:	21ef      	movs	r1, #239	@ 0xef
 800543e:	203f      	movs	r0, #63	@ 0x3f
 8005440:	f7ff fea8 	bl	8005194 <adxl_update_reg>
 8005444:	4603      	mov	r3, r0
                           PWRCTRL_FILTER_SETTLE_MASK, PWRCTRL_FILTER_SETTLE_POS, mode);
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <adxl372_Get_Highest_Peak_Accel_data>:

#define SWAP16(x) ((x) = (((x) & 0x00FF) << 8) | (((x) & 0xFF00) >> 8))
#define SHIFT4(x) ((x) = (x) >> 4)

int adxl372_Get_Highest_Peak_Accel_data(AccelTriplet_t *max_peak)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
    int err = adxl_read_reg_multiple(ADI_ADXL372_X_MAXPEAK_H, 6,
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	2106      	movs	r1, #6
 800545a:	2015      	movs	r0, #21
 800545c:	f7ff fe54 	bl	8005108 <adxl_read_reg_multiple>
 8005460:	60f8      	str	r0, [r7, #12]
                                     (unsigned char *) max_peak);

#ifdef L_ENDIAN
    SWAP16(max_peak->x);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005468:	b29b      	uxth	r3, r3
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	b21a      	sxth	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005474:	121b      	asrs	r3, r3, #8
 8005476:	b21b      	sxth	r3, r3
 8005478:	b2db      	uxtb	r3, r3
 800547a:	b21b      	sxth	r3, r3
 800547c:	4313      	orrs	r3, r2
 800547e:	b21a      	sxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	801a      	strh	r2, [r3, #0]
    SWAP16(max_peak->y);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800548a:	b29b      	uxth	r3, r3
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	b21a      	sxth	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005496:	121b      	asrs	r3, r3, #8
 8005498:	b21b      	sxth	r3, r3
 800549a:	b2db      	uxtb	r3, r3
 800549c:	b21b      	sxth	r3, r3
 800549e:	4313      	orrs	r3, r2
 80054a0:	b21a      	sxth	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	805a      	strh	r2, [r3, #2]
    SWAP16(max_peak->z);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	b21a      	sxth	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80054b8:	121b      	asrs	r3, r3, #8
 80054ba:	b21b      	sxth	r3, r3
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	b21b      	sxth	r3, r3
 80054c0:	4313      	orrs	r3, r2
 80054c2:	b21a      	sxth	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	809a      	strh	r2, [r3, #4]
#endif

    SHIFT4(max_peak->x);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054ce:	111b      	asrs	r3, r3, #4
 80054d0:	b21a      	sxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	801a      	strh	r2, [r3, #0]
    SHIFT4(max_peak->y);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80054dc:	111b      	asrs	r3, r3, #4
 80054de:	b21a      	sxth	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	805a      	strh	r2, [r3, #2]
    SHIFT4(max_peak->z);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80054ea:	111b      	asrs	r3, r3, #4
 80054ec:	b21a      	sxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	809a      	strh	r2, [r3, #4]

    return err;
 80054f2:	68fb      	ldr	r3, [r7, #12]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <adxl372_Reset>:
	return (triplet_g);

}*/

int adxl372_Reset (void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
    int err = adxl_write_reg(ADI_ADXL372_SRESET, 0x52);
 8005502:	2152      	movs	r1, #82	@ 0x52
 8005504:	2041      	movs	r0, #65	@ 0x41
 8005506:	f7ff fe2b 	bl	8005160 <adxl_write_reg>
 800550a:	6078      	str	r0, [r7, #4]
    return err;
 800550c:	687b      	ldr	r3, [r7, #4]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <adxl372_Configure_FIFO>:

int adxl372_Configure_FIFO(unsigned short fifo_samples,
                           ADXL372_FIFO_MODE fifo_mode,
                           ADXL372_FIFO_FORMAT fifo_format)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	80fb      	strh	r3, [r7, #6]
 8005522:	460b      	mov	r3, r1
 8005524:	717b      	strb	r3, [r7, #5]
 8005526:	4613      	mov	r3, r2
 8005528:	713b      	strb	r3, [r7, #4]
    unsigned char config;
    int err;

    adxl372_Set_Op_mode(STAND_BY);
 800552a:	2000      	movs	r0, #0
 800552c:	f7ff fe6f 	bl	800520e <adxl372_Set_Op_mode>

    if (fifo_samples > 512)
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005536:	d902      	bls.n	800553e <adxl372_Configure_FIFO+0x26>
        return -1;
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	e034      	b.n	80055a8 <adxl372_Configure_FIFO+0x90>

    //fifo_samples -= 1;

    config = ((unsigned char)fifo_mode << FIFO_CRL_MODE_POS) |
 800553e:	797b      	ldrb	r3, [r7, #5]
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	b25a      	sxtb	r2, r3
             ((unsigned char)fifo_format << FIFO_CRL_FORMAT_POS) |
 8005544:	793b      	ldrb	r3, [r7, #4]
 8005546:	00db      	lsls	r3, r3, #3
    config = ((unsigned char)fifo_mode << FIFO_CRL_MODE_POS) |
 8005548:	b25b      	sxtb	r3, r3
 800554a:	4313      	orrs	r3, r2
 800554c:	b25a      	sxtb	r2, r3
             ((fifo_samples > 0xFF) << FIFO_CRL_SAMP8_POS);
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	2bff      	cmp	r3, #255	@ 0xff
 8005552:	bf8c      	ite	hi
 8005554:	2301      	movhi	r3, #1
 8005556:	2300      	movls	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	b25b      	sxtb	r3, r3
             ((unsigned char)fifo_format << FIFO_CRL_FORMAT_POS) |
 800555c:	4313      	orrs	r3, r2
 800555e:	b25b      	sxtb	r3, r3
    config = ((unsigned char)fifo_mode << FIFO_CRL_MODE_POS) |
 8005560:	73fb      	strb	r3, [r7, #15]

    err = adxl_write_reg(ADI_ADXL372_FIFO_SAMPLES, fifo_samples & 0xFF);
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	4619      	mov	r1, r3
 8005568:	2039      	movs	r0, #57	@ 0x39
 800556a:	f7ff fdf9 	bl	8005160 <adxl_write_reg>
 800556e:	60b8      	str	r0, [r7, #8]
    if (err < 0)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	da01      	bge.n	800557a <adxl372_Configure_FIFO+0x62>
        return err;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	e016      	b.n	80055a8 <adxl372_Configure_FIFO+0x90>

    err = adxl_write_reg(ADI_ADXL372_FIFO_CTL, config);
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	4619      	mov	r1, r3
 800557e:	203a      	movs	r0, #58	@ 0x3a
 8005580:	f7ff fdee 	bl	8005160 <adxl_write_reg>
 8005584:	60b8      	str	r0, [r7, #8]
    if (err < 0)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	da01      	bge.n	8005590 <adxl372_Configure_FIFO+0x78>
        return err;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	e00b      	b.n	80055a8 <adxl372_Configure_FIFO+0x90>

    Axdl372.fifo_config.samples = fifo_samples + 1;
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	3301      	adds	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <adxl372_Configure_FIFO+0x98>)
 8005598:	801a      	strh	r2, [r3, #0]
    Axdl372.fifo_config.mode = fifo_mode;
 800559a:	4a05      	ldr	r2, [pc, #20]	@ (80055b0 <adxl372_Configure_FIFO+0x98>)
 800559c:	797b      	ldrb	r3, [r7, #5]
 800559e:	7093      	strb	r3, [r2, #2]
    Axdl372.fifo_config.format = fifo_format;
 80055a0:	4a03      	ldr	r2, [pc, #12]	@ (80055b0 <adxl372_Configure_FIFO+0x98>)
 80055a2:	793b      	ldrb	r3, [r7, #4]
 80055a4:	70d3      	strb	r3, [r2, #3]

    return err;
 80055a6:	68bb      	ldr	r3, [r7, #8]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000170 	.word	0x20000170

080055b4 <adxl372_Set_Filters>:

  return err;
}

void adxl372_Set_Filters(uint8_t lpf_enable, uint8_t hpf_enable)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	460a      	mov	r2, r1
 80055be:	71fb      	strb	r3, [r7, #7]
 80055c0:	4613      	mov	r3, r2
 80055c2:	71bb      	strb	r3, [r7, #6]
	uint8_t mode = ~((uint8_t)0xFF & ((((uint8_t)0x01 & lpf_enable) << 1) | ((uint8_t)0x01 & hpf_enable)));
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	b25b      	sxtb	r3, r3
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	b25a      	sxtb	r2, r3
 80055d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	b25b      	sxtb	r3, r3
 80055da:	4313      	orrs	r3, r2
 80055dc:	b25b      	sxtb	r3, r3
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	73fb      	strb	r3, [r7, #15]
	
	adxl_update_reg(ADI_ADXL372_POWER_CTL,
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	2202      	movs	r2, #2
 80055e8:	21f3      	movs	r1, #243	@ 0xf3
 80055ea:	203f      	movs	r0, #63	@ 0x3f
 80055ec:	f7ff fdd2 	bl	8005194 <adxl_update_reg>
                           PWRCTRL_LPF_HPF_MASK, PWRCTRL_LPF_HPF_POS, mode);
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <adxl372_Set_Noise_Mode>:

void adxl372_Set_Noise_Mode(ADXL372_NOISE_MODE mode)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	71fb      	strb	r3, [r7, #7]
	
	adxl_update_reg(ADI_ADXL372_MEASURE, MEASURE_LOWNOISE_MASK,
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2203      	movs	r2, #3
 800560c:	21f7      	movs	r1, #247	@ 0xf7
 800560e:	203e      	movs	r0, #62	@ 0x3e
 8005610:	f7ff fdc0 	bl	8005194 <adxl_update_reg>
                           MEASURE_LOWNOISE_POS, (0x01 & mode));
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <adxl372_Init>:
    return ((data[0] & 0x3) | data[1]);
}


uint8_t adxl372_Init (void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
	adxl372_Get_DevID(&devID);
	
	if (devID != 173) return 1;*/

/* Configuring ADXL372 device */
	adxl372_Set_Op_mode(STAND_BY);
 8005620:	2000      	movs	r0, #0
 8005622:	f7ff fdf4 	bl	800520e <adxl372_Set_Op_mode>
	adxl372_Reset();
 8005626:	f7ff ff69 	bl	80054fc <adxl372_Reset>
	adxl372_Set_ODR(ODR_6400Hz);
 800562a:	2004      	movs	r0, #4
 800562c:	f7ff fdff 	bl	800522e <adxl372_Set_ODR>
	adxl372_Set_BandWidth(BW_3200Hz);
 8005630:	2004      	movs	r0, #4
 8005632:	f7ff fe0c 	bl	800524e <adxl372_Set_BandWidth>
	adxl372_Set_Noise_Mode(MEAS_LOW_NOISE);
 8005636:	2001      	movs	r0, #1
 8005638:	f7ff ffde 	bl	80055f8 <adxl372_Set_Noise_Mode>
	adxl372_Configure_FIFO(0, STREAMED, XYZ_PEAK_FIFO);
 800563c:	2207      	movs	r2, #7
 800563e:	2101      	movs	r1, #1
 8005640:	2000      	movs	r0, #0
 8005642:	f7ff ff69 	bl	8005518 <adxl372_Configure_FIFO>
	adxl372_Set_Act_Proc_Mode(LOOPED);
 8005646:	2002      	movs	r0, #2
 8005648:	f7ff fe11 	bl	800526e <adxl372_Set_Act_Proc_Mode>
	adxl372_Set_Filters(0, 1);					// LPF, HPF
 800564c:	2101      	movs	r1, #1
 800564e:	2000      	movs	r0, #0
 8005650:	f7ff ffb0 	bl	80055b4 <adxl372_Set_Filters>
	adxl372_Set_Filter_Settle(FILTER_SETTLE_16);
 8005654:	2000      	movs	r0, #0
 8005656:	f7ff feea 	bl	800542e <adxl372_Set_Filter_Settle>
	adxl372_Set_Activity_Threshold(40, 0, 1);
 800565a:	2201      	movs	r2, #1
 800565c:	2100      	movs	r1, #0
 800565e:	2028      	movs	r0, #40	@ 0x28
 8005660:	f7ff fe15 	bl	800528e <adxl372_Set_Activity_Threshold>
	adxl372_Set_Activity_Time(0);
 8005664:	2000      	movs	r0, #0
 8005666:	f7ff febb 	bl	80053e0 <adxl372_Set_Activity_Time>
	adxl372_Set_Inactivity_Threshold(40, 0, 1);
 800566a:	2201      	movs	r2, #1
 800566c:	2100      	movs	r1, #0
 800566e:	2028      	movs	r0, #40	@ 0x28
 8005670:	f7ff fe5e 	bl	8005330 <adxl372_Set_Inactivity_Threshold>
	adxl372_Set_Inactivity_Time(1);
 8005674:	2001      	movs	r0, #1
 8005676:	f7ff fec2 	bl	80053fe <adxl372_Set_Inactivity_Time>


	adxl372_Set_Op_mode(FULL_BW_MEASUREMENT);
 800567a:	2003      	movs	r0, #3
 800567c:	f7ff fdc7 	bl	800520e <adxl372_Set_Op_mode>

	return 0;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <adxl372_Get_Shock>:
{
	adxl372_Get_Accel_data(accel_data);
}*/

void adxl372_Get_Shock(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0

	uint8_t maxG = adxl372_Get_MaxG();
 800568e:	f000 f879 	bl	8005784 <adxl372_Get_MaxG>
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]

	if (maxG >= 150)
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2b95      	cmp	r3, #149	@ 0x95
 800569a:	d906      	bls.n	80056aa <adxl372_Get_Shock+0x22>
	{
		++shock_cnt[2];
 800569c:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <adxl372_Get_Shock+0x60>)
 800569e:	789b      	ldrb	r3, [r3, #2]
 80056a0:	3301      	adds	r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	4b10      	ldr	r3, [pc, #64]	@ (80056e8 <adxl372_Get_Shock+0x60>)
 80056a6:	709a      	strb	r2, [r3, #2]
 80056a8:	e012      	b.n	80056d0 <adxl372_Get_Shock+0x48>
	}
	else if(maxG >= 100)
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	2b63      	cmp	r3, #99	@ 0x63
 80056ae:	d906      	bls.n	80056be <adxl372_Get_Shock+0x36>
	{
		++shock_cnt[1];
 80056b0:	4b0d      	ldr	r3, [pc, #52]	@ (80056e8 <adxl372_Get_Shock+0x60>)
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	3301      	adds	r3, #1
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <adxl372_Get_Shock+0x60>)
 80056ba:	705a      	strb	r2, [r3, #1]
 80056bc:	e008      	b.n	80056d0 <adxl372_Get_Shock+0x48>
	}
	else if(maxG >= 50)
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	2b31      	cmp	r3, #49	@ 0x31
 80056c2:	d905      	bls.n	80056d0 <adxl372_Get_Shock+0x48>
	{
		++shock_cnt[0];
 80056c4:	4b08      	ldr	r3, [pc, #32]	@ (80056e8 <adxl372_Get_Shock+0x60>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <adxl372_Get_Shock+0x60>)
 80056ce:	701a      	strb	r2, [r3, #0]
	}
	if (maxG > shock_cnt[3])
 80056d0:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <adxl372_Get_Shock+0x60>)
 80056d2:	78db      	ldrb	r3, [r3, #3]
 80056d4:	79fa      	ldrb	r2, [r7, #7]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d902      	bls.n	80056e0 <adxl372_Get_Shock+0x58>
	{
		shock_cnt[3]= maxG;
 80056da:	4a03      	ldr	r2, [pc, #12]	@ (80056e8 <adxl372_Get_Shock+0x60>)
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	70d3      	strb	r3, [r2, #3]
	}
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000174 	.word	0x20000174

080056ec <adxl372_Triplet_Abs>:

void adxl372_Triplet_Abs(AccelTriplet_t *data)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
    data->x = (data->x ^ (data->x >> 15)) - (data->x >> 15);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005700:	13db      	asrs	r3, r3, #15
 8005702:	b21b      	sxth	r3, r3
 8005704:	4053      	eors	r3, r2
 8005706:	b21b      	sxth	r3, r3
 8005708:	b29a      	uxth	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005710:	13db      	asrs	r3, r3, #15
 8005712:	b21b      	sxth	r3, r3
 8005714:	b29b      	uxth	r3, r3
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	b29b      	uxth	r3, r3
 800571a:	b21a      	sxth	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	801a      	strh	r2, [r3, #0]
    data->y = (data->y ^ (data->y >> 15)) - (data->y >> 15);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800572c:	13db      	asrs	r3, r3, #15
 800572e:	b21b      	sxth	r3, r3
 8005730:	4053      	eors	r3, r2
 8005732:	b21b      	sxth	r3, r3
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800573c:	13db      	asrs	r3, r3, #15
 800573e:	b21b      	sxth	r3, r3
 8005740:	b29b      	uxth	r3, r3
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	b29b      	uxth	r3, r3
 8005746:	b21a      	sxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	805a      	strh	r2, [r3, #2]
    data->z = (data->z ^ (data->z >> 15)) - (data->z >> 15);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005758:	13db      	asrs	r3, r3, #15
 800575a:	b21b      	sxth	r3, r3
 800575c:	4053      	eors	r3, r2
 800575e:	b21b      	sxth	r3, r3
 8005760:	b29a      	uxth	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005768:	13db      	asrs	r3, r3, #15
 800576a:	b21b      	sxth	r3, r3
 800576c:	b29b      	uxth	r3, r3
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	b29b      	uxth	r3, r3
 8005772:	b21a      	sxth	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	809a      	strh	r2, [r3, #4]
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <adxl372_Get_MaxG>:

uint8_t adxl372_Get_MaxG(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
	AccelTriplet_t ac_data;
	adxl372_Get_Highest_Peak_Accel_data(&ac_data);
 800578a:	463b      	mov	r3, r7
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fe5e 	bl	800544e <adxl372_Get_Highest_Peak_Accel_data>
	adxl372_Triplet_Abs(&ac_data);
 8005792:	463b      	mov	r3, r7
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff ffa9 	bl	80056ec <adxl372_Triplet_Abs>
	return max3(&ac_data)/10;
 800579a:	463b      	mov	r3, r7
 800579c:	4618      	mov	r0, r3
 800579e:	f000 f80f 	bl	80057c0 <max3>
 80057a2:	4603      	mov	r3, r0
 80057a4:	461a      	mov	r2, r3
 80057a6:	4b05      	ldr	r3, [pc, #20]	@ (80057bc <adxl372_Get_MaxG+0x38>)
 80057a8:	fba3 2302 	umull	r2, r3, r3, r2
 80057ac:	08db      	lsrs	r3, r3, #3
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	b2db      	uxtb	r3, r3
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	cccccccd 	.word	0xcccccccd

080057c0 <max3>:

uint16_t max3(AccelTriplet_t *data)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
    uint16_t max = data->x;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057ce:	81fb      	strh	r3, [r7, #14]
    if (data->y > max)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80057d6:	461a      	mov	r2, r3
 80057d8:	89fb      	ldrh	r3, [r7, #14]
 80057da:	429a      	cmp	r2, r3
 80057dc:	dd03      	ble.n	80057e6 <max3+0x26>
        max = data->y;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80057e4:	81fb      	strh	r3, [r7, #14]
    if (data->z > max)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80057ec:	461a      	mov	r2, r3
 80057ee:	89fb      	ldrh	r3, [r7, #14]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	dd03      	ble.n	80057fc <max3+0x3c>
        max = data->z;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80057fa:	81fb      	strh	r3, [r7, #14]
    return max;
 80057fc:	89fb      	ldrh	r3, [r7, #14]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <spi_write_then_read>:

int spi_write_then_read(	   unsigned char *txbuf,
                               unsigned n_tx,
                               unsigned char *rxbuf,
                               unsigned n_rx)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  int err = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]


  HAL_GPIO_WritePin(ADXL372_CS_GPIO_Port, ADXL372_CS_Pin, GPIO_PIN_RESET);
 800581e:	2200      	movs	r2, #0
 8005820:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005824:	481d      	ldr	r0, [pc, #116]	@ (800589c <spi_write_then_read+0x90>)
 8005826:	f7fb fdbb 	bl	80013a0 <HAL_GPIO_WritePin>

  //HAL_Delay(1);

  for(int i = 0; i < n_tx; i++)
 800582a:	2300      	movs	r3, #0
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	e00f      	b.n	8005850 <spi_write_then_read+0x44>
  {
	  if(HAL_SPI_Transmit(&hspi2, &txbuf[i], 1, 50) != HAL_OK)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	18d1      	adds	r1, r2, r3
 8005836:	2332      	movs	r3, #50	@ 0x32
 8005838:	2201      	movs	r2, #1
 800583a:	4819      	ldr	r0, [pc, #100]	@ (80058a0 <spi_write_then_read+0x94>)
 800583c:	f7fd f9f1 	bl	8002c22 <HAL_SPI_Transmit>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <spi_write_then_read+0x3e>
	  {
		  err = 1;
 8005846:	2301      	movs	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
  for(int i = 0; i < n_tx; i++)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3301      	adds	r3, #1
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	429a      	cmp	r2, r3
 8005856:	d8eb      	bhi.n	8005830 <spi_write_then_read+0x24>
  {
    SPI.transfer((unsigned char)txbuf[count]);
  }*/


  for(int i = 0; i < n_rx; i++)
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	e00f      	b.n	800587e <spi_write_then_read+0x72>
  {
	  if(HAL_SPI_Receive(&hspi2, &rxbuf[i], 1, 50) != HAL_OK)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	18d1      	adds	r1, r2, r3
 8005864:	2332      	movs	r3, #50	@ 0x32
 8005866:	2201      	movs	r2, #1
 8005868:	480d      	ldr	r0, [pc, #52]	@ (80058a0 <spi_write_then_read+0x94>)
 800586a:	f7fd fb50 	bl	8002f0e <HAL_SPI_Receive>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <spi_write_then_read+0x6c>
	  {
		  err = 2;
 8005874:	2302      	movs	r3, #2
 8005876:	61fb      	str	r3, [r7, #28]
  for(int i = 0; i < n_rx; i++)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	3301      	adds	r3, #1
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d8eb      	bhi.n	800585e <spi_write_then_read+0x52>
/*  for(count = 0; count < n_rx; count++)
  {
    rxbuf[count] = SPI.transfer(0xAA);
  }*/

  HAL_GPIO_WritePin(ADXL372_CS_GPIO_Port, ADXL372_CS_Pin, GPIO_PIN_SET);
 8005886:	2201      	movs	r2, #1
 8005888:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800588c:	4803      	ldr	r0, [pc, #12]	@ (800589c <spi_write_then_read+0x90>)
 800588e:	f7fb fd87 	bl	80013a0 <HAL_GPIO_WritePin>

  return err;
 8005892:	69fb      	ldr	r3, [r7, #28]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	48000400 	.word	0x48000400
 80058a0:	20000078 	.word	0x20000078

080058a4 <siprintf>:
 80058a4:	b40e      	push	{r1, r2, r3}
 80058a6:	b500      	push	{lr}
 80058a8:	b09c      	sub	sp, #112	@ 0x70
 80058aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80058ac:	9002      	str	r0, [sp, #8]
 80058ae:	9006      	str	r0, [sp, #24]
 80058b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058b4:	4809      	ldr	r0, [pc, #36]	@ (80058dc <siprintf+0x38>)
 80058b6:	9107      	str	r1, [sp, #28]
 80058b8:	9104      	str	r1, [sp, #16]
 80058ba:	4909      	ldr	r1, [pc, #36]	@ (80058e0 <siprintf+0x3c>)
 80058bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c0:	9105      	str	r1, [sp, #20]
 80058c2:	6800      	ldr	r0, [r0, #0]
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	a902      	add	r1, sp, #8
 80058c8:	f000 f994 	bl	8005bf4 <_svfiprintf_r>
 80058cc:	9b02      	ldr	r3, [sp, #8]
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	b01c      	add	sp, #112	@ 0x70
 80058d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d8:	b003      	add	sp, #12
 80058da:	4770      	bx	lr
 80058dc:	2000000c 	.word	0x2000000c
 80058e0:	ffff0208 	.word	0xffff0208

080058e4 <memset>:
 80058e4:	4402      	add	r2, r0
 80058e6:	4603      	mov	r3, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	f803 1b01 	strb.w	r1, [r3], #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <__errno>:
 80058f4:	4b01      	ldr	r3, [pc, #4]	@ (80058fc <__errno+0x8>)
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	2000000c 	.word	0x2000000c

08005900 <__libc_init_array>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4d0d      	ldr	r5, [pc, #52]	@ (8005938 <__libc_init_array+0x38>)
 8005904:	4c0d      	ldr	r4, [pc, #52]	@ (800593c <__libc_init_array+0x3c>)
 8005906:	1b64      	subs	r4, r4, r5
 8005908:	10a4      	asrs	r4, r4, #2
 800590a:	2600      	movs	r6, #0
 800590c:	42a6      	cmp	r6, r4
 800590e:	d109      	bne.n	8005924 <__libc_init_array+0x24>
 8005910:	4d0b      	ldr	r5, [pc, #44]	@ (8005940 <__libc_init_array+0x40>)
 8005912:	4c0c      	ldr	r4, [pc, #48]	@ (8005944 <__libc_init_array+0x44>)
 8005914:	f000 fc66 	bl	80061e4 <_init>
 8005918:	1b64      	subs	r4, r4, r5
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	2600      	movs	r6, #0
 800591e:	42a6      	cmp	r6, r4
 8005920:	d105      	bne.n	800592e <__libc_init_array+0x2e>
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	f855 3b04 	ldr.w	r3, [r5], #4
 8005928:	4798      	blx	r3
 800592a:	3601      	adds	r6, #1
 800592c:	e7ee      	b.n	800590c <__libc_init_array+0xc>
 800592e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005932:	4798      	blx	r3
 8005934:	3601      	adds	r6, #1
 8005936:	e7f2      	b.n	800591e <__libc_init_array+0x1e>
 8005938:	080062c8 	.word	0x080062c8
 800593c:	080062c8 	.word	0x080062c8
 8005940:	080062c8 	.word	0x080062c8
 8005944:	080062cc 	.word	0x080062cc

08005948 <__retarget_lock_acquire_recursive>:
 8005948:	4770      	bx	lr

0800594a <__retarget_lock_release_recursive>:
 800594a:	4770      	bx	lr

0800594c <_free_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4605      	mov	r5, r0
 8005950:	2900      	cmp	r1, #0
 8005952:	d041      	beq.n	80059d8 <_free_r+0x8c>
 8005954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005958:	1f0c      	subs	r4, r1, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfb8      	it	lt
 800595e:	18e4      	addlt	r4, r4, r3
 8005960:	f000 f8e0 	bl	8005b24 <__malloc_lock>
 8005964:	4a1d      	ldr	r2, [pc, #116]	@ (80059dc <_free_r+0x90>)
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	b933      	cbnz	r3, 8005978 <_free_r+0x2c>
 800596a:	6063      	str	r3, [r4, #4]
 800596c:	6014      	str	r4, [r2, #0]
 800596e:	4628      	mov	r0, r5
 8005970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005974:	f000 b8dc 	b.w	8005b30 <__malloc_unlock>
 8005978:	42a3      	cmp	r3, r4
 800597a:	d908      	bls.n	800598e <_free_r+0x42>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	1821      	adds	r1, r4, r0
 8005980:	428b      	cmp	r3, r1
 8005982:	bf01      	itttt	eq
 8005984:	6819      	ldreq	r1, [r3, #0]
 8005986:	685b      	ldreq	r3, [r3, #4]
 8005988:	1809      	addeq	r1, r1, r0
 800598a:	6021      	streq	r1, [r4, #0]
 800598c:	e7ed      	b.n	800596a <_free_r+0x1e>
 800598e:	461a      	mov	r2, r3
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	b10b      	cbz	r3, 8005998 <_free_r+0x4c>
 8005994:	42a3      	cmp	r3, r4
 8005996:	d9fa      	bls.n	800598e <_free_r+0x42>
 8005998:	6811      	ldr	r1, [r2, #0]
 800599a:	1850      	adds	r0, r2, r1
 800599c:	42a0      	cmp	r0, r4
 800599e:	d10b      	bne.n	80059b8 <_free_r+0x6c>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	4401      	add	r1, r0
 80059a4:	1850      	adds	r0, r2, r1
 80059a6:	4283      	cmp	r3, r0
 80059a8:	6011      	str	r1, [r2, #0]
 80059aa:	d1e0      	bne.n	800596e <_free_r+0x22>
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	6053      	str	r3, [r2, #4]
 80059b2:	4408      	add	r0, r1
 80059b4:	6010      	str	r0, [r2, #0]
 80059b6:	e7da      	b.n	800596e <_free_r+0x22>
 80059b8:	d902      	bls.n	80059c0 <_free_r+0x74>
 80059ba:	230c      	movs	r3, #12
 80059bc:	602b      	str	r3, [r5, #0]
 80059be:	e7d6      	b.n	800596e <_free_r+0x22>
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	1821      	adds	r1, r4, r0
 80059c4:	428b      	cmp	r3, r1
 80059c6:	bf04      	itt	eq
 80059c8:	6819      	ldreq	r1, [r3, #0]
 80059ca:	685b      	ldreq	r3, [r3, #4]
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	bf04      	itt	eq
 80059d0:	1809      	addeq	r1, r1, r0
 80059d2:	6021      	streq	r1, [r4, #0]
 80059d4:	6054      	str	r4, [r2, #4]
 80059d6:	e7ca      	b.n	800596e <_free_r+0x22>
 80059d8:	bd38      	pop	{r3, r4, r5, pc}
 80059da:	bf00      	nop
 80059dc:	200002bc 	.word	0x200002bc

080059e0 <sbrk_aligned>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4e0f      	ldr	r6, [pc, #60]	@ (8005a20 <sbrk_aligned+0x40>)
 80059e4:	460c      	mov	r4, r1
 80059e6:	6831      	ldr	r1, [r6, #0]
 80059e8:	4605      	mov	r5, r0
 80059ea:	b911      	cbnz	r1, 80059f2 <sbrk_aligned+0x12>
 80059ec:	f000 fba6 	bl	800613c <_sbrk_r>
 80059f0:	6030      	str	r0, [r6, #0]
 80059f2:	4621      	mov	r1, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 fba1 	bl	800613c <_sbrk_r>
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	d103      	bne.n	8005a06 <sbrk_aligned+0x26>
 80059fe:	f04f 34ff 	mov.w	r4, #4294967295
 8005a02:	4620      	mov	r0, r4
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
 8005a06:	1cc4      	adds	r4, r0, #3
 8005a08:	f024 0403 	bic.w	r4, r4, #3
 8005a0c:	42a0      	cmp	r0, r4
 8005a0e:	d0f8      	beq.n	8005a02 <sbrk_aligned+0x22>
 8005a10:	1a21      	subs	r1, r4, r0
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 fb92 	bl	800613c <_sbrk_r>
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d1f2      	bne.n	8005a02 <sbrk_aligned+0x22>
 8005a1c:	e7ef      	b.n	80059fe <sbrk_aligned+0x1e>
 8005a1e:	bf00      	nop
 8005a20:	200002b8 	.word	0x200002b8

08005a24 <_malloc_r>:
 8005a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a28:	1ccd      	adds	r5, r1, #3
 8005a2a:	f025 0503 	bic.w	r5, r5, #3
 8005a2e:	3508      	adds	r5, #8
 8005a30:	2d0c      	cmp	r5, #12
 8005a32:	bf38      	it	cc
 8005a34:	250c      	movcc	r5, #12
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	4606      	mov	r6, r0
 8005a3a:	db01      	blt.n	8005a40 <_malloc_r+0x1c>
 8005a3c:	42a9      	cmp	r1, r5
 8005a3e:	d904      	bls.n	8005a4a <_malloc_r+0x26>
 8005a40:	230c      	movs	r3, #12
 8005a42:	6033      	str	r3, [r6, #0]
 8005a44:	2000      	movs	r0, #0
 8005a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b20 <_malloc_r+0xfc>
 8005a4e:	f000 f869 	bl	8005b24 <__malloc_lock>
 8005a52:	f8d8 3000 	ldr.w	r3, [r8]
 8005a56:	461c      	mov	r4, r3
 8005a58:	bb44      	cbnz	r4, 8005aac <_malloc_r+0x88>
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f7ff ffbf 	bl	80059e0 <sbrk_aligned>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	4604      	mov	r4, r0
 8005a66:	d158      	bne.n	8005b1a <_malloc_r+0xf6>
 8005a68:	f8d8 4000 	ldr.w	r4, [r8]
 8005a6c:	4627      	mov	r7, r4
 8005a6e:	2f00      	cmp	r7, #0
 8005a70:	d143      	bne.n	8005afa <_malloc_r+0xd6>
 8005a72:	2c00      	cmp	r4, #0
 8005a74:	d04b      	beq.n	8005b0e <_malloc_r+0xea>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	4639      	mov	r1, r7
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	eb04 0903 	add.w	r9, r4, r3
 8005a80:	f000 fb5c 	bl	800613c <_sbrk_r>
 8005a84:	4581      	cmp	r9, r0
 8005a86:	d142      	bne.n	8005b0e <_malloc_r+0xea>
 8005a88:	6821      	ldr	r1, [r4, #0]
 8005a8a:	1a6d      	subs	r5, r5, r1
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f7ff ffa6 	bl	80059e0 <sbrk_aligned>
 8005a94:	3001      	adds	r0, #1
 8005a96:	d03a      	beq.n	8005b0e <_malloc_r+0xea>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	442b      	add	r3, r5
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	bb62      	cbnz	r2, 8005b00 <_malloc_r+0xdc>
 8005aa6:	f8c8 7000 	str.w	r7, [r8]
 8005aaa:	e00f      	b.n	8005acc <_malloc_r+0xa8>
 8005aac:	6822      	ldr	r2, [r4, #0]
 8005aae:	1b52      	subs	r2, r2, r5
 8005ab0:	d420      	bmi.n	8005af4 <_malloc_r+0xd0>
 8005ab2:	2a0b      	cmp	r2, #11
 8005ab4:	d917      	bls.n	8005ae6 <_malloc_r+0xc2>
 8005ab6:	1961      	adds	r1, r4, r5
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	6025      	str	r5, [r4, #0]
 8005abc:	bf18      	it	ne
 8005abe:	6059      	strne	r1, [r3, #4]
 8005ac0:	6863      	ldr	r3, [r4, #4]
 8005ac2:	bf08      	it	eq
 8005ac4:	f8c8 1000 	streq.w	r1, [r8]
 8005ac8:	5162      	str	r2, [r4, r5]
 8005aca:	604b      	str	r3, [r1, #4]
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 f82f 	bl	8005b30 <__malloc_unlock>
 8005ad2:	f104 000b 	add.w	r0, r4, #11
 8005ad6:	1d23      	adds	r3, r4, #4
 8005ad8:	f020 0007 	bic.w	r0, r0, #7
 8005adc:	1ac2      	subs	r2, r0, r3
 8005ade:	bf1c      	itt	ne
 8005ae0:	1a1b      	subne	r3, r3, r0
 8005ae2:	50a3      	strne	r3, [r4, r2]
 8005ae4:	e7af      	b.n	8005a46 <_malloc_r+0x22>
 8005ae6:	6862      	ldr	r2, [r4, #4]
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	bf0c      	ite	eq
 8005aec:	f8c8 2000 	streq.w	r2, [r8]
 8005af0:	605a      	strne	r2, [r3, #4]
 8005af2:	e7eb      	b.n	8005acc <_malloc_r+0xa8>
 8005af4:	4623      	mov	r3, r4
 8005af6:	6864      	ldr	r4, [r4, #4]
 8005af8:	e7ae      	b.n	8005a58 <_malloc_r+0x34>
 8005afa:	463c      	mov	r4, r7
 8005afc:	687f      	ldr	r7, [r7, #4]
 8005afe:	e7b6      	b.n	8005a6e <_malloc_r+0x4a>
 8005b00:	461a      	mov	r2, r3
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	42a3      	cmp	r3, r4
 8005b06:	d1fb      	bne.n	8005b00 <_malloc_r+0xdc>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	6053      	str	r3, [r2, #4]
 8005b0c:	e7de      	b.n	8005acc <_malloc_r+0xa8>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	6033      	str	r3, [r6, #0]
 8005b12:	4630      	mov	r0, r6
 8005b14:	f000 f80c 	bl	8005b30 <__malloc_unlock>
 8005b18:	e794      	b.n	8005a44 <_malloc_r+0x20>
 8005b1a:	6005      	str	r5, [r0, #0]
 8005b1c:	e7d6      	b.n	8005acc <_malloc_r+0xa8>
 8005b1e:	bf00      	nop
 8005b20:	200002bc 	.word	0x200002bc

08005b24 <__malloc_lock>:
 8005b24:	4801      	ldr	r0, [pc, #4]	@ (8005b2c <__malloc_lock+0x8>)
 8005b26:	f7ff bf0f 	b.w	8005948 <__retarget_lock_acquire_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	200002b4 	.word	0x200002b4

08005b30 <__malloc_unlock>:
 8005b30:	4801      	ldr	r0, [pc, #4]	@ (8005b38 <__malloc_unlock+0x8>)
 8005b32:	f7ff bf0a 	b.w	800594a <__retarget_lock_release_recursive>
 8005b36:	bf00      	nop
 8005b38:	200002b4 	.word	0x200002b4

08005b3c <__ssputs_r>:
 8005b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b40:	688e      	ldr	r6, [r1, #8]
 8005b42:	461f      	mov	r7, r3
 8005b44:	42be      	cmp	r6, r7
 8005b46:	680b      	ldr	r3, [r1, #0]
 8005b48:	4682      	mov	sl, r0
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	4690      	mov	r8, r2
 8005b4e:	d82d      	bhi.n	8005bac <__ssputs_r+0x70>
 8005b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b58:	d026      	beq.n	8005ba8 <__ssputs_r+0x6c>
 8005b5a:	6965      	ldr	r5, [r4, #20]
 8005b5c:	6909      	ldr	r1, [r1, #16]
 8005b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b62:	eba3 0901 	sub.w	r9, r3, r1
 8005b66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b6a:	1c7b      	adds	r3, r7, #1
 8005b6c:	444b      	add	r3, r9
 8005b6e:	106d      	asrs	r5, r5, #1
 8005b70:	429d      	cmp	r5, r3
 8005b72:	bf38      	it	cc
 8005b74:	461d      	movcc	r5, r3
 8005b76:	0553      	lsls	r3, r2, #21
 8005b78:	d527      	bpl.n	8005bca <__ssputs_r+0x8e>
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	f7ff ff52 	bl	8005a24 <_malloc_r>
 8005b80:	4606      	mov	r6, r0
 8005b82:	b360      	cbz	r0, 8005bde <__ssputs_r+0xa2>
 8005b84:	6921      	ldr	r1, [r4, #16]
 8005b86:	464a      	mov	r2, r9
 8005b88:	f000 fae8 	bl	800615c <memcpy>
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	6126      	str	r6, [r4, #16]
 8005b9a:	6165      	str	r5, [r4, #20]
 8005b9c:	444e      	add	r6, r9
 8005b9e:	eba5 0509 	sub.w	r5, r5, r9
 8005ba2:	6026      	str	r6, [r4, #0]
 8005ba4:	60a5      	str	r5, [r4, #8]
 8005ba6:	463e      	mov	r6, r7
 8005ba8:	42be      	cmp	r6, r7
 8005baa:	d900      	bls.n	8005bae <__ssputs_r+0x72>
 8005bac:	463e      	mov	r6, r7
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	f000 faa8 	bl	8006108 <memmove>
 8005bb8:	68a3      	ldr	r3, [r4, #8]
 8005bba:	1b9b      	subs	r3, r3, r6
 8005bbc:	60a3      	str	r3, [r4, #8]
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	4433      	add	r3, r6
 8005bc2:	6023      	str	r3, [r4, #0]
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bca:	462a      	mov	r2, r5
 8005bcc:	f000 fad4 	bl	8006178 <_realloc_r>
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d1e0      	bne.n	8005b98 <__ssputs_r+0x5c>
 8005bd6:	6921      	ldr	r1, [r4, #16]
 8005bd8:	4650      	mov	r0, sl
 8005bda:	f7ff feb7 	bl	800594c <_free_r>
 8005bde:	230c      	movs	r3, #12
 8005be0:	f8ca 3000 	str.w	r3, [sl]
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf0:	e7e9      	b.n	8005bc6 <__ssputs_r+0x8a>
	...

08005bf4 <_svfiprintf_r>:
 8005bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf8:	4698      	mov	r8, r3
 8005bfa:	898b      	ldrh	r3, [r1, #12]
 8005bfc:	061b      	lsls	r3, r3, #24
 8005bfe:	b09d      	sub	sp, #116	@ 0x74
 8005c00:	4607      	mov	r7, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	4614      	mov	r4, r2
 8005c06:	d510      	bpl.n	8005c2a <_svfiprintf_r+0x36>
 8005c08:	690b      	ldr	r3, [r1, #16]
 8005c0a:	b973      	cbnz	r3, 8005c2a <_svfiprintf_r+0x36>
 8005c0c:	2140      	movs	r1, #64	@ 0x40
 8005c0e:	f7ff ff09 	bl	8005a24 <_malloc_r>
 8005c12:	6028      	str	r0, [r5, #0]
 8005c14:	6128      	str	r0, [r5, #16]
 8005c16:	b930      	cbnz	r0, 8005c26 <_svfiprintf_r+0x32>
 8005c18:	230c      	movs	r3, #12
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	b01d      	add	sp, #116	@ 0x74
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	2340      	movs	r3, #64	@ 0x40
 8005c28:	616b      	str	r3, [r5, #20]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c2e:	2320      	movs	r3, #32
 8005c30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c38:	2330      	movs	r3, #48	@ 0x30
 8005c3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005dd8 <_svfiprintf_r+0x1e4>
 8005c3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c42:	f04f 0901 	mov.w	r9, #1
 8005c46:	4623      	mov	r3, r4
 8005c48:	469a      	mov	sl, r3
 8005c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c4e:	b10a      	cbz	r2, 8005c54 <_svfiprintf_r+0x60>
 8005c50:	2a25      	cmp	r2, #37	@ 0x25
 8005c52:	d1f9      	bne.n	8005c48 <_svfiprintf_r+0x54>
 8005c54:	ebba 0b04 	subs.w	fp, sl, r4
 8005c58:	d00b      	beq.n	8005c72 <_svfiprintf_r+0x7e>
 8005c5a:	465b      	mov	r3, fp
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4638      	mov	r0, r7
 8005c62:	f7ff ff6b 	bl	8005b3c <__ssputs_r>
 8005c66:	3001      	adds	r0, #1
 8005c68:	f000 80a7 	beq.w	8005dba <_svfiprintf_r+0x1c6>
 8005c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c6e:	445a      	add	r2, fp
 8005c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c72:	f89a 3000 	ldrb.w	r3, [sl]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 809f 	beq.w	8005dba <_svfiprintf_r+0x1c6>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c86:	f10a 0a01 	add.w	sl, sl, #1
 8005c8a:	9304      	str	r3, [sp, #16]
 8005c8c:	9307      	str	r3, [sp, #28]
 8005c8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c92:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c94:	4654      	mov	r4, sl
 8005c96:	2205      	movs	r2, #5
 8005c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9c:	484e      	ldr	r0, [pc, #312]	@ (8005dd8 <_svfiprintf_r+0x1e4>)
 8005c9e:	f7fa faaf 	bl	8000200 <memchr>
 8005ca2:	9a04      	ldr	r2, [sp, #16]
 8005ca4:	b9d8      	cbnz	r0, 8005cde <_svfiprintf_r+0xea>
 8005ca6:	06d0      	lsls	r0, r2, #27
 8005ca8:	bf44      	itt	mi
 8005caa:	2320      	movmi	r3, #32
 8005cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cb0:	0711      	lsls	r1, r2, #28
 8005cb2:	bf44      	itt	mi
 8005cb4:	232b      	movmi	r3, #43	@ 0x2b
 8005cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cba:	f89a 3000 	ldrb.w	r3, [sl]
 8005cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cc0:	d015      	beq.n	8005cee <_svfiprintf_r+0xfa>
 8005cc2:	9a07      	ldr	r2, [sp, #28]
 8005cc4:	4654      	mov	r4, sl
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f04f 0c0a 	mov.w	ip, #10
 8005ccc:	4621      	mov	r1, r4
 8005cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd2:	3b30      	subs	r3, #48	@ 0x30
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d94b      	bls.n	8005d70 <_svfiprintf_r+0x17c>
 8005cd8:	b1b0      	cbz	r0, 8005d08 <_svfiprintf_r+0x114>
 8005cda:	9207      	str	r2, [sp, #28]
 8005cdc:	e014      	b.n	8005d08 <_svfiprintf_r+0x114>
 8005cde:	eba0 0308 	sub.w	r3, r0, r8
 8005ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	9304      	str	r3, [sp, #16]
 8005cea:	46a2      	mov	sl, r4
 8005cec:	e7d2      	b.n	8005c94 <_svfiprintf_r+0xa0>
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	1d19      	adds	r1, r3, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	9103      	str	r1, [sp, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bfbb      	ittet	lt
 8005cfa:	425b      	neglt	r3, r3
 8005cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8005d00:	9307      	strge	r3, [sp, #28]
 8005d02:	9307      	strlt	r3, [sp, #28]
 8005d04:	bfb8      	it	lt
 8005d06:	9204      	strlt	r2, [sp, #16]
 8005d08:	7823      	ldrb	r3, [r4, #0]
 8005d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d0c:	d10a      	bne.n	8005d24 <_svfiprintf_r+0x130>
 8005d0e:	7863      	ldrb	r3, [r4, #1]
 8005d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d12:	d132      	bne.n	8005d7a <_svfiprintf_r+0x186>
 8005d14:	9b03      	ldr	r3, [sp, #12]
 8005d16:	1d1a      	adds	r2, r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	9203      	str	r2, [sp, #12]
 8005d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d20:	3402      	adds	r4, #2
 8005d22:	9305      	str	r3, [sp, #20]
 8005d24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005de8 <_svfiprintf_r+0x1f4>
 8005d28:	7821      	ldrb	r1, [r4, #0]
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	4650      	mov	r0, sl
 8005d2e:	f7fa fa67 	bl	8000200 <memchr>
 8005d32:	b138      	cbz	r0, 8005d44 <_svfiprintf_r+0x150>
 8005d34:	9b04      	ldr	r3, [sp, #16]
 8005d36:	eba0 000a 	sub.w	r0, r0, sl
 8005d3a:	2240      	movs	r2, #64	@ 0x40
 8005d3c:	4082      	lsls	r2, r0
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	3401      	adds	r4, #1
 8005d42:	9304      	str	r3, [sp, #16]
 8005d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d48:	4824      	ldr	r0, [pc, #144]	@ (8005ddc <_svfiprintf_r+0x1e8>)
 8005d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d4e:	2206      	movs	r2, #6
 8005d50:	f7fa fa56 	bl	8000200 <memchr>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d036      	beq.n	8005dc6 <_svfiprintf_r+0x1d2>
 8005d58:	4b21      	ldr	r3, [pc, #132]	@ (8005de0 <_svfiprintf_r+0x1ec>)
 8005d5a:	bb1b      	cbnz	r3, 8005da4 <_svfiprintf_r+0x1b0>
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	3307      	adds	r3, #7
 8005d60:	f023 0307 	bic.w	r3, r3, #7
 8005d64:	3308      	adds	r3, #8
 8005d66:	9303      	str	r3, [sp, #12]
 8005d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6a:	4433      	add	r3, r6
 8005d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6e:	e76a      	b.n	8005c46 <_svfiprintf_r+0x52>
 8005d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d74:	460c      	mov	r4, r1
 8005d76:	2001      	movs	r0, #1
 8005d78:	e7a8      	b.n	8005ccc <_svfiprintf_r+0xd8>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	3401      	adds	r4, #1
 8005d7e:	9305      	str	r3, [sp, #20]
 8005d80:	4619      	mov	r1, r3
 8005d82:	f04f 0c0a 	mov.w	ip, #10
 8005d86:	4620      	mov	r0, r4
 8005d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d8c:	3a30      	subs	r2, #48	@ 0x30
 8005d8e:	2a09      	cmp	r2, #9
 8005d90:	d903      	bls.n	8005d9a <_svfiprintf_r+0x1a6>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0c6      	beq.n	8005d24 <_svfiprintf_r+0x130>
 8005d96:	9105      	str	r1, [sp, #20]
 8005d98:	e7c4      	b.n	8005d24 <_svfiprintf_r+0x130>
 8005d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d9e:	4604      	mov	r4, r0
 8005da0:	2301      	movs	r3, #1
 8005da2:	e7f0      	b.n	8005d86 <_svfiprintf_r+0x192>
 8005da4:	ab03      	add	r3, sp, #12
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	462a      	mov	r2, r5
 8005daa:	4b0e      	ldr	r3, [pc, #56]	@ (8005de4 <_svfiprintf_r+0x1f0>)
 8005dac:	a904      	add	r1, sp, #16
 8005dae:	4638      	mov	r0, r7
 8005db0:	f3af 8000 	nop.w
 8005db4:	1c42      	adds	r2, r0, #1
 8005db6:	4606      	mov	r6, r0
 8005db8:	d1d6      	bne.n	8005d68 <_svfiprintf_r+0x174>
 8005dba:	89ab      	ldrh	r3, [r5, #12]
 8005dbc:	065b      	lsls	r3, r3, #25
 8005dbe:	f53f af2d 	bmi.w	8005c1c <_svfiprintf_r+0x28>
 8005dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dc4:	e72c      	b.n	8005c20 <_svfiprintf_r+0x2c>
 8005dc6:	ab03      	add	r3, sp, #12
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	462a      	mov	r2, r5
 8005dcc:	4b05      	ldr	r3, [pc, #20]	@ (8005de4 <_svfiprintf_r+0x1f0>)
 8005dce:	a904      	add	r1, sp, #16
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f000 f879 	bl	8005ec8 <_printf_i>
 8005dd6:	e7ed      	b.n	8005db4 <_svfiprintf_r+0x1c0>
 8005dd8:	0800628c 	.word	0x0800628c
 8005ddc:	08006296 	.word	0x08006296
 8005de0:	00000000 	.word	0x00000000
 8005de4:	08005b3d 	.word	0x08005b3d
 8005de8:	08006292 	.word	0x08006292

08005dec <_printf_common>:
 8005dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	4616      	mov	r6, r2
 8005df2:	4698      	mov	r8, r3
 8005df4:	688a      	ldr	r2, [r1, #8]
 8005df6:	690b      	ldr	r3, [r1, #16]
 8005df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	bfb8      	it	lt
 8005e00:	4613      	movlt	r3, r2
 8005e02:	6033      	str	r3, [r6, #0]
 8005e04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e08:	4607      	mov	r7, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	b10a      	cbz	r2, 8005e12 <_printf_common+0x26>
 8005e0e:	3301      	adds	r3, #1
 8005e10:	6033      	str	r3, [r6, #0]
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	0699      	lsls	r1, r3, #26
 8005e16:	bf42      	ittt	mi
 8005e18:	6833      	ldrmi	r3, [r6, #0]
 8005e1a:	3302      	addmi	r3, #2
 8005e1c:	6033      	strmi	r3, [r6, #0]
 8005e1e:	6825      	ldr	r5, [r4, #0]
 8005e20:	f015 0506 	ands.w	r5, r5, #6
 8005e24:	d106      	bne.n	8005e34 <_printf_common+0x48>
 8005e26:	f104 0a19 	add.w	sl, r4, #25
 8005e2a:	68e3      	ldr	r3, [r4, #12]
 8005e2c:	6832      	ldr	r2, [r6, #0]
 8005e2e:	1a9b      	subs	r3, r3, r2
 8005e30:	42ab      	cmp	r3, r5
 8005e32:	dc26      	bgt.n	8005e82 <_printf_common+0x96>
 8005e34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	3b00      	subs	r3, #0
 8005e3c:	bf18      	it	ne
 8005e3e:	2301      	movne	r3, #1
 8005e40:	0692      	lsls	r2, r2, #26
 8005e42:	d42b      	bmi.n	8005e9c <_printf_common+0xb0>
 8005e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e48:	4641      	mov	r1, r8
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	47c8      	blx	r9
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d01e      	beq.n	8005e90 <_printf_common+0xa4>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	6922      	ldr	r2, [r4, #16]
 8005e56:	f003 0306 	and.w	r3, r3, #6
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	bf02      	ittt	eq
 8005e5e:	68e5      	ldreq	r5, [r4, #12]
 8005e60:	6833      	ldreq	r3, [r6, #0]
 8005e62:	1aed      	subeq	r5, r5, r3
 8005e64:	68a3      	ldr	r3, [r4, #8]
 8005e66:	bf0c      	ite	eq
 8005e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e6c:	2500      	movne	r5, #0
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	bfc4      	itt	gt
 8005e72:	1a9b      	subgt	r3, r3, r2
 8005e74:	18ed      	addgt	r5, r5, r3
 8005e76:	2600      	movs	r6, #0
 8005e78:	341a      	adds	r4, #26
 8005e7a:	42b5      	cmp	r5, r6
 8005e7c:	d11a      	bne.n	8005eb4 <_printf_common+0xc8>
 8005e7e:	2000      	movs	r0, #0
 8005e80:	e008      	b.n	8005e94 <_printf_common+0xa8>
 8005e82:	2301      	movs	r3, #1
 8005e84:	4652      	mov	r2, sl
 8005e86:	4641      	mov	r1, r8
 8005e88:	4638      	mov	r0, r7
 8005e8a:	47c8      	blx	r9
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d103      	bne.n	8005e98 <_printf_common+0xac>
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e98:	3501      	adds	r5, #1
 8005e9a:	e7c6      	b.n	8005e2a <_printf_common+0x3e>
 8005e9c:	18e1      	adds	r1, r4, r3
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	2030      	movs	r0, #48	@ 0x30
 8005ea2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ea6:	4422      	add	r2, r4
 8005ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	e7c7      	b.n	8005e44 <_printf_common+0x58>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	4641      	mov	r1, r8
 8005eba:	4638      	mov	r0, r7
 8005ebc:	47c8      	blx	r9
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d0e6      	beq.n	8005e90 <_printf_common+0xa4>
 8005ec2:	3601      	adds	r6, #1
 8005ec4:	e7d9      	b.n	8005e7a <_printf_common+0x8e>
	...

08005ec8 <_printf_i>:
 8005ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ecc:	7e0f      	ldrb	r7, [r1, #24]
 8005ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ed0:	2f78      	cmp	r7, #120	@ 0x78
 8005ed2:	4691      	mov	r9, r2
 8005ed4:	4680      	mov	r8, r0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	469a      	mov	sl, r3
 8005eda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ede:	d807      	bhi.n	8005ef0 <_printf_i+0x28>
 8005ee0:	2f62      	cmp	r7, #98	@ 0x62
 8005ee2:	d80a      	bhi.n	8005efa <_printf_i+0x32>
 8005ee4:	2f00      	cmp	r7, #0
 8005ee6:	f000 80d2 	beq.w	800608e <_printf_i+0x1c6>
 8005eea:	2f58      	cmp	r7, #88	@ 0x58
 8005eec:	f000 80b9 	beq.w	8006062 <_printf_i+0x19a>
 8005ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ef4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ef8:	e03a      	b.n	8005f70 <_printf_i+0xa8>
 8005efa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005efe:	2b15      	cmp	r3, #21
 8005f00:	d8f6      	bhi.n	8005ef0 <_printf_i+0x28>
 8005f02:	a101      	add	r1, pc, #4	@ (adr r1, 8005f08 <_printf_i+0x40>)
 8005f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f08:	08005f61 	.word	0x08005f61
 8005f0c:	08005f75 	.word	0x08005f75
 8005f10:	08005ef1 	.word	0x08005ef1
 8005f14:	08005ef1 	.word	0x08005ef1
 8005f18:	08005ef1 	.word	0x08005ef1
 8005f1c:	08005ef1 	.word	0x08005ef1
 8005f20:	08005f75 	.word	0x08005f75
 8005f24:	08005ef1 	.word	0x08005ef1
 8005f28:	08005ef1 	.word	0x08005ef1
 8005f2c:	08005ef1 	.word	0x08005ef1
 8005f30:	08005ef1 	.word	0x08005ef1
 8005f34:	08006075 	.word	0x08006075
 8005f38:	08005f9f 	.word	0x08005f9f
 8005f3c:	0800602f 	.word	0x0800602f
 8005f40:	08005ef1 	.word	0x08005ef1
 8005f44:	08005ef1 	.word	0x08005ef1
 8005f48:	08006097 	.word	0x08006097
 8005f4c:	08005ef1 	.word	0x08005ef1
 8005f50:	08005f9f 	.word	0x08005f9f
 8005f54:	08005ef1 	.word	0x08005ef1
 8005f58:	08005ef1 	.word	0x08005ef1
 8005f5c:	08006037 	.word	0x08006037
 8005f60:	6833      	ldr	r3, [r6, #0]
 8005f62:	1d1a      	adds	r2, r3, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6032      	str	r2, [r6, #0]
 8005f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f70:	2301      	movs	r3, #1
 8005f72:	e09d      	b.n	80060b0 <_printf_i+0x1e8>
 8005f74:	6833      	ldr	r3, [r6, #0]
 8005f76:	6820      	ldr	r0, [r4, #0]
 8005f78:	1d19      	adds	r1, r3, #4
 8005f7a:	6031      	str	r1, [r6, #0]
 8005f7c:	0606      	lsls	r6, r0, #24
 8005f7e:	d501      	bpl.n	8005f84 <_printf_i+0xbc>
 8005f80:	681d      	ldr	r5, [r3, #0]
 8005f82:	e003      	b.n	8005f8c <_printf_i+0xc4>
 8005f84:	0645      	lsls	r5, r0, #25
 8005f86:	d5fb      	bpl.n	8005f80 <_printf_i+0xb8>
 8005f88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	da03      	bge.n	8005f98 <_printf_i+0xd0>
 8005f90:	232d      	movs	r3, #45	@ 0x2d
 8005f92:	426d      	negs	r5, r5
 8005f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f98:	4859      	ldr	r0, [pc, #356]	@ (8006100 <_printf_i+0x238>)
 8005f9a:	230a      	movs	r3, #10
 8005f9c:	e011      	b.n	8005fc2 <_printf_i+0xfa>
 8005f9e:	6821      	ldr	r1, [r4, #0]
 8005fa0:	6833      	ldr	r3, [r6, #0]
 8005fa2:	0608      	lsls	r0, r1, #24
 8005fa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fa8:	d402      	bmi.n	8005fb0 <_printf_i+0xe8>
 8005faa:	0649      	lsls	r1, r1, #25
 8005fac:	bf48      	it	mi
 8005fae:	b2ad      	uxthmi	r5, r5
 8005fb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fb2:	4853      	ldr	r0, [pc, #332]	@ (8006100 <_printf_i+0x238>)
 8005fb4:	6033      	str	r3, [r6, #0]
 8005fb6:	bf14      	ite	ne
 8005fb8:	230a      	movne	r3, #10
 8005fba:	2308      	moveq	r3, #8
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fc2:	6866      	ldr	r6, [r4, #4]
 8005fc4:	60a6      	str	r6, [r4, #8]
 8005fc6:	2e00      	cmp	r6, #0
 8005fc8:	bfa2      	ittt	ge
 8005fca:	6821      	ldrge	r1, [r4, #0]
 8005fcc:	f021 0104 	bicge.w	r1, r1, #4
 8005fd0:	6021      	strge	r1, [r4, #0]
 8005fd2:	b90d      	cbnz	r5, 8005fd8 <_printf_i+0x110>
 8005fd4:	2e00      	cmp	r6, #0
 8005fd6:	d04b      	beq.n	8006070 <_printf_i+0x1a8>
 8005fd8:	4616      	mov	r6, r2
 8005fda:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fde:	fb03 5711 	mls	r7, r3, r1, r5
 8005fe2:	5dc7      	ldrb	r7, [r0, r7]
 8005fe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fe8:	462f      	mov	r7, r5
 8005fea:	42bb      	cmp	r3, r7
 8005fec:	460d      	mov	r5, r1
 8005fee:	d9f4      	bls.n	8005fda <_printf_i+0x112>
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d10b      	bne.n	800600c <_printf_i+0x144>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	07df      	lsls	r7, r3, #31
 8005ff8:	d508      	bpl.n	800600c <_printf_i+0x144>
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	4299      	cmp	r1, r3
 8006000:	bfde      	ittt	le
 8006002:	2330      	movle	r3, #48	@ 0x30
 8006004:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006008:	f106 36ff 	addle.w	r6, r6, #4294967295
 800600c:	1b92      	subs	r2, r2, r6
 800600e:	6122      	str	r2, [r4, #16]
 8006010:	f8cd a000 	str.w	sl, [sp]
 8006014:	464b      	mov	r3, r9
 8006016:	aa03      	add	r2, sp, #12
 8006018:	4621      	mov	r1, r4
 800601a:	4640      	mov	r0, r8
 800601c:	f7ff fee6 	bl	8005dec <_printf_common>
 8006020:	3001      	adds	r0, #1
 8006022:	d14a      	bne.n	80060ba <_printf_i+0x1f2>
 8006024:	f04f 30ff 	mov.w	r0, #4294967295
 8006028:	b004      	add	sp, #16
 800602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	f043 0320 	orr.w	r3, r3, #32
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	4833      	ldr	r0, [pc, #204]	@ (8006104 <_printf_i+0x23c>)
 8006038:	2778      	movs	r7, #120	@ 0x78
 800603a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	6831      	ldr	r1, [r6, #0]
 8006042:	061f      	lsls	r7, r3, #24
 8006044:	f851 5b04 	ldr.w	r5, [r1], #4
 8006048:	d402      	bmi.n	8006050 <_printf_i+0x188>
 800604a:	065f      	lsls	r7, r3, #25
 800604c:	bf48      	it	mi
 800604e:	b2ad      	uxthmi	r5, r5
 8006050:	6031      	str	r1, [r6, #0]
 8006052:	07d9      	lsls	r1, r3, #31
 8006054:	bf44      	itt	mi
 8006056:	f043 0320 	orrmi.w	r3, r3, #32
 800605a:	6023      	strmi	r3, [r4, #0]
 800605c:	b11d      	cbz	r5, 8006066 <_printf_i+0x19e>
 800605e:	2310      	movs	r3, #16
 8006060:	e7ac      	b.n	8005fbc <_printf_i+0xf4>
 8006062:	4827      	ldr	r0, [pc, #156]	@ (8006100 <_printf_i+0x238>)
 8006064:	e7e9      	b.n	800603a <_printf_i+0x172>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f023 0320 	bic.w	r3, r3, #32
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	e7f6      	b.n	800605e <_printf_i+0x196>
 8006070:	4616      	mov	r6, r2
 8006072:	e7bd      	b.n	8005ff0 <_printf_i+0x128>
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	6825      	ldr	r5, [r4, #0]
 8006078:	6961      	ldr	r1, [r4, #20]
 800607a:	1d18      	adds	r0, r3, #4
 800607c:	6030      	str	r0, [r6, #0]
 800607e:	062e      	lsls	r6, r5, #24
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	d501      	bpl.n	8006088 <_printf_i+0x1c0>
 8006084:	6019      	str	r1, [r3, #0]
 8006086:	e002      	b.n	800608e <_printf_i+0x1c6>
 8006088:	0668      	lsls	r0, r5, #25
 800608a:	d5fb      	bpl.n	8006084 <_printf_i+0x1bc>
 800608c:	8019      	strh	r1, [r3, #0]
 800608e:	2300      	movs	r3, #0
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	4616      	mov	r6, r2
 8006094:	e7bc      	b.n	8006010 <_printf_i+0x148>
 8006096:	6833      	ldr	r3, [r6, #0]
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	6032      	str	r2, [r6, #0]
 800609c:	681e      	ldr	r6, [r3, #0]
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	2100      	movs	r1, #0
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7fa f8ac 	bl	8000200 <memchr>
 80060a8:	b108      	cbz	r0, 80060ae <_printf_i+0x1e6>
 80060aa:	1b80      	subs	r0, r0, r6
 80060ac:	6060      	str	r0, [r4, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	2300      	movs	r3, #0
 80060b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060b8:	e7aa      	b.n	8006010 <_printf_i+0x148>
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	4632      	mov	r2, r6
 80060be:	4649      	mov	r1, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	47d0      	blx	sl
 80060c4:	3001      	adds	r0, #1
 80060c6:	d0ad      	beq.n	8006024 <_printf_i+0x15c>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	079b      	lsls	r3, r3, #30
 80060cc:	d413      	bmi.n	80060f6 <_printf_i+0x22e>
 80060ce:	68e0      	ldr	r0, [r4, #12]
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	4298      	cmp	r0, r3
 80060d4:	bfb8      	it	lt
 80060d6:	4618      	movlt	r0, r3
 80060d8:	e7a6      	b.n	8006028 <_printf_i+0x160>
 80060da:	2301      	movs	r3, #1
 80060dc:	4632      	mov	r2, r6
 80060de:	4649      	mov	r1, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	47d0      	blx	sl
 80060e4:	3001      	adds	r0, #1
 80060e6:	d09d      	beq.n	8006024 <_printf_i+0x15c>
 80060e8:	3501      	adds	r5, #1
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	9903      	ldr	r1, [sp, #12]
 80060ee:	1a5b      	subs	r3, r3, r1
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dcf2      	bgt.n	80060da <_printf_i+0x212>
 80060f4:	e7eb      	b.n	80060ce <_printf_i+0x206>
 80060f6:	2500      	movs	r5, #0
 80060f8:	f104 0619 	add.w	r6, r4, #25
 80060fc:	e7f5      	b.n	80060ea <_printf_i+0x222>
 80060fe:	bf00      	nop
 8006100:	0800629d 	.word	0x0800629d
 8006104:	080062ae 	.word	0x080062ae

08006108 <memmove>:
 8006108:	4288      	cmp	r0, r1
 800610a:	b510      	push	{r4, lr}
 800610c:	eb01 0402 	add.w	r4, r1, r2
 8006110:	d902      	bls.n	8006118 <memmove+0x10>
 8006112:	4284      	cmp	r4, r0
 8006114:	4623      	mov	r3, r4
 8006116:	d807      	bhi.n	8006128 <memmove+0x20>
 8006118:	1e43      	subs	r3, r0, #1
 800611a:	42a1      	cmp	r1, r4
 800611c:	d008      	beq.n	8006130 <memmove+0x28>
 800611e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006126:	e7f8      	b.n	800611a <memmove+0x12>
 8006128:	4402      	add	r2, r0
 800612a:	4601      	mov	r1, r0
 800612c:	428a      	cmp	r2, r1
 800612e:	d100      	bne.n	8006132 <memmove+0x2a>
 8006130:	bd10      	pop	{r4, pc}
 8006132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800613a:	e7f7      	b.n	800612c <memmove+0x24>

0800613c <_sbrk_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4d06      	ldr	r5, [pc, #24]	@ (8006158 <_sbrk_r+0x1c>)
 8006140:	2300      	movs	r3, #0
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	f7fa fcfe 	bl	8000b48 <_sbrk>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_sbrk_r+0x1a>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_sbrk_r+0x1a>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	200002b0 	.word	0x200002b0

0800615c <memcpy>:
 800615c:	440a      	add	r2, r1
 800615e:	4291      	cmp	r1, r2
 8006160:	f100 33ff 	add.w	r3, r0, #4294967295
 8006164:	d100      	bne.n	8006168 <memcpy+0xc>
 8006166:	4770      	bx	lr
 8006168:	b510      	push	{r4, lr}
 800616a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006172:	4291      	cmp	r1, r2
 8006174:	d1f9      	bne.n	800616a <memcpy+0xe>
 8006176:	bd10      	pop	{r4, pc}

08006178 <_realloc_r>:
 8006178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617c:	4680      	mov	r8, r0
 800617e:	4615      	mov	r5, r2
 8006180:	460c      	mov	r4, r1
 8006182:	b921      	cbnz	r1, 800618e <_realloc_r+0x16>
 8006184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	4611      	mov	r1, r2
 800618a:	f7ff bc4b 	b.w	8005a24 <_malloc_r>
 800618e:	b92a      	cbnz	r2, 800619c <_realloc_r+0x24>
 8006190:	f7ff fbdc 	bl	800594c <_free_r>
 8006194:	2400      	movs	r4, #0
 8006196:	4620      	mov	r0, r4
 8006198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800619c:	f000 f81a 	bl	80061d4 <_malloc_usable_size_r>
 80061a0:	4285      	cmp	r5, r0
 80061a2:	4606      	mov	r6, r0
 80061a4:	d802      	bhi.n	80061ac <_realloc_r+0x34>
 80061a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80061aa:	d8f4      	bhi.n	8006196 <_realloc_r+0x1e>
 80061ac:	4629      	mov	r1, r5
 80061ae:	4640      	mov	r0, r8
 80061b0:	f7ff fc38 	bl	8005a24 <_malloc_r>
 80061b4:	4607      	mov	r7, r0
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d0ec      	beq.n	8006194 <_realloc_r+0x1c>
 80061ba:	42b5      	cmp	r5, r6
 80061bc:	462a      	mov	r2, r5
 80061be:	4621      	mov	r1, r4
 80061c0:	bf28      	it	cs
 80061c2:	4632      	movcs	r2, r6
 80061c4:	f7ff ffca 	bl	800615c <memcpy>
 80061c8:	4621      	mov	r1, r4
 80061ca:	4640      	mov	r0, r8
 80061cc:	f7ff fbbe 	bl	800594c <_free_r>
 80061d0:	463c      	mov	r4, r7
 80061d2:	e7e0      	b.n	8006196 <_realloc_r+0x1e>

080061d4 <_malloc_usable_size_r>:
 80061d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d8:	1f18      	subs	r0, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bfbc      	itt	lt
 80061de:	580b      	ldrlt	r3, [r1, r0]
 80061e0:	18c0      	addlt	r0, r0, r3
 80061e2:	4770      	bx	lr

080061e4 <_init>:
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e6:	bf00      	nop
 80061e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ea:	bc08      	pop	{r3}
 80061ec:	469e      	mov	lr, r3
 80061ee:	4770      	bx	lr

080061f0 <_fini>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	bf00      	nop
 80061f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f6:	bc08      	pop	{r3}
 80061f8:	469e      	mov	lr, r3
 80061fa:	4770      	bx	lr
