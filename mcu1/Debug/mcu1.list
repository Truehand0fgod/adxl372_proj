
mcu1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d0  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800578c  0800578c  0000678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057fc  080057fc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080057fc  080057fc  000067fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005804  08005804  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005804  08005804  00006804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005808  08005808  00006808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800580c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08005818  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08005818  00007158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da91  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd2  00000000  00000000  00014acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  000168a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000829  00000000  00000000  00017338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b660  00000000  00000000  00017b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d755  00000000  00000000  000431c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109a63  00000000  00000000  00050916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad0  00000000  00000000  0015a3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0015ce8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005774 	.word	0x08005774

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005774 	.word	0x08005774

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000524 <HAL_UART_RxCpltCallback+0x38>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d108      	bne.n	800050e <HAL_UART_RxCpltCallback+0x22>
	        uart3_cmd_ready = 1;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000528 <HAL_UART_RxCpltCallback+0x3c>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000506:	4809      	ldr	r0, [pc, #36]	@ (800052c <HAL_UART_RxCpltCallback+0x40>)
 8000508:	f000 ff4a 	bl	80013a0 <HAL_GPIO_TogglePin>
	else if (huart == &huart4) {
        uart4_data_ready = 1;
        //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    }

}
 800050c:	e006      	b.n	800051c <HAL_UART_RxCpltCallback+0x30>
	else if (huart == &huart4) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a07      	ldr	r2, [pc, #28]	@ (8000530 <HAL_UART_RxCpltCallback+0x44>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d102      	bne.n	800051c <HAL_UART_RxCpltCallback+0x30>
        uart4_data_ready = 1;
 8000516:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <HAL_UART_RxCpltCallback+0x48>)
 8000518:	2201      	movs	r2, #1
 800051a:	701a      	strb	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000bc 	.word	0x200000bc
 8000528:	20000151 	.word	0x20000151
 800052c:	48000800 	.word	0x48000800
 8000530:	20000028 	.word	0x20000028
 8000534:	20000150 	.word	0x20000150

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09c      	sub	sp, #112	@ 0x70
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fb44 	bl	8000bca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f863 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f953 	bl	80007f0 <MX_GPIO_Init>
  MX_UART4_Init();
 800054a:	f000 f8af 	bl	80006ac <MX_UART4_Init>
  MX_USART3_UART_Init();
 800054e:	f000 f8fd 	bl	800074c <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#ifdef L
  char str[100] = {0};
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	2260      	movs	r2, #96	@ 0x60
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f005 f8dc 	bl	800571c <memset>
  uint8_t size = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	71bb      	strb	r3, [r7, #6]
  const uint8_t cmdSize = 1;
 800056c:	2301      	movs	r3, #1
 800056e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  HAL_UART_Receive_IT(&huart4, &size, 1);
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	4820      	ldr	r0, [pc, #128]	@ (80005fc <main+0xc4>)
 800057a:	f002 fe55 	bl	8003228 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &cmd, cmdSize);
 800057e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000582:	b29a      	uxth	r2, r3
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	4619      	mov	r1, r3
 8000588:	481d      	ldr	r0, [pc, #116]	@ (8000600 <main+0xc8>)
 800058a:	f002 fe4d 	bl	8003228 <HAL_UART_Receive_IT>
#endif
  while (1)
  {
#ifdef L
	  if(uart4_data_ready)
 800058e:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <main+0xcc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d018      	beq.n	80005ca <main+0x92>
	  {
		  uart4_data_ready = 0;
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <main+0xcc>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Receive(&huart4, (uint8_t*)str, size, 100);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	461a      	mov	r2, r3
 80005a2:	f107 0108 	add.w	r1, r7, #8
 80005a6:	2364      	movs	r3, #100	@ 0x64
 80005a8:	4814      	ldr	r0, [pc, #80]	@ (80005fc <main+0xc4>)
 80005aa:	f002 fce1 	bl	8002f70 <HAL_UART_Receive>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t*)str, size);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	461a      	mov	r2, r3
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	4619      	mov	r1, r3
 80005b8:	4811      	ldr	r0, [pc, #68]	@ (8000600 <main+0xc8>)
 80005ba:	f002 fda1 	bl	8003100 <HAL_UART_Transmit_IT>
		  HAL_UART_Receive_IT(&huart4, &size, 1);
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	480d      	ldr	r0, [pc, #52]	@ (80005fc <main+0xc4>)
 80005c6:	f002 fe2f 	bl	8003228 <HAL_UART_Receive_IT>
	  }
	  if(uart3_cmd_ready)
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <main+0xd0>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0dc      	beq.n	800058e <main+0x56>
	  {
		  uart3_cmd_ready = 0;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <main+0xd0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart4, &cmd, cmdSize);
 80005da:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80005de:	b29a      	uxth	r2, r3
 80005e0:	1dbb      	adds	r3, r7, #6
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	@ (80005fc <main+0xc4>)
 80005e6:	f002 fd8b 	bl	8003100 <HAL_UART_Transmit_IT>
		  HAL_UART_Receive_IT(&huart3, &cmd, cmdSize);
 80005ea:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	1dbb      	adds	r3, r7, #6
 80005f2:	4619      	mov	r1, r3
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <main+0xc8>)
 80005f6:	f002 fe17 	bl	8003228 <HAL_UART_Receive_IT>
	  if(uart4_data_ready)
 80005fa:	e7c8      	b.n	800058e <main+0x56>
 80005fc:	20000028 	.word	0x20000028
 8000600:	200000bc 	.word	0x200000bc
 8000604:	20000150 	.word	0x20000150
 8000608:	20000151 	.word	0x20000151

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b098      	sub	sp, #96	@ 0x60
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2248      	movs	r2, #72	@ 0x48
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 f87e 	bl	800571c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fef0 	bl	8001414 <HAL_PWREx_ControlVoltageScaling>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800063a:	f000 f931 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000642:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064c:	2303      	movs	r3, #3
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000654:	231e      	movs	r3, #30
 8000656:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0318 	add.w	r3, r7, #24
 8000668:	4618      	mov	r0, r3
 800066a:	f000 ff77 	bl	800155c <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000674:	f000 f914 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2105      	movs	r1, #5
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fbdf 	bl	8001e54 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f900 	bl	80008a0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006a0:	f001 fdd6 	bl	8002250 <HAL_RCC_EnableCSS>
}
 80006a4:	bf00      	nop
 80006a6:	3760      	adds	r7, #96	@ 0x60
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006b0:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <MX_UART4_Init+0x98>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <MX_UART4_Init+0x9c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80006b6:	4b23      	ldr	r3, [pc, #140]	@ (8000744 <MX_UART4_Init+0x98>)
 80006b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <MX_UART4_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <MX_UART4_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_UART4_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <MX_UART4_Init+0x98>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_UART4_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_UART4_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_UART4_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e8:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_UART4_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_UART4_Init+0x98>)
 80006f0:	2208      	movs	r2, #8
 80006f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_UART4_Init+0x98>)
 80006f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006fa:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006fc:	4811      	ldr	r0, [pc, #68]	@ (8000744 <MX_UART4_Init+0x98>)
 80006fe:	f002 fbe7 	bl	8002ed0 <HAL_UART_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_UART4_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f8ca 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070c:	2100      	movs	r1, #0
 800070e:	480d      	ldr	r0, [pc, #52]	@ (8000744 <MX_UART4_Init+0x98>)
 8000710:	f004 ff3a 	bl	8005588 <HAL_UARTEx_SetTxFifoThreshold>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_UART4_Init+0x72>
  {
    Error_Handler();
 800071a:	f000 f8c1 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4808      	ldr	r0, [pc, #32]	@ (8000744 <MX_UART4_Init+0x98>)
 8000722:	f004 ff6f 	bl	8005604 <HAL_UARTEx_SetRxFifoThreshold>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_UART4_Init+0x84>
  {
    Error_Handler();
 800072c:	f000 f8b8 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	@ (8000744 <MX_UART4_Init+0x98>)
 8000732:	f004 fef0 	bl	8005516 <HAL_UARTEx_DisableFifoMode>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_UART4_Init+0x94>
  {
    Error_Handler();
 800073c:	f000 f8b0 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000028 	.word	0x20000028
 8000748:	40004c00 	.word	0x40004c00

0800074c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000750:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 8000752:	4a26      	ldr	r2, [pc, #152]	@ (80007ec <MX_USART3_UART_Init+0xa0>)
 8000754:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000756:	4b24      	ldr	r3, [pc, #144]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 8000758:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800075c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000788:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	@ 0x28
  huart3.FifoMode = UART_FIFOMODE_DISABLE;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 8000796:	2200      	movs	r2, #0
 8000798:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800079a:	2300      	movs	r3, #0
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	4811      	ldr	r0, [pc, #68]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 80007a2:	f004 fe31 	bl	8005408 <HAL_RS485Ex_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART3_UART_Init+0x64>
  {
    Error_Handler();
 80007ac:	f000 f878 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 80007b4:	f004 fee8 	bl	8005588 <HAL_UARTEx_SetTxFifoThreshold>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 80007be:	f000 f86f 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4808      	ldr	r0, [pc, #32]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 80007c6:	f004 ff1d 	bl	8005604 <HAL_UARTEx_SetRxFifoThreshold>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART3_UART_Init+0x88>
  {
    Error_Handler();
 80007d0:	f000 f866 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_USART3_UART_Init+0x9c>)
 80007d6:	f004 fe9e 	bl	8005516 <HAL_UARTEx_DisableFifoMode>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART3_UART_Init+0x98>
  {
    Error_Handler();
 80007e0:	f000 f85e 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000bc 	.word	0x200000bc
 80007ec:	40004800 	.word	0x40004800

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <MX_GPIO_Init+0xa8>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a23      	ldr	r2, [pc, #140]	@ (8000898 <MX_GPIO_Init+0xa8>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <MX_GPIO_Init+0xa8>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <MX_GPIO_Init+0xa8>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a1d      	ldr	r2, [pc, #116]	@ (8000898 <MX_GPIO_Init+0xa8>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_GPIO_Init+0xa8>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_GPIO_Init+0xa8>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a17      	ldr	r2, [pc, #92]	@ (8000898 <MX_GPIO_Init+0xa8>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_GPIO_Init+0xa8>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_GPIO_Init+0xa8>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a11      	ldr	r2, [pc, #68]	@ (8000898 <MX_GPIO_Init+0xa8>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_GPIO_Init+0xa8>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086c:	480b      	ldr	r0, [pc, #44]	@ (800089c <MX_GPIO_Init+0xac>)
 800086e:	f000 fd7f 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000872:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_GPIO_Init+0xac>)
 800088c:	f000 fbde 	bl	800104c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	@ 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000800 	.word	0x48000800

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0b2      	sub	sp, #200	@ 0xc8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	2298      	movs	r2, #152	@ 0x98
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f004 ff01 	bl	800571c <memset>
  if(huart->Instance==UART4)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a65      	ldr	r2, [pc, #404]	@ (8000ab4 <HAL_UART_MspInit+0x1c0>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d15a      	bne.n	80009da <HAL_UART_MspInit+0xe6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000924:	2308      	movs	r3, #8
 8000926:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000928:	2300      	movs	r3, #0
 800092a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fd79 	bl	8002428 <HAL_RCCEx_PeriphCLKConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800093c:	f7ff ffb0 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000940:	4b5d      	ldr	r3, [pc, #372]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000944:	4a5c      	ldr	r2, [pc, #368]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000946:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800094a:	6593      	str	r3, [r2, #88]	@ 0x58
 800094c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 800094e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000950:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000958:	4b57      	ldr	r3, [pc, #348]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095c:	4a56      	ldr	r2, [pc, #344]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000964:	4b54      	ldr	r3, [pc, #336]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097e:	2301      	movs	r3, #1
 8000980:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800098a:	2308      	movs	r3, #8
 800098c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000994:	4619      	mov	r1, r3
 8000996:	4849      	ldr	r0, [pc, #292]	@ (8000abc <HAL_UART_MspInit+0x1c8>)
 8000998:	f000 fb58 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800099c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009b6:	2308      	movs	r3, #8
 80009b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80009c0:	4619      	mov	r1, r3
 80009c2:	483e      	ldr	r0, [pc, #248]	@ (8000abc <HAL_UART_MspInit+0x1c8>)
 80009c4:	f000 fb42 	bl	800104c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2034      	movs	r0, #52	@ 0x34
 80009ce:	f000 fa4c 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009d2:	2034      	movs	r0, #52	@ 0x34
 80009d4:	f000 fa65 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009d8:	e068      	b.n	8000aac <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a38      	ldr	r2, [pc, #224]	@ (8000ac0 <HAL_UART_MspInit+0x1cc>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d163      	bne.n	8000aac <HAL_UART_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009e4:	2304      	movs	r3, #4
 80009e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fd19 	bl	8002428 <HAL_RCCEx_PeriphCLKConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 80009fc:	f7ff ff50 	bl	80008a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a00:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a04:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000a06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a18:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1c:	4a26      	ldr	r2, [pc, #152]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a24:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	4a20      	ldr	r2, [pc, #128]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <HAL_UART_MspInit+0x1c4>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a48:	2330      	movs	r3, #48	@ 0x30
 8000a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a60:	2307      	movs	r3, #7
 8000a62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4813      	ldr	r0, [pc, #76]	@ (8000abc <HAL_UART_MspInit+0x1c8>)
 8000a6e:	f000 faed 	bl	800104c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a72:	2302      	movs	r3, #2
 8000a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000a94:	4619      	mov	r1, r3
 8000a96:	480b      	ldr	r0, [pc, #44]	@ (8000ac4 <HAL_UART_MspInit+0x1d0>)
 8000a98:	f000 fad8 	bl	800104c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2027      	movs	r0, #39	@ 0x27
 8000aa2:	f000 f9e2 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000aa6:	2027      	movs	r0, #39	@ 0x27
 8000aa8:	f000 f9fb 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
}
 8000aac:	bf00      	nop
 8000aae:	37c8      	adds	r7, #200	@ 0xc8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40004c00 	.word	0x40004c00
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000800 	.word	0x48000800
 8000ac0:	40004800 	.word	0x40004800
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000acc:	f001 fbd0 	bl	8002270 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <NMI_Handler+0x8>

08000ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b22:	f000 f8a7 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <USART3_IRQHandler+0x10>)
 8000b32:	f002 fbc5 	bl	80032c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000bc 	.word	0x200000bc

08000b40 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <UART4_IRQHandler+0x10>)
 8000b46:	f002 fbbb 	bl	80032c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000028 	.word	0x20000028

08000b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b7c:	f7ff ffea 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f004 fdc1 	bl	800572c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000baa:	f7ff fcc5 	bl	8000538 <main>

08000bae <LoopForever>:

LoopForever:
    b LoopForever
 8000bae:	e7fe      	b.n	8000bae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bbc:	0800580c 	.word	0x0800580c
  ldr r2, =_sbss
 8000bc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc4:	20000158 	.word	0x20000158

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>

08000bca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f93d 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f000 f80e 	bl	8000bfc <HAL_InitTick>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	e001      	b.n	8000bf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bec:	f7ff fe5e 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_InitTick+0x6c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d023      	beq.n	8000c58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c10:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <HAL_InitTick+0x70>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f949 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10f      	bne.n	8000c52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d809      	bhi.n	8000c4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 f913 	bl	8000e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_InitTick+0x74>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e007      	b.n	8000c5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e004      	b.n	8000c5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e001      	b.n	8000c5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000154 	.word	0x20000154

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000154 	.word	0x20000154

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	@ (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff3e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff31 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d008      	beq.n	8000f00 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e040      	b.n	8000f82 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 020e 	bic.w	r2, r2, #14
 8000f0e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f1e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0201 	bic.w	r2, r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f34:	f003 021c 	and.w	r2, r3, #28
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00c      	beq.n	8000f70 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f6e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d005      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2204      	movs	r2, #4
 8000faa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e047      	b.n	8001042 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 020e 	bic.w	r2, r2, #14
 8000fc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0201 	bic.w	r2, r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	f003 021c 	and.w	r2, r3, #28
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	2101      	movs	r1, #1
 8000ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ffe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001012:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001016:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001020:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	4798      	blx	r3
    }
  }
  return status;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	e166      	b.n	800132a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2101      	movs	r1, #1
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8158 	beq.w	8001324 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b01      	cmp	r3, #1
 800107e:	d005      	beq.n	800108c <HAL_GPIO_Init+0x40>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d130      	bne.n	80010ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010c2:	2201      	movs	r2, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	f003 0201 	and.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d017      	beq.n	800112a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d123      	bne.n	800117e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3208      	adds	r2, #8
 800113e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	6939      	ldr	r1, [r7, #16]
 800117a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0203 	and.w	r2, r3, #3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 80b2 	beq.w	8001324 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c0:	4b61      	ldr	r3, [pc, #388]	@ (8001348 <HAL_GPIO_Init+0x2fc>)
 80011c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c4:	4a60      	ldr	r2, [pc, #384]	@ (8001348 <HAL_GPIO_Init+0x2fc>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80011cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001348 <HAL_GPIO_Init+0x2fc>)
 80011ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011d8:	4a5c      	ldr	r2, [pc, #368]	@ (800134c <HAL_GPIO_Init+0x300>)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001202:	d02b      	beq.n	800125c <HAL_GPIO_Init+0x210>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a52      	ldr	r2, [pc, #328]	@ (8001350 <HAL_GPIO_Init+0x304>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d025      	beq.n	8001258 <HAL_GPIO_Init+0x20c>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a51      	ldr	r2, [pc, #324]	@ (8001354 <HAL_GPIO_Init+0x308>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d01f      	beq.n	8001254 <HAL_GPIO_Init+0x208>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a50      	ldr	r2, [pc, #320]	@ (8001358 <HAL_GPIO_Init+0x30c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d019      	beq.n	8001250 <HAL_GPIO_Init+0x204>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a4f      	ldr	r2, [pc, #316]	@ (800135c <HAL_GPIO_Init+0x310>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d013      	beq.n	800124c <HAL_GPIO_Init+0x200>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a4e      	ldr	r2, [pc, #312]	@ (8001360 <HAL_GPIO_Init+0x314>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d00d      	beq.n	8001248 <HAL_GPIO_Init+0x1fc>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a4d      	ldr	r2, [pc, #308]	@ (8001364 <HAL_GPIO_Init+0x318>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0x1f8>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a4c      	ldr	r2, [pc, #304]	@ (8001368 <HAL_GPIO_Init+0x31c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d101      	bne.n	8001240 <HAL_GPIO_Init+0x1f4>
 800123c:	2307      	movs	r3, #7
 800123e:	e00e      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001240:	2308      	movs	r3, #8
 8001242:	e00c      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001244:	2306      	movs	r3, #6
 8001246:	e00a      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001248:	2305      	movs	r3, #5
 800124a:	e008      	b.n	800125e <HAL_GPIO_Init+0x212>
 800124c:	2304      	movs	r3, #4
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001250:	2303      	movs	r3, #3
 8001252:	e004      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001254:	2302      	movs	r3, #2
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_GPIO_Init+0x212>
 800125c:	2300      	movs	r3, #0
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	f002 0203 	and.w	r2, r2, #3
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	4093      	lsls	r3, r2
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126e:	4937      	ldr	r1, [pc, #220]	@ (800134c <HAL_GPIO_Init+0x300>)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800127c:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <HAL_GPIO_Init+0x320>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a0:	4a32      	ldr	r2, [pc, #200]	@ (800136c <HAL_GPIO_Init+0x320>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012a6:	4b31      	ldr	r3, [pc, #196]	@ (800136c <HAL_GPIO_Init+0x320>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ca:	4a28      	ldr	r2, [pc, #160]	@ (800136c <HAL_GPIO_Init+0x320>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012d0:	4b26      	ldr	r3, [pc, #152]	@ (800136c <HAL_GPIO_Init+0x320>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f4:	4a1d      	ldr	r2, [pc, #116]	@ (800136c <HAL_GPIO_Init+0x320>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <HAL_GPIO_Init+0x320>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131e:	4a13      	ldr	r2, [pc, #76]	@ (800136c <HAL_GPIO_Init+0x320>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	f47f ae91 	bne.w	800105c <HAL_GPIO_Init+0x10>
  }
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000
 8001350:	48000400 	.word	0x48000400
 8001354:	48000800 	.word	0x48000800
 8001358:	48000c00 	.word	0x48000c00
 800135c:	48001000 	.word	0x48001000
 8001360:	48001400 	.word	0x48001400
 8001364:	48001800 	.word	0x48001800
 8001368:	48001c00 	.word	0x48001c00
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800138c:	e002      	b.n	8001394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4013      	ands	r3, r2
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	43d9      	mvns	r1, r3
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	400b      	ands	r3, r1
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <HAL_PWREx_GetVoltageRange+0x3c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e4:	d102      	bne.n	80013ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80013e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ea:	e00b      	b.n	8001404 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_PWREx_GetVoltageRange+0x3c>)
 80013ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013fa:	d102      	bne.n	8001402 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80013fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001400:	e000      	b.n	8001404 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001402:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000

08001414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d141      	bne.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001422:	4b4b      	ldr	r3, [pc, #300]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800142a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142e:	d131      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001430:	4b47      	ldr	r3, [pc, #284]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001436:	4a46      	ldr	r2, [pc, #280]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800143c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001440:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001448:	4a41      	ldr	r2, [pc, #260]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800144e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001450:	4b40      	ldr	r3, [pc, #256]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2232      	movs	r2, #50	@ 0x32
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	4a3f      	ldr	r2, [pc, #252]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001466:	e002      	b.n	800146e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3b01      	subs	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146e:	4b38      	ldr	r3, [pc, #224]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147a:	d102      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f2      	bne.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001482:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800148e:	d158      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e057      	b.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001494:	4b2e      	ldr	r3, [pc, #184]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149a:	4a2d      	ldr	r2, [pc, #180]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014a4:	e04d      	b.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ac:	d141      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ae:	4b28      	ldr	r3, [pc, #160]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ba:	d131      	bne.n	8001520 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014c2:	4a23      	ldr	r2, [pc, #140]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2232      	movs	r2, #50	@ 0x32
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f2:	e002      	b.n	80014fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001506:	d102      	bne.n	800150e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f2      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151a:	d112      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e011      	b.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001530:	e007      	b.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001540:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40007000 	.word	0x40007000
 8001554:	20000000 	.word	0x20000000
 8001558:	431bde83 	.word	0x431bde83

0800155c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	f000 bc68 	b.w	8001e40 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001570:	4b97      	ldr	r3, [pc, #604]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157a:	4b95      	ldr	r3, [pc, #596]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80e6 	beq.w	800175e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <HAL_RCC_OscConfig+0x4c>
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	2b0c      	cmp	r3, #12
 800159c:	f040 808d 	bne.w	80016ba <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f040 8089 	bne.w	80016ba <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a8:	4b89      	ldr	r3, [pc, #548]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_RCC_OscConfig+0x66>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	f000 bc3f 	b.w	8001e40 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015c6:	4b82      	ldr	r3, [pc, #520]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <HAL_RCC_OscConfig+0x80>
 80015d2:	4b7f      	ldr	r3, [pc, #508]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015da:	e005      	b.n	80015e8 <HAL_RCC_OscConfig+0x8c>
 80015dc:	4b7c      	ldr	r3, [pc, #496]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d224      	bcs.n	8001636 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fe59 	bl	80022a8 <RCC_SetFlashLatencyFromMSIRange>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	f000 bc1f 	b.w	8001e40 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001602:	4b73      	ldr	r3, [pc, #460]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a72      	ldr	r2, [pc, #456]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b70      	ldr	r3, [pc, #448]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	496d      	ldr	r1, [pc, #436]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001620:	4b6b      	ldr	r3, [pc, #428]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	4968      	ldr	r1, [pc, #416]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e025      	b.n	8001682 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001636:	4b66      	ldr	r3, [pc, #408]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a65      	ldr	r2, [pc, #404]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b63      	ldr	r3, [pc, #396]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	4960      	ldr	r1, [pc, #384]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001654:	4b5e      	ldr	r3, [pc, #376]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	495b      	ldr	r1, [pc, #364]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fe18 	bl	80022a8 <RCC_SetFlashLatencyFromMSIRange>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e3de      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001682:	f000 fd21 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8001686:	4602      	mov	r2, r0
 8001688:	4b51      	ldr	r3, [pc, #324]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	4950      	ldr	r1, [pc, #320]	@ (80017d4 <HAL_RCC_OscConfig+0x278>)
 8001694:	5ccb      	ldrb	r3, [r1, r3]
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	4a4e      	ldr	r2, [pc, #312]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 80016a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016a2:	4b4e      	ldr	r3, [pc, #312]	@ (80017dc <HAL_RCC_OscConfig+0x280>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff faa8 	bl	8000bfc <HAL_InitTick>
 80016ac:	4603      	mov	r3, r0
 80016ae:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d052      	beq.n	800175c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	e3c2      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d032      	beq.n	8001728 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c2:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a42      	ldr	r2, [pc, #264]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fae5 	bl	8000c9c <HAL_GetTick>
 80016d2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d6:	f7ff fae1 	bl	8000c9c <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e3ab      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e8:	4b39      	ldr	r3, [pc, #228]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f4:	4b36      	ldr	r3, [pc, #216]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a35      	ldr	r2, [pc, #212]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b33      	ldr	r3, [pc, #204]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170c:	4930      	ldr	r1, [pc, #192]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001712:	4b2f      	ldr	r3, [pc, #188]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	492b      	ldr	r1, [pc, #172]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
 8001726:	e01a      	b.n	800175e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001728:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a28      	ldr	r2, [pc, #160]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001734:	f7ff fab2 	bl	8000c9c <HAL_GetTick>
 8001738:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800173c:	f7ff faae 	bl	8000c9c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e378      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800174e:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x1e0>
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d073      	beq.n	8001852 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	2b08      	cmp	r3, #8
 800176e:	d005      	beq.n	800177c <HAL_RCC_OscConfig+0x220>
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d10e      	bne.n	8001794 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d10b      	bne.n	8001794 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d063      	beq.n	8001850 <HAL_RCC_OscConfig+0x2f4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d15f      	bne.n	8001850 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e355      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179c:	d106      	bne.n	80017ac <HAL_RCC_OscConfig+0x250>
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e025      	b.n	80017f8 <HAL_RCC_OscConfig+0x29c>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017b4:	d114      	bne.n	80017e0 <HAL_RCC_OscConfig+0x284>
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80017bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a02      	ldr	r2, [pc, #8]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e013      	b.n	80017f8 <HAL_RCC_OscConfig+0x29c>
 80017d0:	40021000 	.word	0x40021000
 80017d4:	0800578c 	.word	0x0800578c
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004
 80017e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a8e      	ldr	r2, [pc, #568]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a8b      	ldr	r2, [pc, #556]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fa4c 	bl	8000c9c <HAL_GetTick>
 8001804:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fa48 	bl	8000c9c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	@ 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e312      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181a:	4b81      	ldr	r3, [pc, #516]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x2ac>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fa38 	bl	8000c9c <HAL_GetTick>
 800182c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fa34 	bl	8000c9c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	@ 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e2fe      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001842:	4b77      	ldr	r3, [pc, #476]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x2d4>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d060      	beq.n	8001920 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x314>
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d119      	bne.n	800189e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d116      	bne.n	800189e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001870:	4b6b      	ldr	r3, [pc, #428]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_OscConfig+0x32c>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e2db      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b65      	ldr	r3, [pc, #404]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	4962      	ldr	r1, [pc, #392]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189c:	e040      	b.n	8001920 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d023      	beq.n	80018ee <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a5d      	ldr	r2, [pc, #372]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff f9f3 	bl	8000c9c <HAL_GetTick>
 80018b6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff f9ef 	bl	8000c9c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e2b9      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018cc:	4b54      	ldr	r3, [pc, #336]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b51      	ldr	r3, [pc, #324]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	494e      	ldr	r1, [pc, #312]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e018      	b.n	8001920 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff f9cf 	bl	8000c9c <HAL_GetTick>
 80018fe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff f9cb 	bl	8000c9c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e295      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001914:	4b42      	ldr	r3, [pc, #264]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 8082 	beq.w	8001a32 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d05f      	beq.n	80019f6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001936:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	429a      	cmp	r2, r3
 800194a:	d037      	beq.n	80019bc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e26d      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01b      	beq.n	80019a6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800196e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001974:	4a2a      	ldr	r2, [pc, #168]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800197e:	f7ff f98d 	bl	8000c9c <HAL_GetTick>
 8001982:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff f989 	bl	8000c9c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b11      	cmp	r3, #17
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e253      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ef      	bne.n	8001986 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80019a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ac:	f023 0210 	bic.w	r2, r3, #16
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	491a      	ldr	r1, [pc, #104]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019bc:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019c2:	4a17      	ldr	r2, [pc, #92]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f966 	bl	8000c9c <HAL_GetTick>
 80019d0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff f962 	bl	8000c9c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b11      	cmp	r3, #17
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e22c      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0ef      	beq.n	80019d4 <HAL_RCC_OscConfig+0x478>
 80019f4:	e01d      	b.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019fc:	4a08      	ldr	r2, [pc, #32]	@ (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff f949 	bl	8000c9c <HAL_GetTick>
 8001a0a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f945 	bl	8000c9c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b11      	cmp	r3, #17
 8001a1a:	d903      	bls.n	8001a24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e20f      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
 8001a20:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a24:	4b83      	ldr	r3, [pc, #524]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1ed      	bne.n	8001a0e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80bd 	beq.w	8001bba <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a46:	4b7b      	ldr	r3, [pc, #492]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10e      	bne.n	8001a70 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b78      	ldr	r3, [pc, #480]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a56:	4a77      	ldr	r2, [pc, #476]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a5e:	4b75      	ldr	r3, [pc, #468]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a70:	4b71      	ldr	r3, [pc, #452]	@ (8001c38 <HAL_RCC_OscConfig+0x6dc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d118      	bne.n	8001aae <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001c38 <HAL_RCC_OscConfig+0x6dc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a6d      	ldr	r2, [pc, #436]	@ (8001c38 <HAL_RCC_OscConfig+0x6dc>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a88:	f7ff f908 	bl	8000c9c <HAL_GetTick>
 8001a8c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a90:	f7ff f904 	bl	8000c9c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1ce      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa2:	4b65      	ldr	r3, [pc, #404]	@ (8001c38 <HAL_RCC_OscConfig+0x6dc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d02c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001aba:	4b5e      	ldr	r3, [pc, #376]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001acc:	4959      	ldr	r1, [pc, #356]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ae0:	4b54      	ldr	r3, [pc, #336]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae6:	4a53      	ldr	r2, [pc, #332]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001af0:	4b50      	ldr	r3, [pc, #320]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af6:	4a4f      	ldr	r2, [pc, #316]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b00:	e018      	b.n	8001b34 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b02:	4b4c      	ldr	r3, [pc, #304]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b08:	4a4a      	ldr	r2, [pc, #296]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b12:	e00f      	b.n	8001b34 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b14:	4b47      	ldr	r3, [pc, #284]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b1a:	4a46      	ldr	r2, [pc, #280]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b24:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2a:	4a42      	ldr	r2, [pc, #264]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d016      	beq.n	8001b6a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f8ae 	bl	8000c9c <HAL_GetTick>
 8001b40:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f8aa 	bl	8000c9c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e172      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5a:	4b36      	ldr	r3, [pc, #216]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ed      	beq.n	8001b44 <HAL_RCC_OscConfig+0x5e8>
 8001b68:	e01d      	b.n	8001ba6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f897 	bl	8000c9c <HAL_GetTick>
 8001b6e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff f893 	bl	8000c9c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e15b      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b88:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ed      	bne.n	8001b72 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001b96:	4b27      	ldr	r3, [pc, #156]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9c:	4a25      	ldr	r2, [pc, #148]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d105      	bne.n	8001bba <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bae:	4b21      	ldr	r3, [pc, #132]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	4a20      	ldr	r2, [pc, #128]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001bb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d041      	beq.n	8001c4a <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d01c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bce:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bd4:	4a17      	ldr	r2, [pc, #92]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7ff f85d 	bl	8000c9c <HAL_GetTick>
 8001be2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be6:	f7ff f859 	bl	8000c9c <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e123      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0ef      	beq.n	8001be6 <HAL_RCC_OscConfig+0x68a>
 8001c06:	e020      	b.n	8001c4a <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c08:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c0e:	4a09      	ldr	r2, [pc, #36]	@ (8001c34 <HAL_RCC_OscConfig+0x6d8>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff f840 	bl	8000c9c <HAL_GetTick>
 8001c1c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c1e:	e00d      	b.n	8001c3c <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c20:	f7ff f83c 	bl	8000c9c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d906      	bls.n	8001c3c <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e106      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c3c:	4b82      	ldr	r3, [pc, #520]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ea      	bne.n	8001c20 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80f5 	beq.w	8001e3e <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	f040 80cb 	bne.w	8001df4 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c5e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0203 	and.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d12c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d123      	bne.n	8001ccc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d11b      	bne.n	8001ccc <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d113      	bne.n	8001ccc <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d109      	bne.n	8001ccc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d06d      	beq.n	8001da8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d068      	beq.n	8001da4 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cde:	4b5a      	ldr	r3, [pc, #360]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0a8      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cee:	4b56      	ldr	r3, [pc, #344]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a55      	ldr	r2, [pc, #340]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001cf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cf8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cfa:	f7fe ffcf 	bl	8000c9c <HAL_GetTick>
 8001cfe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d02:	f7fe ffcb 	bl	8000c9c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e095      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	4b4c      	ldr	r3, [pc, #304]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d20:	4b49      	ldr	r3, [pc, #292]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4b49      	ldr	r3, [pc, #292]	@ (8001e4c <HAL_RCC_OscConfig+0x8f0>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d30:	3a01      	subs	r2, #1
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	4311      	orrs	r1, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d3a:	0212      	lsls	r2, r2, #8
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d42:	0852      	lsrs	r2, r2, #1
 8001d44:	3a01      	subs	r2, #1
 8001d46:	0552      	lsls	r2, r2, #21
 8001d48:	4311      	orrs	r1, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d4e:	0852      	lsrs	r2, r2, #1
 8001d50:	3a01      	subs	r2, #1
 8001d52:	0652      	lsls	r2, r2, #25
 8001d54:	4311      	orrs	r1, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d5a:	06d2      	lsls	r2, r2, #27
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	493a      	ldr	r1, [pc, #232]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d64:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a37      	ldr	r2, [pc, #220]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d70:	4b35      	ldr	r3, [pc, #212]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4a34      	ldr	r2, [pc, #208]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d7c:	f7fe ff8e 	bl	8000c9c <HAL_GetTick>
 8001d80:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7fe ff8a 	bl	8000c9c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e054      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d96:	4b2c      	ldr	r3, [pc, #176]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da2:	e04c      	b.n	8001e3e <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e04b      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da8:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d144      	bne.n	8001e3e <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001db4:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a23      	ldr	r2, [pc, #140]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc0:	4b21      	ldr	r3, [pc, #132]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a20      	ldr	r2, [pc, #128]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dcc:	f7fe ff66 	bl	8000c9c <HAL_GetTick>
 8001dd0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe ff62 	bl	8000c9c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e02c      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x878>
 8001df2:	e024      	b.n	8001e3e <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d01f      	beq.n	8001e3a <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001e00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7fe ff49 	bl	8000c9c <HAL_GetTick>
 8001e0a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7fe ff45 	bl	8000c9c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e00f      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e20:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	4905      	ldr	r1, [pc, #20]	@ (8001e48 <HAL_RCC_OscConfig+0x8ec>)
 8001e32:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <HAL_RCC_OscConfig+0x8f4>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
 8001e38:	e001      	b.n	8001e3e <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3728      	adds	r7, #40	@ 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	019d800c 	.word	0x019d800c
 8001e50:	feeefffc 	.word	0xfeeefffc

08001e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e11d      	b.n	80020a8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b90      	ldr	r3, [pc, #576]	@ (80020b0 <HAL_RCC_ClockConfig+0x25c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d910      	bls.n	8001e9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80020b0 <HAL_RCC_ClockConfig+0x25c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 020f 	bic.w	r2, r3, #15
 8001e82:	498b      	ldr	r1, [pc, #556]	@ (80020b0 <HAL_RCC_ClockConfig+0x25c>)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b89      	ldr	r3, [pc, #548]	@ (80020b0 <HAL_RCC_ClockConfig+0x25c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e105      	b.n	80020a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d010      	beq.n	8001eca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	4b81      	ldr	r3, [pc, #516]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d908      	bls.n	8001eca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	497b      	ldr	r1, [pc, #492]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d079      	beq.n	8001fca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d11e      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4b75      	ldr	r3, [pc, #468]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e0dc      	b.n	80020a8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001eee:	f000 fa35 	bl	800235c <RCC_GetSysClockFreqFromPLLSource>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a70      	ldr	r2, [pc, #448]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d946      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001efa:	4b6e      	ldr	r3, [pc, #440]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d140      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f06:	4b6b      	ldr	r3, [pc, #428]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f0e:	4a69      	ldr	r2, [pc, #420]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f16:	2380      	movs	r3, #128	@ 0x80
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e035      	b.n	8001f88 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f24:	4b63      	ldr	r3, [pc, #396]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d115      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b9      	b.n	80020a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0ad      	b.n	80020a8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f4c:	4b59      	ldr	r3, [pc, #356]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0a5      	b.n	80020a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f5c:	f000 f8b4 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4a55      	ldr	r2, [pc, #340]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d90f      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f68:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f74:	4b4f      	ldr	r3, [pc, #316]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f7c:	4a4d      	ldr	r2, [pc, #308]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f82:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f84:	2380      	movs	r3, #128	@ 0x80
 8001f86:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f88:	4b4a      	ldr	r3, [pc, #296]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 0203 	bic.w	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4947      	ldr	r1, [pc, #284]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9a:	f7fe fe7f 	bl	8000c9c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa2:	f7fe fe7b 	bl	8000c9c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e077      	b.n	80020a8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 020c 	and.w	r2, r3, #12
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d1eb      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b80      	cmp	r3, #128	@ 0x80
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fd0:	4b38      	ldr	r3, [pc, #224]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a37      	ldr	r2, [pc, #220]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fda:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d010      	beq.n	800200a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	4b31      	ldr	r3, [pc, #196]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d208      	bcs.n	800200a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	492b      	ldr	r1, [pc, #172]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200a:	4b29      	ldr	r3, [pc, #164]	@ (80020b0 <HAL_RCC_ClockConfig+0x25c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d210      	bcs.n	800203a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002018:	4b25      	ldr	r3, [pc, #148]	@ (80020b0 <HAL_RCC_ClockConfig+0x25c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 020f 	bic.w	r2, r3, #15
 8002020:	4923      	ldr	r1, [pc, #140]	@ (80020b0 <HAL_RCC_ClockConfig+0x25c>)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002028:	4b21      	ldr	r3, [pc, #132]	@ (80020b0 <HAL_RCC_ClockConfig+0x25c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e036      	b.n	80020a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002046:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	4918      	ldr	r1, [pc, #96]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002064:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4910      	ldr	r1, [pc, #64]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002078:	f000 f826 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	490c      	ldr	r1, [pc, #48]	@ (80020bc <HAL_RCC_ClockConfig+0x268>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_RCC_ClockConfig+0x26c>)
 8002096:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002098:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_RCC_ClockConfig+0x270>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fdad 	bl	8000bfc <HAL_InitTick>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	04c4b400 	.word	0x04c4b400
 80020bc:	0800578c 	.word	0x0800578c
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d6:	4b3e      	ldr	r3, [pc, #248]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e0:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x34>
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d121      	bne.n	800213a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d11e      	bne.n	800213a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020fc:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002108:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800210a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e005      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002124:	4a2b      	ldr	r2, [pc, #172]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10d      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d102      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002140:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	e004      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d101      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800214c:	4b23      	ldr	r3, [pc, #140]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x114>)
 800214e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b0c      	cmp	r3, #12
 8002154:	d134      	bne.n	80021c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002156:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0xa6>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d003      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0xac>
 800216c:	e005      	b.n	800217a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800216e:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002170:	617b      	str	r3, [r7, #20]
      break;
 8002172:	e005      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002176:	617b      	str	r3, [r7, #20]
      break;
 8002178:	e002      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	617b      	str	r3, [r7, #20]
      break;
 800217e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3301      	adds	r3, #1
 800218c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	fb03 f202 	mul.w	r2, r3, r2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	0e5b      	lsrs	r3, r3, #25
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	3301      	adds	r3, #1
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021c0:	69bb      	ldr	r3, [r7, #24]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3724      	adds	r7, #36	@ 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	080057a4 	.word	0x080057a4
 80021d8:	00f42400 	.word	0x00f42400
 80021dc:	007a1200 	.word	0x007a1200

080021e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e4:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000000 	.word	0x20000000

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021fc:	f7ff fff0 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4904      	ldr	r1, [pc, #16]	@ (8002220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	0800579c 	.word	0x0800579c

08002224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002228:	f7ff ffda 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0adb      	lsrs	r3, r3, #11
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4904      	ldr	r1, [pc, #16]	@ (800224c <HAL_RCC_GetPCLK2Freq+0x28>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	0800579c 	.word	0x0800579c

08002250 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_RCC_EnableCSS+0x1c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a04      	ldr	r2, [pc, #16]	@ (800226c <HAL_RCC_EnableCSS+0x1c>)
 800225a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000

08002270 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002274:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002280:	d105      	bne.n	800228e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002282:	f000 f809 	bl	8002298 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002286:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002288:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800228c:	621a      	str	r2, [r3, #32]
  }
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022b4:	4b27      	ldr	r3, [pc, #156]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022c0:	f7ff f888 	bl	80013d4 <HAL_PWREx_GetVoltageRange>
 80022c4:	6178      	str	r0, [r7, #20]
 80022c6:	e014      	b.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	4a21      	ldr	r2, [pc, #132]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022e0:	f7ff f878 	bl	80013d4 <HAL_PWREx_GetVoltageRange>
 80022e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022f8:	d10b      	bne.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b80      	cmp	r3, #128	@ 0x80
 80022fe:	d913      	bls.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2ba0      	cmp	r3, #160	@ 0xa0
 8002304:	d902      	bls.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002306:	2302      	movs	r3, #2
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e00d      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800230c:	2301      	movs	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e00a      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b7f      	cmp	r3, #127	@ 0x7f
 8002316:	d902      	bls.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e004      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b70      	cmp	r3, #112	@ 0x70
 8002322:	d101      	bne.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002324:	2301      	movs	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 020f 	bic.w	r2, r3, #15
 8002330:	4909      	ldr	r1, [pc, #36]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002338:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	429a      	cmp	r2, r3
 8002344:	d001      	beq.n	800234a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	40022000 	.word	0x40022000

0800235c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002362:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d00b      	beq.n	800238a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d825      	bhi.n	80023c4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d008      	beq.n	8002390 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d11f      	bne.n	80023c4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002384:	4b25      	ldr	r3, [pc, #148]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002386:	613b      	str	r3, [r7, #16]
    break;
 8002388:	e01f      	b.n	80023ca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800238a:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800238c:	613b      	str	r3, [r7, #16]
    break;
 800238e:	e01c      	b.n	80023ca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002390:	4b21      	ldr	r3, [pc, #132]	@ (8002418 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800239c:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800239e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e005      	b.n	80023b8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80023b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002424 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	613b      	str	r3, [r7, #16]
    break;
 80023c2:	e002      	b.n	80023ca <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
    break;
 80023c8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	3301      	adds	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	fb03 f202 	mul.w	r2, r3, r2
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f0:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0e5b      	lsrs	r3, r3, #25
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	3301      	adds	r3, #1
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800240a:	683b      	ldr	r3, [r7, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40021000 	.word	0x40021000
 800241c:	00f42400 	.word	0x00f42400
 8002420:	007a1200 	.word	0x007a1200
 8002424:	080057a4 	.word	0x080057a4

08002428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002430:	2300      	movs	r3, #0
 8002432:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002434:	2300      	movs	r3, #0
 8002436:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002440:	2b00      	cmp	r3, #0
 8002442:	d040      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002448:	2b80      	cmp	r3, #128	@ 0x80
 800244a:	d02a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800244c:	2b80      	cmp	r3, #128	@ 0x80
 800244e:	d825      	bhi.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002450:	2b60      	cmp	r3, #96	@ 0x60
 8002452:	d026      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002454:	2b60      	cmp	r3, #96	@ 0x60
 8002456:	d821      	bhi.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002458:	2b40      	cmp	r3, #64	@ 0x40
 800245a:	d006      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800245c:	2b40      	cmp	r3, #64	@ 0x40
 800245e:	d81d      	bhi.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002464:	2b20      	cmp	r3, #32
 8002466:	d010      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002468:	e018      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800246a:	4b89      	ldr	r3, [pc, #548]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a88      	ldr	r2, [pc, #544]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002474:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002476:	e015      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fb3e 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002488:	e00c      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3320      	adds	r3, #32
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fc29 	bl	8002ce8 <RCCEx_PLLSAI2_Config>
 8002496:	4603      	mov	r3, r0
 8002498:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800249a:	e003      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	74fb      	strb	r3, [r7, #19]
      break;
 80024a0:	e000      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80024a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10b      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024aa:	4b79      	ldr	r3, [pc, #484]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024b0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b8:	4975      	ldr	r1, [pc, #468]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80024c0:	e001      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d047      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024da:	d030      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e0:	d82a      	bhi.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024e6:	d02a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024ec:	d824      	bhi.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024f2:	d008      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80024f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024f8:	d81e      	bhi.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80024fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002502:	d010      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002504:	e018      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002506:	4b62      	ldr	r3, [pc, #392]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4a61      	ldr	r2, [pc, #388]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002510:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002512:	e015      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f000 faf0 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002524:	e00c      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3320      	adds	r3, #32
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fbdb 	bl	8002ce8 <RCCEx_PLLSAI2_Config>
 8002532:	4603      	mov	r3, r0
 8002534:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002536:	e003      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	74fb      	strb	r3, [r7, #19]
      break;
 800253c:	e000      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800253e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10b      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002546:	4b52      	ldr	r3, [pc, #328]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002548:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800254c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002554:	494e      	ldr	r1, [pc, #312]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800255c:	e001      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 809f 	beq.w	80026ae <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002574:	4b46      	ldr	r3, [pc, #280]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	4a40      	ldr	r2, [pc, #256]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002594:	6593      	str	r3, [r2, #88]	@ 0x58
 8002596:	4b3e      	ldr	r3, [pc, #248]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a3a      	ldr	r2, [pc, #232]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025b2:	f7fe fb73 	bl	8000c9c <HAL_GetTick>
 80025b6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025b8:	e009      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ba:	f7fe fb6f 	bl	8000c9c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d902      	bls.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	74fb      	strb	r3, [r7, #19]
        break;
 80025cc:	e005      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ce:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0ef      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d15b      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ea:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01f      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d019      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025fe:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002608:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800260a:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002610:	4a1f      	ldr	r2, [pc, #124]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002616:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800261a:	4b1d      	ldr	r3, [pc, #116]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002620:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002626:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800262a:	4a19      	ldr	r2, [pc, #100]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d016      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fb2e 	bl	8000c9c <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002642:	e00b      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7fe fb2a 	bl	8000c9c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d902      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	74fb      	strb	r3, [r7, #19]
            break;
 800265a:	e006      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0ec      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10c      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002670:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002676:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002680:	4903      	ldr	r1, [pc, #12]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002688:	e008      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	74bb      	strb	r3, [r7, #18]
 800268e:	e005      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269c:	7c7b      	ldrb	r3, [r7, #17]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4ba0      	ldr	r3, [pc, #640]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a6:	4a9f      	ldr	r2, [pc, #636]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ba:	4b9a      	ldr	r3, [pc, #616]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c0:	f023 0203 	bic.w	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	4996      	ldr	r1, [pc, #600]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026dc:	4b91      	ldr	r3, [pc, #580]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	f023 020c 	bic.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	498e      	ldr	r1, [pc, #568]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026fe:	4b89      	ldr	r3, [pc, #548]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002704:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	4985      	ldr	r1, [pc, #532]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002720:	4b80      	ldr	r3, [pc, #512]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272e:	497d      	ldr	r1, [pc, #500]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002742:	4b78      	ldr	r3, [pc, #480]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002750:	4974      	ldr	r1, [pc, #464]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002764:	4b6f      	ldr	r3, [pc, #444]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002772:	496c      	ldr	r1, [pc, #432]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002786:	4b67      	ldr	r3, [pc, #412]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002794:	4963      	ldr	r1, [pc, #396]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027b6:	495b      	ldr	r1, [pc, #364]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ca:	4b56      	ldr	r3, [pc, #344]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	4952      	ldr	r1, [pc, #328]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	494a      	ldr	r1, [pc, #296]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800280e:	4b45      	ldr	r3, [pc, #276]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002814:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281c:	4941      	ldr	r1, [pc, #260]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002830:	4b3c      	ldr	r3, [pc, #240]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002832:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002836:	f023 0203 	bic.w	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283e:	4939      	ldr	r1, [pc, #228]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d028      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002852:	4b34      	ldr	r3, [pc, #208]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002858:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002860:	4930      	ldr	r1, [pc, #192]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002870:	d106      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002872:	4b2c      	ldr	r3, [pc, #176]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	4a2b      	ldr	r2, [pc, #172]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002878:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800287c:	60d3      	str	r3, [r2, #12]
 800287e:	e011      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	2101      	movs	r1, #1
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f935 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 8002896:	4603      	mov	r3, r0
 8002898:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800289a:	7cfb      	ldrb	r3, [r7, #19]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d04d      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028b8:	d108      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80028ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028c0:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80028ca:	e012      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028d2:	4a14      	ldr	r2, [pc, #80]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028d8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028ea:	490e      	ldr	r1, [pc, #56]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028fa:	d106      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a08      	ldr	r2, [pc, #32]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002906:	60d3      	str	r3, [r2, #12]
 8002908:	e020      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800290e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002912:	d109      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002914:	4b03      	ldr	r3, [pc, #12]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a02      	ldr	r2, [pc, #8]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291e:	60d3      	str	r3, [r2, #12]
 8002920:	e014      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800292c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002930:	d10c      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	2101      	movs	r1, #1
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f8e1 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d028      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002958:	4b68      	ldr	r3, [pc, #416]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002966:	4965      	ldr	r1, [pc, #404]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002976:	d106      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002978:	4b60      	ldr	r3, [pc, #384]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a5f      	ldr	r2, [pc, #380]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800297e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002982:	60d3      	str	r3, [r2, #12]
 8002984:	e011      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800298a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800298e:	d10c      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	2101      	movs	r1, #1
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f8b2 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01e      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b6:	4b51      	ldr	r3, [pc, #324]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029c6:	494d      	ldr	r1, [pc, #308]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	2102      	movs	r1, #2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 f88d 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00b      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a00:	4b3e      	ldr	r3, [pc, #248]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a06:	f023 0204 	bic.w	r2, r3, #4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a10:	493a      	ldr	r1, [pc, #232]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a24:	4b35      	ldr	r3, [pc, #212]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a2a:	f023 0218 	bic.w	r2, r3, #24
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a34:	4931      	ldr	r1, [pc, #196]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d035      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a48:	4b2c      	ldr	r3, [pc, #176]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a54:	f7fe f922 	bl	8000c9c <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a5a:	e009      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a5c:	f7fe f91e 	bl	8000c9c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a6e:	e005      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a70:	4b22      	ldr	r3, [pc, #136]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ef      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d113      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8002a82:	4b1e      	ldr	r3, [pc, #120]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a92:	491a      	ldr	r1, [pc, #104]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3320      	adds	r3, #32
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f921 	bl	8002ce8 <RCCEx_PLLSAI2_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d017      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad0:	490a      	ldr	r1, [pc, #40]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002af0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000

08002b00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b0e:	4b72      	ldr	r3, [pc, #456]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00e      	beq.n	8002b38 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b1a:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0203 	and.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d103      	bne.n	8002b32 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d142      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	e03f      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d018      	beq.n	8002b72 <RCCEx_PLLSAI1_Config+0x72>
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d825      	bhi.n	8002b90 <RCCEx_PLLSAI1_Config+0x90>
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d002      	beq.n	8002b4e <RCCEx_PLLSAI1_Config+0x4e>
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d009      	beq.n	8002b60 <RCCEx_PLLSAI1_Config+0x60>
 8002b4c:	e020      	b.n	8002b90 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b4e:	4b62      	ldr	r3, [pc, #392]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d11d      	bne.n	8002b96 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5e:	e01a      	b.n	8002b96 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b60:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d116      	bne.n	8002b9a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b70:	e013      	b.n	8002b9a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b72:	4b59      	ldr	r3, [pc, #356]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b7e:	4b56      	ldr	r3, [pc, #344]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b8e:	e006      	b.n	8002b9e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e004      	b.n	8002ba0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002b96:	bf00      	nop
 8002b98:	e002      	b.n	8002ba0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002b9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d108      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002ba6:	4b4c      	ldr	r3, [pc, #304]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4949      	ldr	r1, [pc, #292]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 8086 	bne.w	8002ccc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bc0:	4b45      	ldr	r3, [pc, #276]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a44      	ldr	r2, [pc, #272]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bcc:	f7fe f866 	bl	8000c9c <HAL_GetTick>
 8002bd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bd2:	e009      	b.n	8002be8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bd4:	f7fe f862 	bl	8000c9c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d902      	bls.n	8002be8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	73fb      	strb	r3, [r7, #15]
        break;
 8002be6:	e005      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002be8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ef      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d168      	bne.n	8002ccc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d113      	bne.n	8002c28 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c00:	4b35      	ldr	r3, [pc, #212]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	4b35      	ldr	r3, [pc, #212]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6892      	ldr	r2, [r2, #8]
 8002c0c:	0211      	lsls	r1, r2, #8
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68d2      	ldr	r2, [r2, #12]
 8002c12:	06d2      	lsls	r2, r2, #27
 8002c14:	4311      	orrs	r1, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6852      	ldr	r2, [r2, #4]
 8002c1a:	3a01      	subs	r2, #1
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	492d      	ldr	r1, [pc, #180]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	610b      	str	r3, [r1, #16]
 8002c26:	e02d      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d115      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6892      	ldr	r2, [r2, #8]
 8002c3a:	0211      	lsls	r1, r2, #8
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6912      	ldr	r2, [r2, #16]
 8002c40:	0852      	lsrs	r2, r2, #1
 8002c42:	3a01      	subs	r2, #1
 8002c44:	0552      	lsls	r2, r2, #21
 8002c46:	4311      	orrs	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6852      	ldr	r2, [r2, #4]
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	430a      	orrs	r2, r1
 8002c52:	4921      	ldr	r1, [pc, #132]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	610b      	str	r3, [r1, #16]
 8002c58:	e014      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6892      	ldr	r2, [r2, #8]
 8002c66:	0211      	lsls	r1, r2, #8
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6952      	ldr	r2, [r2, #20]
 8002c6c:	0852      	lsrs	r2, r2, #1
 8002c6e:	3a01      	subs	r2, #1
 8002c70:	0652      	lsls	r2, r2, #25
 8002c72:	4311      	orrs	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6852      	ldr	r2, [r2, #4]
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	4916      	ldr	r1, [pc, #88]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c84:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a13      	ldr	r2, [pc, #76]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7fe f804 	bl	8000c9c <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c96:	e009      	b.n	8002cac <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c98:	f7fe f800 	bl	8000c9c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	73fb      	strb	r3, [r7, #15]
          break;
 8002caa:	e005      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ef      	beq.n	8002c98 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4904      	ldr	r1, [pc, #16]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	07ff800f 	.word	0x07ff800f
 8002ce0:	ff9f800f 	.word	0xff9f800f
 8002ce4:	f9ff800f 	.word	0xf9ff800f

08002ce8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cf6:	4b72      	ldr	r3, [pc, #456]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00e      	beq.n	8002d20 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d02:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0203 	and.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d103      	bne.n	8002d1a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
       ||
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d142      	bne.n	8002da0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
 8002d1e:	e03f      	b.n	8002da0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d018      	beq.n	8002d5a <RCCEx_PLLSAI2_Config+0x72>
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d825      	bhi.n	8002d78 <RCCEx_PLLSAI2_Config+0x90>
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d002      	beq.n	8002d36 <RCCEx_PLLSAI2_Config+0x4e>
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d009      	beq.n	8002d48 <RCCEx_PLLSAI2_Config+0x60>
 8002d34:	e020      	b.n	8002d78 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d36:	4b62      	ldr	r3, [pc, #392]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d11d      	bne.n	8002d7e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d46:	e01a      	b.n	8002d7e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d48:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d116      	bne.n	8002d82 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d58:	e013      	b.n	8002d82 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d5a:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10f      	bne.n	8002d86 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d66:	4b56      	ldr	r3, [pc, #344]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d76:	e006      	b.n	8002d86 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7c:	e004      	b.n	8002d88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e002      	b.n	8002d88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d82:	bf00      	nop
 8002d84:	e000      	b.n	8002d88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d86:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d108      	bne.n	8002da0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4949      	ldr	r1, [pc, #292]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 8086 	bne.w	8002eb4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002da8:	4b45      	ldr	r3, [pc, #276]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a44      	ldr	r2, [pc, #272]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db4:	f7fd ff72 	bl	8000c9c <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dba:	e009      	b.n	8002dd0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dbc:	f7fd ff6e 	bl	8000c9c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d902      	bls.n	8002dd0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	73fb      	strb	r3, [r7, #15]
        break;
 8002dce:	e005      	b.n	8002ddc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ef      	bne.n	8002dbc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d168      	bne.n	8002eb4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d113      	bne.n	8002e10 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002de8:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	4b35      	ldr	r3, [pc, #212]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	0211      	lsls	r1, r2, #8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	06d2      	lsls	r2, r2, #27
 8002dfc:	4311      	orrs	r1, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6852      	ldr	r2, [r2, #4]
 8002e02:	3a01      	subs	r2, #1
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	430a      	orrs	r2, r1
 8002e08:	492d      	ldr	r1, [pc, #180]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	614b      	str	r3, [r1, #20]
 8002e0e:	e02d      	b.n	8002e6c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d115      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e16:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6892      	ldr	r2, [r2, #8]
 8002e22:	0211      	lsls	r1, r2, #8
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6912      	ldr	r2, [r2, #16]
 8002e28:	0852      	lsrs	r2, r2, #1
 8002e2a:	3a01      	subs	r2, #1
 8002e2c:	0552      	lsls	r2, r2, #21
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6852      	ldr	r2, [r2, #4]
 8002e34:	3a01      	subs	r2, #1
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	4921      	ldr	r1, [pc, #132]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	614b      	str	r3, [r1, #20]
 8002e40:	e014      	b.n	8002e6c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e42:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	4b21      	ldr	r3, [pc, #132]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1e4>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6892      	ldr	r2, [r2, #8]
 8002e4e:	0211      	lsls	r1, r2, #8
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6952      	ldr	r2, [r2, #20]
 8002e54:	0852      	lsrs	r2, r2, #1
 8002e56:	3a01      	subs	r2, #1
 8002e58:	0652      	lsls	r2, r2, #25
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6852      	ldr	r2, [r2, #4]
 8002e60:	3a01      	subs	r2, #1
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	430a      	orrs	r2, r1
 8002e66:	4916      	ldr	r1, [pc, #88]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a13      	ldr	r2, [pc, #76]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fd ff10 	bl	8000c9c <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e7e:	e009      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e80:	f7fd ff0c 	bl	8000c9c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d902      	bls.n	8002e94 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	73fb      	strb	r3, [r7, #15]
          break;
 8002e92:	e005      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ef      	beq.n	8002e80 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ea6:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	4904      	ldr	r1, [pc, #16]	@ (8002ec0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	07ff800f 	.word	0x07ff800f
 8002ec8:	ff9f800f 	.word	0xff9f800f
 8002ecc:	f9ff800f 	.word	0xf9ff800f

08002ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e042      	b.n	8002f68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7fd fcfd 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2224      	movs	r2, #36	@ 0x24
 8002efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f001 f82e 	bl	8003f7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fd2f 	bl	8003984 <UART_SetConfig>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e01b      	b.n	8002f68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f001 f8ad 	bl	80040c0 <UART_CheckIdleState>
 8002f66:	4603      	mov	r3, r0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	@ 0x28
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	f040 80b5 	bne.w	80030f6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_UART_Receive+0x28>
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0ad      	b.n	80030f8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2222      	movs	r2, #34	@ 0x22
 8002fa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb2:	f7fd fe73 	bl	8000c9c <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_UART_Receive+0x80>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <HAL_UART_Receive+0x76>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002fe0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002fe4:	e02d      	b.n	8003042 <HAL_UART_Receive+0xd2>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	22ff      	movs	r2, #255	@ 0xff
 8002fea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002fee:	e028      	b.n	8003042 <HAL_UART_Receive+0xd2>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_UART_Receive+0xa4>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <HAL_UART_Receive+0x9a>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	22ff      	movs	r2, #255	@ 0xff
 8003004:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003008:	e01b      	b.n	8003042 <HAL_UART_Receive+0xd2>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	227f      	movs	r2, #127	@ 0x7f
 800300e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003012:	e016      	b.n	8003042 <HAL_UART_Receive+0xd2>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800301c:	d10d      	bne.n	800303a <HAL_UART_Receive+0xca>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <HAL_UART_Receive+0xc0>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	227f      	movs	r2, #127	@ 0x7f
 800302a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800302e:	e008      	b.n	8003042 <HAL_UART_Receive+0xd2>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	223f      	movs	r2, #63	@ 0x3f
 8003034:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003038:	e003      	b.n	8003042 <HAL_UART_Receive+0xd2>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003048:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003052:	d108      	bne.n	8003066 <HAL_UART_Receive+0xf6>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d104      	bne.n	8003066 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	e003      	b.n	800306e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800306e:	e036      	b.n	80030de <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2200      	movs	r2, #0
 8003078:	2120      	movs	r1, #32
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f001 f8ca 	bl	8004214 <UART_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e032      	b.n	80030f8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10c      	bne.n	80030b2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	b29a      	uxth	r2, r3
 80030a0:	8a7b      	ldrh	r3, [r7, #18]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	3302      	adds	r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	e00c      	b.n	80030cc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	8a7b      	ldrh	r3, [r7, #18]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	4013      	ands	r3, r2
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3301      	adds	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1c2      	bne.n	8003070 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003100:	b480      	push	{r7}
 8003102:	b091      	sub	sp, #68	@ 0x44
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003114:	2b20      	cmp	r3, #32
 8003116:	d178      	bne.n	800320a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_UART_Transmit_IT+0x24>
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e071      	b.n	800320c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	88fa      	ldrh	r2, [r7, #6]
 800313a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2221      	movs	r2, #33	@ 0x21
 8003150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800315c:	d12a      	bne.n	80031b4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003166:	d107      	bne.n	8003178 <HAL_UART_Transmit_IT+0x78>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d103      	bne.n	8003178 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4a29      	ldr	r2, [pc, #164]	@ (8003218 <HAL_UART_Transmit_IT+0x118>)
 8003174:	679a      	str	r2, [r3, #120]	@ 0x78
 8003176:	e002      	b.n	800317e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a28      	ldr	r2, [pc, #160]	@ (800321c <HAL_UART_Transmit_IT+0x11c>)
 800317c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3308      	adds	r3, #8
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003194:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3308      	adds	r3, #8
 800319c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800319e:	637a      	str	r2, [r7, #52]	@ 0x34
 80031a0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031a6:	e841 2300 	strex	r3, r2, [r1]
 80031aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1e5      	bne.n	800317e <HAL_UART_Transmit_IT+0x7e>
 80031b2:	e028      	b.n	8003206 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031bc:	d107      	bne.n	80031ce <HAL_UART_Transmit_IT+0xce>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a15      	ldr	r2, [pc, #84]	@ (8003220 <HAL_UART_Transmit_IT+0x120>)
 80031ca:	679a      	str	r2, [r3, #120]	@ 0x78
 80031cc:	e002      	b.n	80031d4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a14      	ldr	r2, [pc, #80]	@ (8003224 <HAL_UART_Transmit_IT+0x124>)
 80031d2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	613b      	str	r3, [r7, #16]
   return(result);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	69f9      	ldr	r1, [r7, #28]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e6      	bne.n	80031d4 <HAL_UART_Transmit_IT+0xd4>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3744      	adds	r7, #68	@ 0x44
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	08004887 	.word	0x08004887
 800321c:	080047a7 	.word	0x080047a7
 8003220:	080046e5 	.word	0x080046e5
 8003224:	0800462d 	.word	0x0800462d

08003228 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	@ 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800323c:	2b20      	cmp	r3, #32
 800323e:	d137      	bne.n	80032b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_UART_Receive_IT+0x24>
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e030      	b.n	80032b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a18      	ldr	r2, [pc, #96]	@ (80032bc <HAL_UART_Receive_IT+0x94>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d01f      	beq.n	80032a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d018      	beq.n	80032a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	613b      	str	r3, [r7, #16]
   return(result);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	623b      	str	r3, [r7, #32]
 800328e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003290:	69f9      	ldr	r1, [r7, #28]
 8003292:	6a3a      	ldr	r2, [r7, #32]
 8003294:	e841 2300 	strex	r3, r2, [r1]
 8003298:	61bb      	str	r3, [r7, #24]
   return(result);
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1e6      	bne.n	800326e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f001 f822 	bl	80042f0 <UART_Start_Receive_IT>
 80032ac:	4603      	mov	r3, r0
 80032ae:	e000      	b.n	80032b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3728      	adds	r7, #40	@ 0x28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40008000 	.word	0x40008000

080032c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b0ba      	sub	sp, #232	@ 0xe8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80032ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80032ee:	4013      	ands	r3, r2
 80032f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80032f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11b      	bne.n	8003334 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80032fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d015      	beq.n	8003334 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8300 	beq.w	800392a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	4798      	blx	r3
      }
      return;
 8003332:	e2fa      	b.n	800392a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8123 	beq.w	8003584 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800333e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003342:	4b8d      	ldr	r3, [pc, #564]	@ (8003578 <HAL_UART_IRQHandler+0x2b8>)
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800334a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800334e:	4b8b      	ldr	r3, [pc, #556]	@ (800357c <HAL_UART_IRQHandler+0x2bc>)
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8116 	beq.w	8003584 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d011      	beq.n	8003388 <HAL_UART_IRQHandler+0xc8>
 8003364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2201      	movs	r2, #1
 8003376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d011      	beq.n	80033b8 <HAL_UART_IRQHandler+0xf8>
 8003394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00b      	beq.n	80033b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2202      	movs	r2, #2
 80033a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d011      	beq.n	80033e8 <HAL_UART_IRQHandler+0x128>
 80033c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00b      	beq.n	80033e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2204      	movs	r2, #4
 80033d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	f043 0202 	orr.w	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d017      	beq.n	8003424 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80033f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003400:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003404:	4b5c      	ldr	r3, [pc, #368]	@ (8003578 <HAL_UART_IRQHandler+0x2b8>)
 8003406:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2208      	movs	r2, #8
 8003412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	f043 0208 	orr.w	r2, r3, #8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800342c:	2b00      	cmp	r3, #0
 800342e:	d012      	beq.n	8003456 <HAL_UART_IRQHandler+0x196>
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003434:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00c      	beq.n	8003456 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8266 	beq.w	800392e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d013      	beq.n	8003496 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800346e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800347a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800347e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034aa:	2b40      	cmp	r3, #64	@ 0x40
 80034ac:	d005      	beq.n	80034ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d054      	beq.n	8003564 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f001 f83a 	bl	8004534 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ca:	2b40      	cmp	r3, #64	@ 0x40
 80034cc:	d146      	bne.n	800355c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3308      	adds	r3, #8
 80034d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3308      	adds	r3, #8
 80034f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1d9      	bne.n	80034ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d017      	beq.n	8003554 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800352a:	4a15      	ldr	r2, [pc, #84]	@ (8003580 <HAL_UART_IRQHandler+0x2c0>)
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd fd2a 	bl	8000f8e <HAL_DMA_Abort_IT>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d019      	beq.n	8003574 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800354e:	4610      	mov	r0, r2
 8003550:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003552:	e00f      	b.n	8003574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f9ff 	bl	8003958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355a:	e00b      	b.n	8003574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f9fb 	bl	8003958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003562:	e007      	b.n	8003574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f9f7 	bl	8003958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003572:	e1dc      	b.n	800392e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	bf00      	nop
    return;
 8003576:	e1da      	b.n	800392e <HAL_UART_IRQHandler+0x66e>
 8003578:	10000001 	.word	0x10000001
 800357c:	04000120 	.word	0x04000120
 8003580:	08004601 	.word	0x08004601

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003588:	2b01      	cmp	r3, #1
 800358a:	f040 8170 	bne.w	800386e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800358e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8169 	beq.w	800386e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800359c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8162 	beq.w	800386e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2210      	movs	r2, #16
 80035b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035bc:	2b40      	cmp	r3, #64	@ 0x40
 80035be:	f040 80d8 	bne.w	8003772 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80af 	beq.w	8003738 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80035e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f080 80a7 	bcs.w	8003738 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 8087 	bne.w	8003716 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800361c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003632:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003636:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800363e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800364a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1da      	bne.n	8003608 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3308      	adds	r3, #8
 8003658:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003662:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003676:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800367a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800367e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e1      	bne.n	8003652 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3308      	adds	r3, #8
 8003694:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800369e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3308      	adds	r3, #8
 80036ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e3      	bne.n	800368e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036e4:	f023 0310 	bic.w	r3, r3, #16
 80036e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e4      	bne.n	80036d4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fbe0 	bl	8000ed6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003728:	b29b      	uxth	r3, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	b29b      	uxth	r3, r3
 800372e:	4619      	mov	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f91b 	bl	800396c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003736:	e0fc      	b.n	8003932 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800373e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003742:	429a      	cmp	r2, r3
 8003744:	f040 80f5 	bne.w	8003932 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b20      	cmp	r3, #32
 8003758:	f040 80eb 	bne.w	8003932 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8fe 	bl	800396c <HAL_UARTEx_RxEventCallback>
      return;
 8003770:	e0df      	b.n	8003932 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800377e:	b29b      	uxth	r3, r3
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80d1 	beq.w	8003936 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80cc 	beq.w	8003936 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e4      	bne.n	800379e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3308      	adds	r3, #8
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	623b      	str	r3, [r7, #32]
   return(result);
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3308      	adds	r3, #8
 80037f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800380a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e1      	bne.n	80037d4 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	60fb      	str	r3, [r7, #12]
   return(result);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f023 0310 	bic.w	r3, r3, #16
 8003838:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	617b      	str	r3, [r7, #20]
   return(result);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e4      	bne.n	8003824 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f880 	bl	800396c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800386c:	e063      	b.n	8003936 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00e      	beq.n	8003898 <HAL_UART_IRQHandler+0x5d8>
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d008      	beq.n	8003898 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800388e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f001 fe22 	bl	80054da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003896:	e051      	b.n	800393c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d014      	beq.n	80038ce <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80038a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80038b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d03a      	beq.n	800393a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
    }
    return;
 80038cc:	e035      	b.n	800393a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_UART_IRQHandler+0x62e>
 80038da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f001 f842 	bl	8004970 <UART_EndTransmit_IT>
    return;
 80038ec:	e026      	b.n	800393c <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_UART_IRQHandler+0x64e>
 80038fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f001 fdfb 	bl	8005502 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800390c:	e016      	b.n	800393c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800390e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003912:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d010      	beq.n	800393c <HAL_UART_IRQHandler+0x67c>
 800391a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800391e:	2b00      	cmp	r3, #0
 8003920:	da0c      	bge.n	800393c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f001 fde3 	bl	80054ee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003928:	e008      	b.n	800393c <HAL_UART_IRQHandler+0x67c>
      return;
 800392a:	bf00      	nop
 800392c:	e006      	b.n	800393c <HAL_UART_IRQHandler+0x67c>
    return;
 800392e:	bf00      	nop
 8003930:	e004      	b.n	800393c <HAL_UART_IRQHandler+0x67c>
      return;
 8003932:	bf00      	nop
 8003934:	e002      	b.n	800393c <HAL_UART_IRQHandler+0x67c>
      return;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <HAL_UART_IRQHandler+0x67c>
    return;
 800393a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800393c:	37e8      	adds	r7, #232	@ 0xe8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop

08003944 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003988:	b08c      	sub	sp, #48	@ 0x30
 800398a:	af00      	add	r7, sp, #0
 800398c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	431a      	orrs	r2, r3
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4baa      	ldr	r3, [pc, #680]	@ (8003c5c <UART_SetConfig+0x2d8>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039bc:	430b      	orrs	r3, r1
 80039be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a9f      	ldr	r2, [pc, #636]	@ (8003c60 <UART_SetConfig+0x2dc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d004      	beq.n	80039f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ec:	4313      	orrs	r3, r2
 80039ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80039fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	f023 010f 	bic.w	r1, r3, #15
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a90      	ldr	r2, [pc, #576]	@ (8003c64 <UART_SetConfig+0x2e0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d125      	bne.n	8003a74 <UART_SetConfig+0xf0>
 8003a28:	4b8f      	ldr	r3, [pc, #572]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d81a      	bhi.n	8003a6c <UART_SetConfig+0xe8>
 8003a36:	a201      	add	r2, pc, #4	@ (adr r2, 8003a3c <UART_SetConfig+0xb8>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a5d 	.word	0x08003a5d
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003a65 	.word	0x08003a65
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a52:	e116      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003a54:	2302      	movs	r3, #2
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5a:	e112      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a62:	e10e      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003a64:	2308      	movs	r3, #8
 8003a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6a:	e10a      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a72:	e106      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a7c      	ldr	r2, [pc, #496]	@ (8003c6c <UART_SetConfig+0x2e8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d138      	bne.n	8003af0 <UART_SetConfig+0x16c>
 8003a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d82d      	bhi.n	8003ae8 <UART_SetConfig+0x164>
 8003a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <UART_SetConfig+0x110>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003ae9 	.word	0x08003ae9
 8003a9c:	08003ae9 	.word	0x08003ae9
 8003aa0:	08003ae9 	.word	0x08003ae9
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003ae9 	.word	0x08003ae9
 8003aac:	08003ae9 	.word	0x08003ae9
 8003ab0:	08003ae9 	.word	0x08003ae9
 8003ab4:	08003ad1 	.word	0x08003ad1
 8003ab8:	08003ae9 	.word	0x08003ae9
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003ae1 	.word	0x08003ae1
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ace:	e0d8      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad6:	e0d4      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ade:	e0d0      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae6:	e0cc      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aee:	e0c8      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5e      	ldr	r2, [pc, #376]	@ (8003c70 <UART_SetConfig+0x2ec>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d125      	bne.n	8003b46 <UART_SetConfig+0x1c2>
 8003afa:	4b5b      	ldr	r3, [pc, #364]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b04:	2b30      	cmp	r3, #48	@ 0x30
 8003b06:	d016      	beq.n	8003b36 <UART_SetConfig+0x1b2>
 8003b08:	2b30      	cmp	r3, #48	@ 0x30
 8003b0a:	d818      	bhi.n	8003b3e <UART_SetConfig+0x1ba>
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d00a      	beq.n	8003b26 <UART_SetConfig+0x1a2>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d814      	bhi.n	8003b3e <UART_SetConfig+0x1ba>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <UART_SetConfig+0x19a>
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d008      	beq.n	8003b2e <UART_SetConfig+0x1aa>
 8003b1c:	e00f      	b.n	8003b3e <UART_SetConfig+0x1ba>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b24:	e0ad      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b26:	2302      	movs	r3, #2
 8003b28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2c:	e0a9      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b2e:	2304      	movs	r3, #4
 8003b30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b34:	e0a5      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b36:	2308      	movs	r3, #8
 8003b38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3c:	e0a1      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b3e:	2310      	movs	r3, #16
 8003b40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b44:	e09d      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c74 <UART_SetConfig+0x2f0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d125      	bne.n	8003b9c <UART_SetConfig+0x218>
 8003b50:	4b45      	ldr	r3, [pc, #276]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b5c:	d016      	beq.n	8003b8c <UART_SetConfig+0x208>
 8003b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b60:	d818      	bhi.n	8003b94 <UART_SetConfig+0x210>
 8003b62:	2b80      	cmp	r3, #128	@ 0x80
 8003b64:	d00a      	beq.n	8003b7c <UART_SetConfig+0x1f8>
 8003b66:	2b80      	cmp	r3, #128	@ 0x80
 8003b68:	d814      	bhi.n	8003b94 <UART_SetConfig+0x210>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <UART_SetConfig+0x1f0>
 8003b6e:	2b40      	cmp	r3, #64	@ 0x40
 8003b70:	d008      	beq.n	8003b84 <UART_SetConfig+0x200>
 8003b72:	e00f      	b.n	8003b94 <UART_SetConfig+0x210>
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e082      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b82:	e07e      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b84:	2304      	movs	r3, #4
 8003b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8a:	e07a      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b92:	e076      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b94:	2310      	movs	r3, #16
 8003b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9a:	e072      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a35      	ldr	r2, [pc, #212]	@ (8003c78 <UART_SetConfig+0x2f4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d12a      	bne.n	8003bfc <UART_SetConfig+0x278>
 8003ba6:	4b30      	ldr	r3, [pc, #192]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb4:	d01a      	beq.n	8003bec <UART_SetConfig+0x268>
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bba:	d81b      	bhi.n	8003bf4 <UART_SetConfig+0x270>
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc0:	d00c      	beq.n	8003bdc <UART_SetConfig+0x258>
 8003bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc6:	d815      	bhi.n	8003bf4 <UART_SetConfig+0x270>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <UART_SetConfig+0x250>
 8003bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd0:	d008      	beq.n	8003be4 <UART_SetConfig+0x260>
 8003bd2:	e00f      	b.n	8003bf4 <UART_SetConfig+0x270>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bda:	e052      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be2:	e04e      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003be4:	2304      	movs	r3, #4
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bea:	e04a      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003bec:	2308      	movs	r3, #8
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf2:	e046      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfa:	e042      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <UART_SetConfig+0x2dc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d13a      	bne.n	8003c7c <UART_SetConfig+0x2f8>
 8003c06:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c14:	d01a      	beq.n	8003c4c <UART_SetConfig+0x2c8>
 8003c16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c1a:	d81b      	bhi.n	8003c54 <UART_SetConfig+0x2d0>
 8003c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c20:	d00c      	beq.n	8003c3c <UART_SetConfig+0x2b8>
 8003c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c26:	d815      	bhi.n	8003c54 <UART_SetConfig+0x2d0>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <UART_SetConfig+0x2b0>
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c30:	d008      	beq.n	8003c44 <UART_SetConfig+0x2c0>
 8003c32:	e00f      	b.n	8003c54 <UART_SetConfig+0x2d0>
 8003c34:	2300      	movs	r3, #0
 8003c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c3a:	e022      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c42:	e01e      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003c44:	2304      	movs	r3, #4
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c4a:	e01a      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c52:	e016      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003c54:	2310      	movs	r3, #16
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5a:	e012      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003c5c:	cfff69f3 	.word	0xcfff69f3
 8003c60:	40008000 	.word	0x40008000
 8003c64:	40013800 	.word	0x40013800
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40004400 	.word	0x40004400
 8003c70:	40004800 	.word	0x40004800
 8003c74:	40004c00 	.word	0x40004c00
 8003c78:	40005000 	.word	0x40005000
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4aae      	ldr	r2, [pc, #696]	@ (8003f40 <UART_SetConfig+0x5bc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	f040 8097 	bne.w	8003dbc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d823      	bhi.n	8003cde <UART_SetConfig+0x35a>
 8003c96:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <UART_SetConfig+0x318>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003ccf 	.word	0x08003ccf
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cdf 	.word	0x08003cdf
 8003cb8:	08003cdf 	.word	0x08003cdf
 8003cbc:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc0:	f7fe fa9a 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8003cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cc6:	e010      	b.n	8003cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b9e      	ldr	r3, [pc, #632]	@ (8003f44 <UART_SetConfig+0x5c0>)
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ccc:	e00d      	b.n	8003cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7fe f9fb 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8003cd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cd4:	e009      	b.n	8003cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cdc:	e005      	b.n	8003cea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ce8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8130 	beq.w	8003f52 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	4a94      	ldr	r2, [pc, #592]	@ (8003f48 <UART_SetConfig+0x5c4>)
 8003cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d305      	bcc.n	8003d22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d903      	bls.n	8003d2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d28:	e113      	b.n	8003f52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	60fa      	str	r2, [r7, #12]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	4a84      	ldr	r2, [pc, #528]	@ (8003f48 <UART_SetConfig+0x5c4>)
 8003d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2200      	movs	r2, #0
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d4c:	f7fc fa56 	bl	80001fc <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	020b      	lsls	r3, r1, #8
 8003d62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d66:	0202      	lsls	r2, r0, #8
 8003d68:	6979      	ldr	r1, [r7, #20]
 8003d6a:	6849      	ldr	r1, [r1, #4]
 8003d6c:	0849      	lsrs	r1, r1, #1
 8003d6e:	2000      	movs	r0, #0
 8003d70:	460c      	mov	r4, r1
 8003d72:	4605      	mov	r5, r0
 8003d74:	eb12 0804 	adds.w	r8, r2, r4
 8003d78:	eb43 0905 	adc.w	r9, r3, r5
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	469a      	mov	sl, r3
 8003d84:	4693      	mov	fp, r2
 8003d86:	4652      	mov	r2, sl
 8003d88:	465b      	mov	r3, fp
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	f7fc fa35 	bl	80001fc <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4613      	mov	r3, r2
 8003d98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da0:	d308      	bcc.n	8003db4 <UART_SetConfig+0x430>
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da8:	d204      	bcs.n	8003db4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6a3a      	ldr	r2, [r7, #32]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	e0ce      	b.n	8003f52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003dba:	e0ca      	b.n	8003f52 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc4:	d166      	bne.n	8003e94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d827      	bhi.n	8003e1e <UART_SetConfig+0x49a>
 8003dce:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <UART_SetConfig+0x450>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e01 	.word	0x08003e01
 8003ddc:	08003e09 	.word	0x08003e09
 8003de0:	08003e1f 	.word	0x08003e1f
 8003de4:	08003e0f 	.word	0x08003e0f
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e1f 	.word	0x08003e1f
 8003df0:	08003e1f 	.word	0x08003e1f
 8003df4:	08003e17 	.word	0x08003e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df8:	f7fe f9fe 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8003dfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dfe:	e014      	b.n	8003e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e00:	f7fe fa10 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8003e04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e06:	e010      	b.n	8003e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e08:	4b4e      	ldr	r3, [pc, #312]	@ (8003f44 <UART_SetConfig+0x5c0>)
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e0c:	e00d      	b.n	8003e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0e:	f7fe f95b 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8003e12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e14:	e009      	b.n	8003e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e1c:	e005      	b.n	8003e2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8090 	beq.w	8003f52 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	4a44      	ldr	r2, [pc, #272]	@ (8003f48 <UART_SetConfig+0x5c4>)
 8003e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e44:	005a      	lsls	r2, r3, #1
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	085b      	lsrs	r3, r3, #1
 8003e4c:	441a      	add	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2b0f      	cmp	r3, #15
 8003e5c:	d916      	bls.n	8003e8c <UART_SetConfig+0x508>
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e64:	d212      	bcs.n	8003e8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f023 030f 	bic.w	r3, r3, #15
 8003e6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	8bfb      	ldrh	r3, [r7, #30]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	8bfa      	ldrh	r2, [r7, #30]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	e062      	b.n	8003f52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e92:	e05e      	b.n	8003f52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d828      	bhi.n	8003eee <UART_SetConfig+0x56a>
 8003e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <UART_SetConfig+0x520>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ed1 	.word	0x08003ed1
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	08003eef 	.word	0x08003eef
 8003eb4:	08003edf 	.word	0x08003edf
 8003eb8:	08003eef 	.word	0x08003eef
 8003ebc:	08003eef 	.word	0x08003eef
 8003ec0:	08003eef 	.word	0x08003eef
 8003ec4:	08003ee7 	.word	0x08003ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7fe f996 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ece:	e014      	b.n	8003efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed0:	f7fe f9a8 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8003ed4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ed6:	e010      	b.n	8003efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f44 <UART_SetConfig+0x5c0>)
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003edc:	e00d      	b.n	8003efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ede:	f7fe f8f3 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8003ee2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ee4:	e009      	b.n	8003efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003eec:	e005      	b.n	8003efa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ef8:	bf00      	nop
    }

    if (pclk != 0U)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d028      	beq.n	8003f52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	4a10      	ldr	r2, [pc, #64]	@ (8003f48 <UART_SetConfig+0x5c4>)
 8003f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	441a      	add	r2, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2b0f      	cmp	r3, #15
 8003f28:	d910      	bls.n	8003f4c <UART_SetConfig+0x5c8>
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f30:	d20c      	bcs.n	8003f4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60da      	str	r2, [r3, #12]
 8003f3c:	e009      	b.n	8003f52 <UART_SetConfig+0x5ce>
 8003f3e:	bf00      	nop
 8003f40:	40008000 	.word	0x40008000
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	080057d4 	.word	0x080057d4
      }
      else
      {
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f6e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3730      	adds	r7, #48	@ 0x30
 8003f76:	46bd      	mov	sp, r7
 8003f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01a      	beq.n	8004092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800407a:	d10a      	bne.n	8004092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b098      	sub	sp, #96	@ 0x60
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d0:	f7fc fde4 	bl	8000c9c <HAL_GetTick>
 80040d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d12f      	bne.n	8004144 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ec:	2200      	movs	r2, #0
 80040ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f88e 	bl	8004214 <UART_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d022      	beq.n	8004144 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800410c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004112:	653b      	str	r3, [r7, #80]	@ 0x50
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800411c:	647b      	str	r3, [r7, #68]	@ 0x44
 800411e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800412a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e6      	bne.n	80040fe <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e063      	b.n	800420c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b04      	cmp	r3, #4
 8004150:	d149      	bne.n	80041e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004152:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415a:	2200      	movs	r2, #0
 800415c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f857 	bl	8004214 <UART_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d03c      	beq.n	80041e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	623b      	str	r3, [r7, #32]
   return(result);
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800418a:	633b      	str	r3, [r7, #48]	@ 0x30
 800418c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e6      	bne.n	800416c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3308      	adds	r3, #8
 80041bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041be:	61fa      	str	r2, [r7, #28]
 80041c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	69b9      	ldr	r1, [r7, #24]
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	617b      	str	r3, [r7, #20]
   return(result);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e5      	bne.n	800419e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e012      	b.n	800420c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3758      	adds	r7, #88	@ 0x58
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004224:	e04f      	b.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d04b      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fc fd35 	bl	8000c9c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <UART_WaitOnFlagUntilTimeout+0x30>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e04e      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d037      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b80      	cmp	r3, #128	@ 0x80
 800425a:	d034      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b40      	cmp	r3, #64	@ 0x40
 8004260:	d031      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b08      	cmp	r3, #8
 800426e:	d110      	bne.n	8004292 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2208      	movs	r2, #8
 8004276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f95b 	bl	8004534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2208      	movs	r2, #8
 8004282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e029      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800429c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a0:	d111      	bne.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f941 	bl	8004534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e00f      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	bf0c      	ite	eq
 80042d6:	2301      	moveq	r3, #1
 80042d8:	2300      	movne	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d0a0      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b0a3      	sub	sp, #140	@ 0x8c
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004322:	d10e      	bne.n	8004342 <UART_Start_Receive_IT+0x52>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <UART_Start_Receive_IT+0x48>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004332:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004336:	e02d      	b.n	8004394 <UART_Start_Receive_IT+0xa4>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	22ff      	movs	r2, #255	@ 0xff
 800433c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004340:	e028      	b.n	8004394 <UART_Start_Receive_IT+0xa4>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10d      	bne.n	8004366 <UART_Start_Receive_IT+0x76>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <UART_Start_Receive_IT+0x6c>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	22ff      	movs	r2, #255	@ 0xff
 8004356:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800435a:	e01b      	b.n	8004394 <UART_Start_Receive_IT+0xa4>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	227f      	movs	r2, #127	@ 0x7f
 8004360:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004364:	e016      	b.n	8004394 <UART_Start_Receive_IT+0xa4>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800436e:	d10d      	bne.n	800438c <UART_Start_Receive_IT+0x9c>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <UART_Start_Receive_IT+0x92>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	227f      	movs	r2, #127	@ 0x7f
 800437c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004380:	e008      	b.n	8004394 <UART_Start_Receive_IT+0xa4>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	223f      	movs	r2, #63	@ 0x3f
 8004386:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800438a:	e003      	b.n	8004394 <UART_Start_Receive_IT+0xa4>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2222      	movs	r2, #34	@ 0x22
 80043a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80043b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80043c8:	673a      	str	r2, [r7, #112]	@ 0x70
 80043ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80043ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80043d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e3      	bne.n	80043a4 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043e4:	d14f      	bne.n	8004486 <UART_Start_Receive_IT+0x196>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d349      	bcc.n	8004486 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fa:	d107      	bne.n	800440c <UART_Start_Receive_IT+0x11c>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d103      	bne.n	800440c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a47      	ldr	r2, [pc, #284]	@ (8004524 <UART_Start_Receive_IT+0x234>)
 8004408:	675a      	str	r2, [r3, #116]	@ 0x74
 800440a:	e002      	b.n	8004412 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a46      	ldr	r2, [pc, #280]	@ (8004528 <UART_Start_Receive_IT+0x238>)
 8004410:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01a      	beq.n	8004450 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800442a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800442e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800443c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800443e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004442:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800444a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e4      	bne.n	800441a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004466:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3308      	adds	r3, #8
 800446e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004470:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004472:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004476:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800447e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e5      	bne.n	8004450 <UART_Start_Receive_IT+0x160>
 8004484:	e046      	b.n	8004514 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800448e:	d107      	bne.n	80044a0 <UART_Start_Receive_IT+0x1b0>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d103      	bne.n	80044a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a24      	ldr	r2, [pc, #144]	@ (800452c <UART_Start_Receive_IT+0x23c>)
 800449c:	675a      	str	r2, [r3, #116]	@ 0x74
 800449e:	e002      	b.n	80044a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a23      	ldr	r2, [pc, #140]	@ (8004530 <UART_Start_Receive_IT+0x240>)
 80044a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d019      	beq.n	80044e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80044c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80044da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e6      	bne.n	80044ae <UART_Start_Receive_IT+0x1be>
 80044e0:	e018      	b.n	8004514 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	613b      	str	r3, [r7, #16]
   return(result);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f043 0320 	orr.w	r3, r3, #32
 80044f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	69f9      	ldr	r1, [r7, #28]
 8004506:	6a3a      	ldr	r2, [r7, #32]
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	61bb      	str	r3, [r7, #24]
   return(result);
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e6      	bne.n	80044e2 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	378c      	adds	r7, #140	@ 0x8c
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	0800509d 	.word	0x0800509d
 8004528:	08004d39 	.word	0x08004d39
 800452c:	08004b81 	.word	0x08004b81
 8004530:	080049c9 	.word	0x080049c9

08004534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b095      	sub	sp, #84	@ 0x54
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800455a:	643b      	str	r3, [r7, #64]	@ 0x40
 800455c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004560:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e6      	bne.n	800453c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	61fb      	str	r3, [r7, #28]
   return(result);
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004594:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e3      	bne.n	800456e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d118      	bne.n	80045e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f023 0310 	bic.w	r3, r3, #16
 80045c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6979      	ldr	r1, [r7, #20]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	613b      	str	r3, [r7, #16]
   return(result);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e6      	bne.n	80045ae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045f4:	bf00      	nop
 80045f6:	3754      	adds	r7, #84	@ 0x54
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff f99a 	bl	8003958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b08f      	sub	sp, #60	@ 0x3c
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463a:	2b21      	cmp	r3, #33	@ 0x21
 800463c:	d14c      	bne.n	80046d8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d132      	bne.n	80046b0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	61fb      	str	r3, [r7, #28]
   return(result);
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800466a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800466e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e6      	bne.n	800464a <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	60bb      	str	r3, [r7, #8]
   return(result);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004690:	633b      	str	r3, [r7, #48]	@ 0x30
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6979      	ldr	r1, [r7, #20]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	613b      	str	r3, [r7, #16]
   return(result);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e6      	bne.n	800467c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80046ae:	e013      	b.n	80046d8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80046d8:	bf00      	nop
 80046da:	373c      	adds	r7, #60	@ 0x3c
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b091      	sub	sp, #68	@ 0x44
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	2b21      	cmp	r3, #33	@ 0x21
 80046f4:	d151      	bne.n	800479a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d132      	bne.n	8004768 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	623b      	str	r3, [r7, #32]
   return(result);
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004716:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	633b      	str	r3, [r7, #48]	@ 0x30
 8004722:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800472e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e6      	bne.n	8004702 <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	60fb      	str	r3, [r7, #12]
   return(result);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	69b9      	ldr	r1, [r7, #24]
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	617b      	str	r3, [r7, #20]
   return(result);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e6      	bne.n	8004734 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004766:	e018      	b.n	800479a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800476c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800476e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800477c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004782:	1c9a      	adds	r2, r3, #2
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800479a:	bf00      	nop
 800479c:	3744      	adds	r7, #68	@ 0x44
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b091      	sub	sp, #68	@ 0x44
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b4:	2b21      	cmp	r3, #33	@ 0x21
 80047b6:	d160      	bne.n	800487a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80047be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80047c0:	e057      	b.n	8004872 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d133      	bne.n	8004836 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3308      	adds	r3, #8
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	623b      	str	r3, [r7, #32]
   return(result);
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80047e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80047f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e5      	bne.n	80047ce <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004816:	637b      	str	r3, [r7, #52]	@ 0x34
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	617b      	str	r3, [r7, #20]
   return(result);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e6      	bne.n	8004802 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004834:	e021      	b.n	800487a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004840:	2b00      	cmp	r3, #0
 8004842:	d013      	beq.n	800486c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800486c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800486e:	3b01      	subs	r3, #1
 8004870:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004872:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1a4      	bne.n	80047c2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004878:	e7ff      	b.n	800487a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800487a:	bf00      	nop
 800487c:	3744      	adds	r7, #68	@ 0x44
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004886:	b480      	push	{r7}
 8004888:	b091      	sub	sp, #68	@ 0x44
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004894:	2b21      	cmp	r3, #33	@ 0x21
 8004896:	d165      	bne.n	8004964 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800489e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80048a0:	e05c      	b.n	800495c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d133      	bne.n	8004916 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3308      	adds	r3, #8
 80048b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80048c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3308      	adds	r3, #8
 80048cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6979      	ldr	r1, [r7, #20]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	613b      	str	r3, [r7, #16]
   return(result);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e6      	bne.n	80048e2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004914:	e026      	b.n	8004964 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004920:	2b00      	cmp	r3, #0
 8004922:	d018      	beq.n	8004956 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004928:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800492a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004938:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493e:	1c9a      	adds	r2, r3, #2
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004956:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004958:	3b01      	subs	r3, #1
 800495a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800495c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800495e:	2b00      	cmp	r3, #0
 8004960:	d19f      	bne.n	80048a2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004962:	e7ff      	b.n	8004964 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004964:	bf00      	nop
 8004966:	3744      	adds	r7, #68	@ 0x44
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	60bb      	str	r3, [r7, #8]
   return(result);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	61bb      	str	r3, [r7, #24]
 8004998:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6979      	ldr	r1, [r7, #20]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	613b      	str	r3, [r7, #16]
   return(result);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e6      	bne.n	8004978 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7fe ffc3 	bl	8003944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049be:	bf00      	nop
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b09c      	sub	sp, #112	@ 0x70
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80049d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049e0:	2b22      	cmp	r3, #34	@ 0x22
 80049e2:	f040 80be 	bne.w	8004b62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80049f4:	b2d9      	uxtb	r1, r3
 80049f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a00:	400a      	ands	r2, r1
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 80a1 	bne.w	8004b72 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e6      	bne.n	8004a30 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3308      	adds	r3, #8
 8004a68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a82:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e5      	bne.n	8004a62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a33      	ldr	r2, [pc, #204]	@ (8004b7c <UART_RxISR_8BIT+0x1b4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d01f      	beq.n	8004af4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d018      	beq.n	8004af4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ad6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e6      	bne.n	8004ac2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d12e      	bne.n	8004b5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0310 	bic.w	r3, r3, #16
 8004b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	69b9      	ldr	r1, [r7, #24]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e6      	bne.n	8004b02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d103      	bne.n	8004b4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2210      	movs	r2, #16
 8004b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fe ff0a 	bl	800396c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b58:	e00b      	b.n	8004b72 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fb fcc6 	bl	80004ec <HAL_UART_RxCpltCallback>
}
 8004b60:	e007      	b.n	8004b72 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699a      	ldr	r2, [r3, #24]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0208 	orr.w	r2, r2, #8
 8004b70:	619a      	str	r2, [r3, #24]
}
 8004b72:	bf00      	nop
 8004b74:	3770      	adds	r7, #112	@ 0x70
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40008000 	.word	0x40008000

08004b80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b09c      	sub	sp, #112	@ 0x70
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004b8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b98:	2b22      	cmp	r3, #34	@ 0x22
 8004b9a:	f040 80be 	bne.w	8004d1a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004bae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004bb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc2:	1c9a      	adds	r2, r3, #2
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 80a1 	bne.w	8004d2a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c06:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c08:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e6      	bne.n	8004be8 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3308      	adds	r3, #8
 8004c20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a33      	ldr	r2, [pc, #204]	@ (8004d34 <UART_RxISR_16BIT+0x1b4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d01f      	beq.n	8004cac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d018      	beq.n	8004cac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e6      	bne.n	8004c7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d12e      	bne.n	8004d12 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f023 0310 	bic.w	r3, r3, #16
 8004cce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6979      	ldr	r1, [r7, #20]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e6      	bne.n	8004cba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d103      	bne.n	8004d02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2210      	movs	r2, #16
 8004d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fe fe2e 	bl	800396c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d10:	e00b      	b.n	8004d2a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fb fbea 	bl	80004ec <HAL_UART_RxCpltCallback>
}
 8004d18:	e007      	b.n	8004d2a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0208 	orr.w	r2, r2, #8
 8004d28:	619a      	str	r2, [r3, #24]
}
 8004d2a:	bf00      	nop
 8004d2c:	3770      	adds	r7, #112	@ 0x70
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40008000 	.word	0x40008000

08004d38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b0ac      	sub	sp, #176	@ 0xb0
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004d46:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d6e:	2b22      	cmp	r3, #34	@ 0x22
 8004d70:	f040 8183 	bne.w	800507a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004d7a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d7e:	e126      	b.n	8004fce <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004d8e:	b2d9      	uxtb	r1, r3
 8004d90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d053      	beq.n	8004e7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d011      	beq.n	8004e02 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2201      	movs	r2, #1
 8004df0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df8:	f043 0201 	orr.w	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d011      	beq.n	8004e32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e28:	f043 0204 	orr.w	r2, r3, #4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d011      	beq.n	8004e62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00b      	beq.n	8004e62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2204      	movs	r2, #4
 8004e50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e58:	f043 0202 	orr.w	r2, r3, #2
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d006      	beq.n	8004e7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7fe fd73 	bl	8003958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f040 80a3 	bne.w	8004fce <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8004e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004eac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004eb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004eb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e4      	bne.n	8004e88 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004ece:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ee6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004ee8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004eec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004ef4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e1      	bne.n	8004ebe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a60      	ldr	r2, [pc, #384]	@ (8005094 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d021      	beq.n	8004f5c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01a      	beq.n	8004f5c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f48:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f4a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e4      	bne.n	8004f26 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d130      	bne.n	8004fc6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	f023 0310 	bic.w	r3, r3, #16
 8004f7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e4      	bne.n	8004f6a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b10      	cmp	r3, #16
 8004fac:	d103      	bne.n	8004fb6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fe fcd4 	bl	800396c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004fc4:	e00e      	b.n	8004fe4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fb fa90 	bl	80004ec <HAL_UART_RxCpltCallback>
        break;
 8004fcc:	e00a      	b.n	8004fe4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004fce:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d006      	beq.n	8004fe4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8004fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f47f aece 	bne.w	8004d80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004fea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004fee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d049      	beq.n	800508a <UART_RxISR_8BIT_FIFOEN+0x352>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004ffc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005000:	429a      	cmp	r2, r3
 8005002:	d242      	bcs.n	800508a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3308      	adds	r3, #8
 800500a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	61fb      	str	r3, [r7, #28]
   return(result);
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3308      	adds	r3, #8
 8005024:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005028:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800502a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800502e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e3      	bne.n	8005004 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a16      	ldr	r2, [pc, #88]	@ (8005098 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8005040:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f043 0320 	orr.w	r3, r3, #32
 8005056:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6979      	ldr	r1, [r7, #20]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	613b      	str	r3, [r7, #16]
   return(result);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e4      	bne.n	8005042 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005078:	e007      	b.n	800508a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699a      	ldr	r2, [r3, #24]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0208 	orr.w	r2, r2, #8
 8005088:	619a      	str	r2, [r3, #24]
}
 800508a:	bf00      	nop
 800508c:	37b0      	adds	r7, #176	@ 0xb0
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40008000 	.word	0x40008000
 8005098:	080049c9 	.word	0x080049c9

0800509c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b0ae      	sub	sp, #184	@ 0xb8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80050aa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050d2:	2b22      	cmp	r3, #34	@ 0x22
 80050d4:	f040 8187 	bne.w	80053e6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80050de:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80050e2:	e12a      	b.n	800533a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80050f6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80050fa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80050fe:	4013      	ands	r3, r2
 8005100:	b29a      	uxth	r2, r3
 8005102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005106:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510c:	1c9a      	adds	r2, r3, #2
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800512e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	2b00      	cmp	r3, #0
 8005138:	d053      	beq.n	80051e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800513a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d011      	beq.n	800516a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800514a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2201      	movs	r2, #1
 8005158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005160:	f043 0201 	orr.w	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800516a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d011      	beq.n	800519a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2202      	movs	r2, #2
 8005188:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005190:	f043 0204 	orr.w	r2, r3, #4
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800519a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d011      	beq.n	80051ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 80051a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00b      	beq.n	80051ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2204      	movs	r2, #4
 80051b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c0:	f043 0202 	orr.w	r2, r3, #2
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d006      	beq.n	80051e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fe fbbf 	bl	8003958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f040 80a5 	bne.w	800533a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005212:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005216:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800521a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e2      	bne.n	80051f0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800523a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005252:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005254:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005258:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005260:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e1      	bne.n	800522a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a60      	ldr	r2, [pc, #384]	@ (8005400 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d021      	beq.n	80052c8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01a      	beq.n	80052c8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e4      	bne.n	8005292 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d130      	bne.n	8005332 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e6:	f023 0310 	bic.w	r3, r3, #16
 80052ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e4      	bne.n	80052d6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b10      	cmp	r3, #16
 8005318:	d103      	bne.n	8005322 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2210      	movs	r2, #16
 8005320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fe fb1e 	bl	800396c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005330:	e00e      	b.n	8005350 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fb f8da 	bl	80004ec <HAL_UART_RxCpltCallback>
        break;
 8005338:	e00a      	b.n	8005350 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800533a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800533e:	2b00      	cmp	r3, #0
 8005340:	d006      	beq.n	8005350 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8005342:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	f47f aeca 	bne.w	80050e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005356:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800535a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800535e:	2b00      	cmp	r3, #0
 8005360:	d049      	beq.n	80053f6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005368:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800536c:	429a      	cmp	r2, r3
 800536e:	d242      	bcs.n	80053f6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	623b      	str	r3, [r7, #32]
   return(result);
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005386:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3308      	adds	r3, #8
 8005390:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005394:	633a      	str	r2, [r7, #48]	@ 0x30
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800539a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e3      	bne.n	8005370 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a16      	ldr	r2, [pc, #88]	@ (8005404 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80053ac:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f043 0320 	orr.w	r3, r3, #32
 80053c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	69b9      	ldr	r1, [r7, #24]
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	617b      	str	r3, [r7, #20]
   return(result);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e4      	bne.n	80053ae <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053e4:	e007      	b.n	80053f6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0208 	orr.w	r2, r2, #8
 80053f4:	619a      	str	r2, [r3, #24]
}
 80053f6:	bf00      	nop
 80053f8:	37b8      	adds	r7, #184	@ 0xb8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40008000 	.word	0x40008000
 8005404:	08004b81 	.word	0x08004b81

08005408 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e058      	b.n	80054d2 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7fb fa5e 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2224      	movs	r2, #36	@ 0x24
 800543c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7fe fd8f 	bl	8003f7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f7fe fa90 	bl	8003984 <UART_SetConfig>
 8005464:	4603      	mov	r3, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e031      	b.n	80054d2 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800547c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	430a      	orrs	r2, r1
 8005490:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	055b      	lsls	r3, r3, #21
 8005496:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80054ac:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	6979      	ldr	r1, [r7, #20]
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7fe fdf8 	bl	80040c0 <UART_CheckIdleState>
 80054d0:	4603      	mov	r3, r0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_UARTEx_DisableFifoMode+0x16>
 8005528:	2302      	movs	r3, #2
 800552a:	e027      	b.n	800557c <HAL_UARTEx_DisableFifoMode+0x66>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2224      	movs	r2, #36	@ 0x24
 8005538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0201 	bic.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800555a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800559c:	2302      	movs	r3, #2
 800559e:	e02d      	b.n	80055fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	@ 0x24
 80055ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f84f 	bl	8005680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005618:	2302      	movs	r3, #2
 800561a:	e02d      	b.n	8005678 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	@ 0x24
 8005628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f811 	bl	8005680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800568c:	2b00      	cmp	r3, #0
 800568e:	d108      	bne.n	80056a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056a0:	e031      	b.n	8005706 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056a2:	2308      	movs	r3, #8
 80056a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056a6:	2308      	movs	r3, #8
 80056a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	0e5b      	lsrs	r3, r3, #25
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	0f5b      	lsrs	r3, r3, #29
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056ca:	7bbb      	ldrb	r3, [r7, #14]
 80056cc:	7b3a      	ldrb	r2, [r7, #12]
 80056ce:	4911      	ldr	r1, [pc, #68]	@ (8005714 <UARTEx_SetNbDataToProcess+0x94>)
 80056d0:	5c8a      	ldrb	r2, [r1, r2]
 80056d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056d6:	7b3a      	ldrb	r2, [r7, #12]
 80056d8:	490f      	ldr	r1, [pc, #60]	@ (8005718 <UARTEx_SetNbDataToProcess+0x98>)
 80056da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	7b7a      	ldrb	r2, [r7, #13]
 80056ec:	4909      	ldr	r1, [pc, #36]	@ (8005714 <UARTEx_SetNbDataToProcess+0x94>)
 80056ee:	5c8a      	ldrb	r2, [r1, r2]
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056f4:	7b7a      	ldrb	r2, [r7, #13]
 80056f6:	4908      	ldr	r1, [pc, #32]	@ (8005718 <UARTEx_SetNbDataToProcess+0x98>)
 80056f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80056fe:	b29a      	uxth	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	080057ec 	.word	0x080057ec
 8005718:	080057f4 	.word	0x080057f4

0800571c <memset>:
 800571c:	4402      	add	r2, r0
 800571e:	4603      	mov	r3, r0
 8005720:	4293      	cmp	r3, r2
 8005722:	d100      	bne.n	8005726 <memset+0xa>
 8005724:	4770      	bx	lr
 8005726:	f803 1b01 	strb.w	r1, [r3], #1
 800572a:	e7f9      	b.n	8005720 <memset+0x4>

0800572c <__libc_init_array>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4d0d      	ldr	r5, [pc, #52]	@ (8005764 <__libc_init_array+0x38>)
 8005730:	4c0d      	ldr	r4, [pc, #52]	@ (8005768 <__libc_init_array+0x3c>)
 8005732:	1b64      	subs	r4, r4, r5
 8005734:	10a4      	asrs	r4, r4, #2
 8005736:	2600      	movs	r6, #0
 8005738:	42a6      	cmp	r6, r4
 800573a:	d109      	bne.n	8005750 <__libc_init_array+0x24>
 800573c:	4d0b      	ldr	r5, [pc, #44]	@ (800576c <__libc_init_array+0x40>)
 800573e:	4c0c      	ldr	r4, [pc, #48]	@ (8005770 <__libc_init_array+0x44>)
 8005740:	f000 f818 	bl	8005774 <_init>
 8005744:	1b64      	subs	r4, r4, r5
 8005746:	10a4      	asrs	r4, r4, #2
 8005748:	2600      	movs	r6, #0
 800574a:	42a6      	cmp	r6, r4
 800574c:	d105      	bne.n	800575a <__libc_init_array+0x2e>
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	f855 3b04 	ldr.w	r3, [r5], #4
 8005754:	4798      	blx	r3
 8005756:	3601      	adds	r6, #1
 8005758:	e7ee      	b.n	8005738 <__libc_init_array+0xc>
 800575a:	f855 3b04 	ldr.w	r3, [r5], #4
 800575e:	4798      	blx	r3
 8005760:	3601      	adds	r6, #1
 8005762:	e7f2      	b.n	800574a <__libc_init_array+0x1e>
 8005764:	08005804 	.word	0x08005804
 8005768:	08005804 	.word	0x08005804
 800576c:	08005804 	.word	0x08005804
 8005770:	08005808 	.word	0x08005808

08005774 <_init>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr

08005780 <_fini>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr
