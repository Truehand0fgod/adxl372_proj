
mcu1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d4  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005790  08005790  00006790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005800  08005800  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005800  08005800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005808  08005808  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005808  08005808  00006808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800580c  0800580c  0000680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005810  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  0800581c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800581c  00007158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da91  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd2  00000000  00000000  00014acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  000168a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000829  00000000  00000000  00017338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b660  00000000  00000000  00017b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d755  00000000  00000000  000431c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109a63  00000000  00000000  00050916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad0  00000000  00000000  0015a3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0015ce8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005778 	.word	0x08005778

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005778 	.word	0x08005778

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000524 <HAL_UART_RxCpltCallback+0x38>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d108      	bne.n	800050e <HAL_UART_RxCpltCallback+0x22>
	        uart3_cmd_ready = 1;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000528 <HAL_UART_RxCpltCallback+0x3c>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000506:	4809      	ldr	r0, [pc, #36]	@ (800052c <HAL_UART_RxCpltCallback+0x40>)
 8000508:	f000 ff4c 	bl	80013a4 <HAL_GPIO_TogglePin>
	else if (huart == &huart4) {
        uart4_data_ready = 1;
        //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    }

}
 800050c:	e006      	b.n	800051c <HAL_UART_RxCpltCallback+0x30>
	else if (huart == &huart4) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a07      	ldr	r2, [pc, #28]	@ (8000530 <HAL_UART_RxCpltCallback+0x44>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d102      	bne.n	800051c <HAL_UART_RxCpltCallback+0x30>
        uart4_data_ready = 1;
 8000516:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <HAL_UART_RxCpltCallback+0x48>)
 8000518:	2201      	movs	r2, #1
 800051a:	701a      	strb	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000bc 	.word	0x200000bc
 8000528:	20000151 	.word	0x20000151
 800052c:	48000800 	.word	0x48000800
 8000530:	20000028 	.word	0x20000028
 8000534:	20000150 	.word	0x20000150

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09c      	sub	sp, #112	@ 0x70
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fb46 	bl	8000bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f863 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f955 	bl	80007f4 <MX_GPIO_Init>
  MX_UART4_Init();
 800054a:	f000 f8b1 	bl	80006b0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800054e:	f000 f8ff 	bl	8000750 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#ifdef L
  char str[100] = {0};
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	2260      	movs	r2, #96	@ 0x60
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f005 f8de 	bl	8005720 <memset>
  uint8_t size = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	71bb      	strb	r3, [r7, #6]
  const uint8_t cmdSize = 1;
 800056c:	2301      	movs	r3, #1
 800056e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  HAL_UART_Receive_IT(&huart4, &size, 1);
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	4820      	ldr	r0, [pc, #128]	@ (80005fc <main+0xc4>)
 800057a:	f002 fe57 	bl	800322c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &cmd, cmdSize);
 800057e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000582:	b29a      	uxth	r2, r3
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	4619      	mov	r1, r3
 8000588:	481d      	ldr	r0, [pc, #116]	@ (8000600 <main+0xc8>)
 800058a:	f002 fe4f 	bl	800322c <HAL_UART_Receive_IT>
#endif
  while (1)
  {
#ifdef L
	  if(uart4_data_ready)
 800058e:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <main+0xcc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d018      	beq.n	80005ca <main+0x92>
	  {
		  uart4_data_ready = 0;
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <main+0xcc>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Receive(&huart4, (uint8_t*)str, size, 100);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	461a      	mov	r2, r3
 80005a2:	f107 0108 	add.w	r1, r7, #8
 80005a6:	2364      	movs	r3, #100	@ 0x64
 80005a8:	4814      	ldr	r0, [pc, #80]	@ (80005fc <main+0xc4>)
 80005aa:	f002 fce3 	bl	8002f74 <HAL_UART_Receive>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t*)str, size);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	461a      	mov	r2, r3
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	4619      	mov	r1, r3
 80005b8:	4811      	ldr	r0, [pc, #68]	@ (8000600 <main+0xc8>)
 80005ba:	f002 fda3 	bl	8003104 <HAL_UART_Transmit_IT>
		  HAL_UART_Receive_IT(&huart4, &size, 1);
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	480d      	ldr	r0, [pc, #52]	@ (80005fc <main+0xc4>)
 80005c6:	f002 fe31 	bl	800322c <HAL_UART_Receive_IT>
	  }
	  if(uart3_cmd_ready)
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <main+0xd0>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0dc      	beq.n	800058e <main+0x56>
	  {
		  uart3_cmd_ready = 0;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <main+0xd0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart4, &cmd, cmdSize);
 80005da:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80005de:	b29a      	uxth	r2, r3
 80005e0:	1dbb      	adds	r3, r7, #6
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	@ (80005fc <main+0xc4>)
 80005e6:	f002 fd8d 	bl	8003104 <HAL_UART_Transmit_IT>
		  HAL_UART_Receive_IT(&huart3, &cmd, cmdSize);
 80005ea:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	1dbb      	adds	r3, r7, #6
 80005f2:	4619      	mov	r1, r3
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <main+0xc8>)
 80005f6:	f002 fe19 	bl	800322c <HAL_UART_Receive_IT>
	  if(uart4_data_ready)
 80005fa:	e7c8      	b.n	800058e <main+0x56>
 80005fc:	20000028 	.word	0x20000028
 8000600:	200000bc 	.word	0x200000bc
 8000604:	20000150 	.word	0x20000150
 8000608:	20000151 	.word	0x20000151

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b098      	sub	sp, #96	@ 0x60
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2248      	movs	r2, #72	@ 0x48
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 f880 	bl	8005720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000632:	f000 fef1 	bl	8001418 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f932 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000648:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	2303      	movs	r3, #3
 8000650:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000656:	2314      	movs	r3, #20
 8000658:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	4618      	mov	r0, r3
 800066c:	f000 ff78 	bl	8001560 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000676:	f000 f915 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2303      	movs	r3, #3
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2103      	movs	r1, #3
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fbe0 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069e:	f000 f901 	bl	80008a4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006a2:	f001 fdd7 	bl	8002254 <HAL_RCC_EnableCSS>
}
 80006a6:	bf00      	nop
 80006a8:	3760      	adds	r7, #96	@ 0x60
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006b4:	4b24      	ldr	r3, [pc, #144]	@ (8000748 <MX_UART4_Init+0x98>)
 80006b6:	4a25      	ldr	r2, [pc, #148]	@ (800074c <MX_UART4_Init+0x9c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <MX_UART4_Init+0x98>)
 80006bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <MX_UART4_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <MX_UART4_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <MX_UART4_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <MX_UART4_Init+0x98>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_UART4_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_UART4_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_UART4_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ec:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_UART4_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_UART4_Init+0x98>)
 80006f4:	2208      	movs	r2, #8
 80006f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80006f8:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_UART4_Init+0x98>)
 80006fa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006fe:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000700:	4811      	ldr	r0, [pc, #68]	@ (8000748 <MX_UART4_Init+0x98>)
 8000702:	f002 fbe7 	bl	8002ed4 <HAL_UART_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 f8ca 	bl	80008a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	480d      	ldr	r0, [pc, #52]	@ (8000748 <MX_UART4_Init+0x98>)
 8000714:	f004 ff3a 	bl	800558c <HAL_UARTEx_SetTxFifoThreshold>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 800071e:	f000 f8c1 	bl	80008a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	@ (8000748 <MX_UART4_Init+0x98>)
 8000726:	f004 ff6f 	bl	8005608 <HAL_UARTEx_SetRxFifoThreshold>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_UART4_Init+0x84>
  {
    Error_Handler();
 8000730:	f000 f8b8 	bl	80008a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_UART4_Init+0x98>)
 8000736:	f004 fef0 	bl	800551a <HAL_UARTEx_DisableFifoMode>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_UART4_Init+0x94>
  {
    Error_Handler();
 8000740:	f000 f8b0 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000028 	.word	0x20000028
 800074c:	40004c00 	.word	0x40004c00

08000750 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 8000756:	4a26      	ldr	r2, [pc, #152]	@ (80007f0 <MX_USART3_UART_Init+0xa0>)
 8000758:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800075a:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 800075c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000760:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	@ 0x28
  huart3.FifoMode = UART_FIFOMODE_DISABLE;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 800079a:	2200      	movs	r2, #0
 800079c:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800079e:	2300      	movs	r3, #0
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	4811      	ldr	r0, [pc, #68]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 80007a6:	f004 fe31 	bl	800540c <HAL_RS485Ex_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART3_UART_Init+0x64>
  {
    Error_Handler();
 80007b0:	f000 f878 	bl	80008a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b4:	2100      	movs	r1, #0
 80007b6:	480d      	ldr	r0, [pc, #52]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 80007b8:	f004 fee8 	bl	800558c <HAL_UARTEx_SetTxFifoThreshold>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 80007c2:	f000 f86f 	bl	80008a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 80007ca:	f004 ff1d 	bl	8005608 <HAL_UARTEx_SetRxFifoThreshold>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART3_UART_Init+0x88>
  {
    Error_Handler();
 80007d4:	f000 f866 	bl	80008a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_USART3_UART_Init+0x9c>)
 80007da:	f004 fe9e 	bl	800551a <HAL_UARTEx_DisableFifoMode>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_USART3_UART_Init+0x98>
  {
    Error_Handler();
 80007e4:	f000 f85e 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200000bc 	.word	0x200000bc
 80007f0:	40004800 	.word	0x40004800

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b24      	ldr	r3, [pc, #144]	@ (800089c <MX_GPIO_Init+0xa8>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a23      	ldr	r2, [pc, #140]	@ (800089c <MX_GPIO_Init+0xa8>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b21      	ldr	r3, [pc, #132]	@ (800089c <MX_GPIO_Init+0xa8>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_GPIO_Init+0xa8>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a1d      	ldr	r2, [pc, #116]	@ (800089c <MX_GPIO_Init+0xa8>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_GPIO_Init+0xa8>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_GPIO_Init+0xa8>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a17      	ldr	r2, [pc, #92]	@ (800089c <MX_GPIO_Init+0xa8>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_GPIO_Init+0xa8>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_GPIO_Init+0xa8>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a11      	ldr	r2, [pc, #68]	@ (800089c <MX_GPIO_Init+0xa8>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_GPIO_Init+0xa8>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000870:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000872:	f000 fd7f 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000876:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000890:	f000 fbde 	bl	8001050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	@ 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	48000800 	.word	0x48000800

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ba:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_MspInit+0x44>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_MspInit+0x44>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0b2      	sub	sp, #200	@ 0xc8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	2298      	movs	r2, #152	@ 0x98
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f004 ff01 	bl	8005720 <memset>
  if(huart->Instance==UART4)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a65      	ldr	r2, [pc, #404]	@ (8000ab8 <HAL_UART_MspInit+0x1c0>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d15a      	bne.n	80009de <HAL_UART_MspInit+0xe6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000928:	2308      	movs	r3, #8
 800092a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800092c:	2300      	movs	r3, #0
 800092e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fd79 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000940:	f7ff ffb0 	bl	80008a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000944:	4b5d      	ldr	r3, [pc, #372]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000948:	4a5c      	ldr	r2, [pc, #368]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 800094a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800094e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000950:	4b5a      	ldr	r3, [pc, #360]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000954:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095c:	4b57      	ldr	r3, [pc, #348]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000960:	4a56      	ldr	r2, [pc, #344]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000968:	4b54      	ldr	r3, [pc, #336]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000982:	2301      	movs	r3, #1
 8000984:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800098e:	2308      	movs	r3, #8
 8000990:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000994:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000998:	4619      	mov	r1, r3
 800099a:	4849      	ldr	r0, [pc, #292]	@ (8000ac0 <HAL_UART_MspInit+0x1c8>)
 800099c:	f000 fb58 	bl	8001050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ae:	2302      	movs	r3, #2
 80009b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009ba:	2308      	movs	r3, #8
 80009bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80009c4:	4619      	mov	r1, r3
 80009c6:	483e      	ldr	r0, [pc, #248]	@ (8000ac0 <HAL_UART_MspInit+0x1c8>)
 80009c8:	f000 fb42 	bl	8001050 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2034      	movs	r0, #52	@ 0x34
 80009d2:	f000 fa4c 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009d6:	2034      	movs	r0, #52	@ 0x34
 80009d8:	f000 fa65 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009dc:	e068      	b.n	8000ab0 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a38      	ldr	r2, [pc, #224]	@ (8000ac4 <HAL_UART_MspInit+0x1cc>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d163      	bne.n	8000ab0 <HAL_UART_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009e8:	2304      	movs	r3, #4
 80009ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fd19 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8000a00:	f7ff ff50 	bl	80008a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a04:	4b2d      	ldr	r3, [pc, #180]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a08:	4a2c      	ldr	r2, [pc, #176]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000a0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a10:	4b2a      	ldr	r3, [pc, #168]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a20:	4a26      	ldr	r2, [pc, #152]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a28:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a38:	4a20      	ldr	r2, [pc, #128]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a40:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <HAL_UART_MspInit+0x1c4>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a4c:	2330      	movs	r3, #48	@ 0x30
 8000a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a64:	2307      	movs	r3, #7
 8000a66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4813      	ldr	r0, [pc, #76]	@ (8000ac0 <HAL_UART_MspInit+0x1c8>)
 8000a72:	f000 faed 	bl	8001050 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a76:	2302      	movs	r3, #2
 8000a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <HAL_UART_MspInit+0x1d0>)
 8000a9c:	f000 fad8 	bl	8001050 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2027      	movs	r0, #39	@ 0x27
 8000aa6:	f000 f9e2 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000aaa:	2027      	movs	r0, #39	@ 0x27
 8000aac:	f000 f9fb 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
}
 8000ab0:	bf00      	nop
 8000ab2:	37c8      	adds	r7, #200	@ 0xc8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40004c00 	.word	0x40004c00
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	40004800 	.word	0x40004800
 8000ac8:	48000400 	.word	0x48000400

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000ad0:	f001 fbd0 	bl	8002274 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x8>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f8a7 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <USART3_IRQHandler+0x10>)
 8000b36:	f002 fbc5 	bl	80032c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000bc 	.word	0x200000bc

08000b44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <UART4_IRQHandler+0x10>)
 8000b4a:	f002 fbbb 	bl	80032c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000028 	.word	0x20000028

08000b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b80:	f7ff ffea 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f004 fdc1 	bl	8005730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fcc3 	bl	8000538 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc0:	08005810 	.word	0x08005810
  ldr r2, =_sbss
 8000bc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc8:	20000158 	.word	0x20000158

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>

08000bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f93d 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f80e 	bl	8000c00 <HAL_InitTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	e001      	b.n	8000bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf0:	f7ff fe5e 	bl	80008b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c0c:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <HAL_InitTick+0x6c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d023      	beq.n	8000c5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c14:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <HAL_InitTick+0x70>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <HAL_InitTick+0x6c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f949 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10f      	bne.n	8000c56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d809      	bhi.n	8000c50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 f913 	bl	8000e6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c48:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <HAL_InitTick+0x74>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e007      	b.n	8000c60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	e004      	b.n	8000c60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e001      	b.n	8000c60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000154 	.word	0x20000154

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	@ (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000154 	.word	0x20000154

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	@ (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	@ (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	@ (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	@ 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	@ 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff8e 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff29 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff3e 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff8e 	bl	8000dac <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff31 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa2 	bl	8000e14 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d008      	beq.n	8000f04 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e040      	b.n	8000f86 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 020e 	bic.w	r2, r2, #14
 8000f12:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f22:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0201 	bic.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f38:	f003 021c 	and.w	r2, r3, #28
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f202 	lsl.w	r2, r1, r2
 8000f46:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00c      	beq.n	8000f74 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f72:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d005      	beq.n	8000fb6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2204      	movs	r2, #4
 8000fae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e047      	b.n	8001046 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 020e 	bic.w	r2, r2, #14
 8000fc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0201 	bic.w	r2, r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fe4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	f003 021c 	and.w	r2, r3, #28
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001002:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00c      	beq.n	8001026 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001016:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800101a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001024:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	4798      	blx	r3
    }
  }
  return status;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105e:	e166      	b.n	800132e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2101      	movs	r1, #1
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8158 	beq.w	8001328 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b01      	cmp	r3, #1
 8001082:	d005      	beq.n	8001090 <HAL_GPIO_Init+0x40>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d130      	bne.n	80010f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010c6:	2201      	movs	r2, #1
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	f003 0201 	and.w	r2, r3, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d017      	beq.n	800112e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d123      	bne.n	8001182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	220f      	movs	r2, #15
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	691a      	ldr	r2, [r3, #16]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	6939      	ldr	r1, [r7, #16]
 800117e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0203 	and.w	r2, r3, #3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80b2 	beq.w	8001328 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c4:	4b61      	ldr	r3, [pc, #388]	@ (800134c <HAL_GPIO_Init+0x2fc>)
 80011c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c8:	4a60      	ldr	r2, [pc, #384]	@ (800134c <HAL_GPIO_Init+0x2fc>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80011d0:	4b5e      	ldr	r3, [pc, #376]	@ (800134c <HAL_GPIO_Init+0x2fc>)
 80011d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001350 <HAL_GPIO_Init+0x300>)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001206:	d02b      	beq.n	8001260 <HAL_GPIO_Init+0x210>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a52      	ldr	r2, [pc, #328]	@ (8001354 <HAL_GPIO_Init+0x304>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d025      	beq.n	800125c <HAL_GPIO_Init+0x20c>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a51      	ldr	r2, [pc, #324]	@ (8001358 <HAL_GPIO_Init+0x308>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d01f      	beq.n	8001258 <HAL_GPIO_Init+0x208>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a50      	ldr	r2, [pc, #320]	@ (800135c <HAL_GPIO_Init+0x30c>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d019      	beq.n	8001254 <HAL_GPIO_Init+0x204>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a4f      	ldr	r2, [pc, #316]	@ (8001360 <HAL_GPIO_Init+0x310>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d013      	beq.n	8001250 <HAL_GPIO_Init+0x200>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a4e      	ldr	r2, [pc, #312]	@ (8001364 <HAL_GPIO_Init+0x314>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d00d      	beq.n	800124c <HAL_GPIO_Init+0x1fc>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a4d      	ldr	r2, [pc, #308]	@ (8001368 <HAL_GPIO_Init+0x318>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d007      	beq.n	8001248 <HAL_GPIO_Init+0x1f8>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a4c      	ldr	r2, [pc, #304]	@ (800136c <HAL_GPIO_Init+0x31c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d101      	bne.n	8001244 <HAL_GPIO_Init+0x1f4>
 8001240:	2307      	movs	r3, #7
 8001242:	e00e      	b.n	8001262 <HAL_GPIO_Init+0x212>
 8001244:	2308      	movs	r3, #8
 8001246:	e00c      	b.n	8001262 <HAL_GPIO_Init+0x212>
 8001248:	2306      	movs	r3, #6
 800124a:	e00a      	b.n	8001262 <HAL_GPIO_Init+0x212>
 800124c:	2305      	movs	r3, #5
 800124e:	e008      	b.n	8001262 <HAL_GPIO_Init+0x212>
 8001250:	2304      	movs	r3, #4
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x212>
 8001254:	2303      	movs	r3, #3
 8001256:	e004      	b.n	8001262 <HAL_GPIO_Init+0x212>
 8001258:	2302      	movs	r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x212>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <HAL_GPIO_Init+0x212>
 8001260:	2300      	movs	r3, #0
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	4093      	lsls	r3, r2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001272:	4937      	ldr	r1, [pc, #220]	@ (8001350 <HAL_GPIO_Init+0x300>)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001280:	4b3b      	ldr	r3, [pc, #236]	@ (8001370 <HAL_GPIO_Init+0x320>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a4:	4a32      	ldr	r2, [pc, #200]	@ (8001370 <HAL_GPIO_Init+0x320>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012aa:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <HAL_GPIO_Init+0x320>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ce:	4a28      	ldr	r2, [pc, #160]	@ (8001370 <HAL_GPIO_Init+0x320>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012d4:	4b26      	ldr	r3, [pc, #152]	@ (8001370 <HAL_GPIO_Init+0x320>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <HAL_GPIO_Init+0x320>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <HAL_GPIO_Init+0x320>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001322:	4a13      	ldr	r2, [pc, #76]	@ (8001370 <HAL_GPIO_Init+0x320>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	f47f ae91 	bne.w	8001060 <HAL_GPIO_Init+0x10>
  }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00
 8001360:	48001000 	.word	0x48001000
 8001364:	48001400 	.word	0x48001400
 8001368:	48001800 	.word	0x48001800
 800136c:	48001c00 	.word	0x48001c00
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001390:	e002      	b.n	8001398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43d9      	mvns	r1, r3
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	400b      	ands	r3, r1
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_PWREx_GetVoltageRange+0x3c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e8:	d102      	bne.n	80013f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80013ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ee:	e00b      	b.n	8001408 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <HAL_PWREx_GetVoltageRange+0x3c>)
 80013f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013fe:	d102      	bne.n	8001406 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001404:	e000      	b.n	8001408 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001406:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40007000 	.word	0x40007000

08001418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d141      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001426:	4b4b      	ldr	r3, [pc, #300]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800142e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001432:	d131      	bne.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001434:	4b47      	ldr	r3, [pc, #284]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800143a:	4a46      	ldr	r2, [pc, #280]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001444:	4b43      	ldr	r3, [pc, #268]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800144c:	4a41      	ldr	r2, [pc, #260]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001452:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001454:	4b40      	ldr	r3, [pc, #256]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2232      	movs	r2, #50	@ 0x32
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	4a3f      	ldr	r2, [pc, #252]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	0c9b      	lsrs	r3, r3, #18
 8001466:	3301      	adds	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146a:	e002      	b.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3b01      	subs	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001472:	4b38      	ldr	r3, [pc, #224]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147e:	d102      	bne.n	8001486 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f2      	bne.n	800146c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001486:	4b33      	ldr	r3, [pc, #204]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001492:	d158      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e057      	b.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001498:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149e:	4a2d      	ldr	r2, [pc, #180]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014a8:	e04d      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014b0:	d141      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b2:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014be:	d131      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c0:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014c6:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2232      	movs	r2, #50	@ 0x32
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4a1c      	ldr	r2, [pc, #112]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	0c9b      	lsrs	r3, r3, #18
 80014f2:	3301      	adds	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f6:	e002      	b.n	80014fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150a:	d102      	bne.n	8001512 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f2      	bne.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151e:	d112      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e011      	b.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001530:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001534:	e007      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001544:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40007000 	.word	0x40007000
 8001558:	20000000 	.word	0x20000000
 800155c:	431bde83 	.word	0x431bde83

08001560 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	f000 bc68 	b.w	8001e44 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001574:	4b97      	ldr	r3, [pc, #604]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157e:	4b95      	ldr	r3, [pc, #596]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80e6 	beq.w	8001762 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d007      	beq.n	80015ac <HAL_RCC_OscConfig+0x4c>
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	2b0c      	cmp	r3, #12
 80015a0:	f040 808d 	bne.w	80016be <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	f040 8089 	bne.w	80016be <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ac:	4b89      	ldr	r3, [pc, #548]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_RCC_OscConfig+0x66>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f000 bc3f 	b.w	8001e44 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015ca:	4b82      	ldr	r3, [pc, #520]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d004      	beq.n	80015e0 <HAL_RCC_OscConfig+0x80>
 80015d6:	4b7f      	ldr	r3, [pc, #508]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015de:	e005      	b.n	80015ec <HAL_RCC_OscConfig+0x8c>
 80015e0:	4b7c      	ldr	r3, [pc, #496]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80015e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d224      	bcs.n	800163a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fe59 	bl	80022ac <RCC_SetFlashLatencyFromMSIRange>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	f000 bc1f 	b.w	8001e44 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001606:	4b73      	ldr	r3, [pc, #460]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a72      	ldr	r2, [pc, #456]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b70      	ldr	r3, [pc, #448]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	496d      	ldr	r1, [pc, #436]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001624:	4b6b      	ldr	r3, [pc, #428]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	4968      	ldr	r1, [pc, #416]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	e025      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163a:	4b66      	ldr	r3, [pc, #408]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a65      	ldr	r2, [pc, #404]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b63      	ldr	r3, [pc, #396]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	4960      	ldr	r1, [pc, #384]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001658:	4b5e      	ldr	r3, [pc, #376]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	495b      	ldr	r1, [pc, #364]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fe18 	bl	80022ac <RCC_SetFlashLatencyFromMSIRange>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e3de      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001686:	f000 fd21 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800168a:	4602      	mov	r2, r0
 800168c:	4b51      	ldr	r3, [pc, #324]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	4950      	ldr	r1, [pc, #320]	@ (80017d8 <HAL_RCC_OscConfig+0x278>)
 8001698:	5ccb      	ldrb	r3, [r1, r3]
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	fa22 f303 	lsr.w	r3, r2, r3
 80016a2:	4a4e      	ldr	r2, [pc, #312]	@ (80017dc <HAL_RCC_OscConfig+0x27c>)
 80016a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016a6:	4b4e      	ldr	r3, [pc, #312]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff faa8 	bl	8000c00 <HAL_InitTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d052      	beq.n	8001760 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	e3c2      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d032      	beq.n	800172c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c6:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a42      	ldr	r2, [pc, #264]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fae5 	bl	8000ca0 <HAL_GetTick>
 80016d6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016da:	f7ff fae1 	bl	8000ca0 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e3ab      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ec:	4b39      	ldr	r3, [pc, #228]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f8:	4b36      	ldr	r3, [pc, #216]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a35      	ldr	r2, [pc, #212]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b33      	ldr	r3, [pc, #204]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	4930      	ldr	r1, [pc, #192]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001716:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	492b      	ldr	r1, [pc, #172]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
 800172a:	e01a      	b.n	8001762 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800172c:	4b29      	ldr	r3, [pc, #164]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a28      	ldr	r2, [pc, #160]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001738:	f7ff fab2 	bl	8000ca0 <HAL_GetTick>
 800173c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001740:	f7ff faae 	bl	8000ca0 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e378      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x1e0>
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001760:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d073      	beq.n	8001856 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d005      	beq.n	8001780 <HAL_RCC_OscConfig+0x220>
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d10e      	bne.n	8001798 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d10b      	bne.n	8001798 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d063      	beq.n	8001854 <HAL_RCC_OscConfig+0x2f4>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d15f      	bne.n	8001854 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e355      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a0:	d106      	bne.n	80017b0 <HAL_RCC_OscConfig+0x250>
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a0b      	ldr	r2, [pc, #44]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e025      	b.n	80017fc <HAL_RCC_OscConfig+0x29c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017b8:	d114      	bne.n	80017e4 <HAL_RCC_OscConfig+0x284>
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a02      	ldr	r2, [pc, #8]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e013      	b.n	80017fc <HAL_RCC_OscConfig+0x29c>
 80017d4:	40021000 	.word	0x40021000
 80017d8:	08005790 	.word	0x08005790
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000004 	.word	0x20000004
 80017e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b8c      	ldr	r3, [pc, #560]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a8b      	ldr	r2, [pc, #556]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff fa4c 	bl	8000ca0 <HAL_GetTick>
 8001808:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fa48 	bl	8000ca0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	@ 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e312      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181e:	4b81      	ldr	r3, [pc, #516]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x2ac>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fa38 	bl	8000ca0 <HAL_GetTick>
 8001830:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fa34 	bl	8000ca0 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	@ 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e2fe      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001846:	4b77      	ldr	r3, [pc, #476]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x2d4>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d060      	beq.n	8001924 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	2b04      	cmp	r3, #4
 8001866:	d005      	beq.n	8001874 <HAL_RCC_OscConfig+0x314>
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	2b0c      	cmp	r3, #12
 800186c:	d119      	bne.n	80018a2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d116      	bne.n	80018a2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001874:	4b6b      	ldr	r3, [pc, #428]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x32c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e2db      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b65      	ldr	r3, [pc, #404]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	061b      	lsls	r3, r3, #24
 800189a:	4962      	ldr	r1, [pc, #392]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a0:	e040      	b.n	8001924 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d023      	beq.n	80018f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a5d      	ldr	r2, [pc, #372]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff f9f3 	bl	8000ca0 <HAL_GetTick>
 80018ba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff f9ef 	bl	8000ca0 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e2b9      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d0:	4b54      	ldr	r3, [pc, #336]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b51      	ldr	r3, [pc, #324]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	061b      	lsls	r3, r3, #24
 80018ea:	494e      	ldr	r1, [pc, #312]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
 80018f0:	e018      	b.n	8001924 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff f9cf 	bl	8000ca0 <HAL_GetTick>
 8001902:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff f9cb 	bl	8000ca0 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e295      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001918:	4b42      	ldr	r3, [pc, #264]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8082 	beq.w	8001a36 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d05f      	beq.n	80019fa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800193a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001940:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699a      	ldr	r2, [r3, #24]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	429a      	cmp	r2, r3
 800194e:	d037      	beq.n	80019c0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e26d      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01b      	beq.n	80019aa <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001972:	4b2c      	ldr	r3, [pc, #176]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001978:	4a2a      	ldr	r2, [pc, #168]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001982:	f7ff f98d 	bl	8000ca0 <HAL_GetTick>
 8001986:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198a:	f7ff f989 	bl	8000ca0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b11      	cmp	r3, #17
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e253      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800199c:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ef      	bne.n	800198a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80019aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b0:	f023 0210 	bic.w	r2, r3, #16
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	491a      	ldr	r1, [pc, #104]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c0:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019c6:	4a17      	ldr	r2, [pc, #92]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff f966 	bl	8000ca0 <HAL_GetTick>
 80019d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff f962 	bl	8000ca0 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b11      	cmp	r3, #17
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e22c      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ef      	beq.n	80019d8 <HAL_RCC_OscConfig+0x478>
 80019f8:	e01d      	b.n	8001a36 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a00:	4a08      	ldr	r2, [pc, #32]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f949 	bl	8000ca0 <HAL_GetTick>
 8001a0e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff f945 	bl	8000ca0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	d903      	bls.n	8001a28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e20f      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
 8001a24:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a28:	4b83      	ldr	r3, [pc, #524]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ed      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 80bd 	beq.w	8001bbe <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a4a:	4b7b      	ldr	r3, [pc, #492]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10e      	bne.n	8001a74 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b78      	ldr	r3, [pc, #480]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5a:	4a77      	ldr	r2, [pc, #476]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a62:	4b75      	ldr	r3, [pc, #468]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a74:	4b71      	ldr	r3, [pc, #452]	@ (8001c3c <HAL_RCC_OscConfig+0x6dc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d118      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a80:	4b6e      	ldr	r3, [pc, #440]	@ (8001c3c <HAL_RCC_OscConfig+0x6dc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6d      	ldr	r2, [pc, #436]	@ (8001c3c <HAL_RCC_OscConfig+0x6dc>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff f908 	bl	8000ca0 <HAL_GetTick>
 8001a90:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a94:	f7ff f904 	bl	8000ca0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1ce      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa6:	4b65      	ldr	r3, [pc, #404]	@ (8001c3c <HAL_RCC_OscConfig+0x6dc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d02c      	beq.n	8001b18 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001abe:	4b5e      	ldr	r3, [pc, #376]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad0:	4959      	ldr	r1, [pc, #356]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ae4:	4b54      	ldr	r3, [pc, #336]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aea:	4a53      	ldr	r2, [pc, #332]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001af4:	4b50      	ldr	r3, [pc, #320]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afa:	4a4f      	ldr	r2, [pc, #316]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b04:	e018      	b.n	8001b38 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b06:	4b4c      	ldr	r3, [pc, #304]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b16:	e00f      	b.n	8001b38 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b18:	4b47      	ldr	r3, [pc, #284]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b1e:	4a46      	ldr	r2, [pc, #280]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b28:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2e:	4a42      	ldr	r2, [pc, #264]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d016      	beq.n	8001b6e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff f8ae 	bl	8000ca0 <HAL_GetTick>
 8001b44:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff f8aa 	bl	8000ca0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e172      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5e:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ed      	beq.n	8001b48 <HAL_RCC_OscConfig+0x5e8>
 8001b6c:	e01d      	b.n	8001baa <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f897 	bl	8000ca0 <HAL_GetTick>
 8001b72:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff f893 	bl	8000ca0 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e15b      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ed      	bne.n	8001b76 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001b9a:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ba0:	4a25      	ldr	r2, [pc, #148]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ba6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001baa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb2:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	4a20      	ldr	r2, [pc, #128]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001bb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d041      	beq.n	8001c4e <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bd8:	4a17      	ldr	r2, [pc, #92]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7ff f85d 	bl	8000ca0 <HAL_GetTick>
 8001be6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bea:	f7ff f859 	bl	8000ca0 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e123      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0ef      	beq.n	8001bea <HAL_RCC_OscConfig+0x68a>
 8001c0a:	e020      	b.n	8001c4e <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c12:	4a09      	ldr	r2, [pc, #36]	@ (8001c38 <HAL_RCC_OscConfig+0x6d8>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7ff f840 	bl	8000ca0 <HAL_GetTick>
 8001c20:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c22:	e00d      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c24:	f7ff f83c 	bl	8000ca0 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d906      	bls.n	8001c40 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e106      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c40:	4b82      	ldr	r3, [pc, #520]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ea      	bne.n	8001c24 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80f5 	beq.w	8001e42 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	f040 80cb 	bne.w	8001df8 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c62:	4b7a      	ldr	r3, [pc, #488]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0203 	and.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d12c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c80:	3b01      	subs	r3, #1
 8001c82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d123      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d11b      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d113      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d109      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	085b      	lsrs	r3, r3, #1
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d06d      	beq.n	8001dac <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d068      	beq.n	8001da8 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0a8      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b56      	ldr	r3, [pc, #344]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a55      	ldr	r2, [pc, #340]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001cf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cfc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cfe:	f7fe ffcf 	bl	8000ca0 <HAL_GetTick>
 8001d02:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7fe ffcb 	bl	8000ca0 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e095      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d18:	4b4c      	ldr	r3, [pc, #304]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f0      	bne.n	8001d06 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d24:	4b49      	ldr	r3, [pc, #292]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	4b49      	ldr	r3, [pc, #292]	@ (8001e50 <HAL_RCC_OscConfig+0x8f0>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d34:	3a01      	subs	r2, #1
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	4311      	orrs	r1, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d3e:	0212      	lsls	r2, r2, #8
 8001d40:	4311      	orrs	r1, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d46:	0852      	lsrs	r2, r2, #1
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	0552      	lsls	r2, r2, #21
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d52:	0852      	lsrs	r2, r2, #1
 8001d54:	3a01      	subs	r2, #1
 8001d56:	0652      	lsls	r2, r2, #25
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d5e:	06d2      	lsls	r2, r2, #27
 8001d60:	430a      	orrs	r2, r1
 8001d62:	493a      	ldr	r1, [pc, #232]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d68:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a37      	ldr	r2, [pc, #220]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d74:	4b35      	ldr	r3, [pc, #212]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4a34      	ldr	r2, [pc, #208]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d80:	f7fe ff8e 	bl	8000ca0 <HAL_GetTick>
 8001d84:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe ff8a 	bl	8000ca0 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e054      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da6:	e04c      	b.n	8001e42 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e04b      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d144      	bne.n	8001e42 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001db8:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a23      	ldr	r2, [pc, #140]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc4:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4a20      	ldr	r2, [pc, #128]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dd0:	f7fe ff66 	bl	8000ca0 <HAL_GetTick>
 8001dd4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe ff62 	bl	8000ca0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e02c      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x878>
 8001df6:	e024      	b.n	8001e42 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d01f      	beq.n	8001e3e <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001e04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7fe ff49 	bl	8000ca0 <HAL_GetTick>
 8001e0e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7fe ff45 	bl	8000ca0 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e00f      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	4905      	ldr	r1, [pc, #20]	@ (8001e4c <HAL_RCC_OscConfig+0x8ec>)
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <HAL_RCC_OscConfig+0x8f4>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]
 8001e3c:	e001      	b.n	8001e42 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3728      	adds	r7, #40	@ 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	019d800c 	.word	0x019d800c
 8001e54:	feeefffc 	.word	0xfeeefffc

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e11d      	b.n	80020ac <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b90      	ldr	r3, [pc, #576]	@ (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d910      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 020f 	bic.w	r2, r3, #15
 8001e86:	498b      	ldr	r1, [pc, #556]	@ (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b89      	ldr	r3, [pc, #548]	@ (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e105      	b.n	80020ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d010      	beq.n	8001ece <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4b81      	ldr	r3, [pc, #516]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d908      	bls.n	8001ece <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	497b      	ldr	r1, [pc, #492]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d079      	beq.n	8001fce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d11e      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	4b75      	ldr	r3, [pc, #468]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0dc      	b.n	80020ac <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001ef2:	f000 fa35 	bl	8002360 <RCC_GetSysClockFreqFromPLLSource>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a70      	ldr	r2, [pc, #448]	@ (80020bc <HAL_RCC_ClockConfig+0x264>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d946      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001efe:	4b6e      	ldr	r3, [pc, #440]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d140      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f0a:	4b6b      	ldr	r3, [pc, #428]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f12:	4a69      	ldr	r2, [pc, #420]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e035      	b.n	8001f8c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f28:	4b63      	ldr	r3, [pc, #396]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d115      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0b9      	b.n	80020ac <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f40:	4b5d      	ldr	r3, [pc, #372]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0ad      	b.n	80020ac <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f50:	4b59      	ldr	r3, [pc, #356]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0a5      	b.n	80020ac <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f60:	f000 f8b4 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4a55      	ldr	r2, [pc, #340]	@ (80020bc <HAL_RCC_ClockConfig+0x264>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d90f      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f6c:	4b52      	ldr	r3, [pc, #328]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f78:	4b4f      	ldr	r3, [pc, #316]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f80:	4a4d      	ldr	r2, [pc, #308]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f86:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f8c:	4b4a      	ldr	r3, [pc, #296]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 0203 	bic.w	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4947      	ldr	r1, [pc, #284]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9e:	f7fe fe7f 	bl	8000ca0 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa6:	f7fe fe7b 	bl	8000ca0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e077      	b.n	80020ac <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbc:	4b3e      	ldr	r3, [pc, #248]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 020c 	and.w	r2, r3, #12
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d1eb      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b80      	cmp	r3, #128	@ 0x80
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fd4:	4b38      	ldr	r3, [pc, #224]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a37      	ldr	r2, [pc, #220]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fde:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d010      	beq.n	800200e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	4b31      	ldr	r3, [pc, #196]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d208      	bcs.n	800200e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	492b      	ldr	r1, [pc, #172]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200e:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d210      	bcs.n	800203e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 020f 	bic.w	r2, r3, #15
 8002024:	4923      	ldr	r1, [pc, #140]	@ (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d001      	beq.n	800203e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e036      	b.n	80020ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4918      	ldr	r1, [pc, #96]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002068:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4910      	ldr	r1, [pc, #64]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8002078:	4313      	orrs	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800207c:	f000 f826 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <HAL_RCC_ClockConfig+0x268>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_RCC_ClockConfig+0x26c>)
 800209a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_RCC_ClockConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fdad 	bl	8000c00 <HAL_InitTick>
 80020a6:	4603      	mov	r3, r0
 80020a8:	73fb      	strb	r3, [r7, #15]

  return status;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	04c4b400 	.word	0x04c4b400
 80020c0:	08005790 	.word	0x08005790
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020da:	4b3e      	ldr	r3, [pc, #248]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e4:	4b3b      	ldr	r3, [pc, #236]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x34>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d121      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d11e      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002100:	4b34      	ldr	r3, [pc, #208]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800210c:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	e005      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800211c:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002128:	4a2b      	ldr	r2, [pc, #172]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d102      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002144:	4b25      	ldr	r3, [pc, #148]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	e004      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d101      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002150:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002152:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d134      	bne.n	80021c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800215a:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0xa6>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d003      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0xac>
 8002170:	e005      	b.n	800217e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002172:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002174:	617b      	str	r3, [r7, #20]
      break;
 8002176:	e005      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002178:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800217a:	617b      	str	r3, [r7, #20]
      break;
 800217c:	e002      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	617b      	str	r3, [r7, #20]
      break;
 8002182:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002184:	4b13      	ldr	r3, [pc, #76]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3301      	adds	r3, #1
 8002190:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	fb03 f202 	mul.w	r2, r3, r2
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	0e5b      	lsrs	r3, r3, #25
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	3301      	adds	r3, #1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021c4:	69bb      	ldr	r3, [r7, #24]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	080057a8 	.word	0x080057a8
 80021dc:	00f42400 	.word	0x00f42400
 80021e0:	007a1200 	.word	0x007a1200

080021e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002200:	f7ff fff0 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4904      	ldr	r1, [pc, #16]	@ (8002224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	080057a0 	.word	0x080057a0

08002228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800222c:	f7ff ffda 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	0adb      	lsrs	r3, r3, #11
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4904      	ldr	r1, [pc, #16]	@ (8002250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	080057a0 	.word	0x080057a0

08002254 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_RCC_EnableCSS+0x1c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <HAL_RCC_EnableCSS+0x1c>)
 800225e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000

08002274 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002278:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <HAL_RCC_NMI_IRQHandler+0x24>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002284:	d105      	bne.n	8002292 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002286:	f000 f809 	bl	800229c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800228a:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_RCC_NMI_IRQHandler+0x24>)
 800228c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002290:	621a      	str	r2, [r3, #32]
  }
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000

0800229c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022c4:	f7ff f888 	bl	80013d8 <HAL_PWREx_GetVoltageRange>
 80022c8:	6178      	str	r0, [r7, #20]
 80022ca:	e014      	b.n	80022f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	4a21      	ldr	r2, [pc, #132]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022e4:	f7ff f878 	bl	80013d8 <HAL_PWREx_GetVoltageRange>
 80022e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022fc:	d10b      	bne.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b80      	cmp	r3, #128	@ 0x80
 8002302:	d913      	bls.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2ba0      	cmp	r3, #160	@ 0xa0
 8002308:	d902      	bls.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800230a:	2302      	movs	r3, #2
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	e00d      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002310:	2301      	movs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	e00a      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b7f      	cmp	r3, #127	@ 0x7f
 800231a:	d902      	bls.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800231c:	2302      	movs	r3, #2
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e004      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b70      	cmp	r3, #112	@ 0x70
 8002326:	d101      	bne.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002328:	2301      	movs	r3, #1
 800232a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 020f 	bic.w	r2, r3, #15
 8002334:	4909      	ldr	r1, [pc, #36]	@ (800235c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800233c:	4b07      	ldr	r3, [pc, #28]	@ (800235c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	40022000 	.word	0x40022000

08002360 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002366:	4b2d      	ldr	r3, [pc, #180]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d00b      	beq.n	800238e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d825      	bhi.n	80023c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d008      	beq.n	8002394 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d11f      	bne.n	80023c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002388:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800238a:	613b      	str	r3, [r7, #16]
    break;
 800238c:	e01f      	b.n	80023ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800238e:	4b25      	ldr	r3, [pc, #148]	@ (8002424 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002390:	613b      	str	r3, [r7, #16]
    break;
 8002392:	e01c      	b.n	80023ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d107      	bne.n	80023b0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e005      	b.n	80023bc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80023bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002428 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	613b      	str	r3, [r7, #16]
    break;
 80023c6:	e002      	b.n	80023ce <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
    break;
 80023cc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	3301      	adds	r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	fb03 f202 	mul.w	r2, r3, r2
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0e5b      	lsrs	r3, r3, #25
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	3301      	adds	r3, #1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800240e:	683b      	ldr	r3, [r7, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40021000 	.word	0x40021000
 8002420:	00f42400 	.word	0x00f42400
 8002424:	007a1200 	.word	0x007a1200
 8002428:	080057a8 	.word	0x080057a8

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002434:	2300      	movs	r3, #0
 8002436:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002438:	2300      	movs	r3, #0
 800243a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002444:	2b00      	cmp	r3, #0
 8002446:	d040      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800244c:	2b80      	cmp	r3, #128	@ 0x80
 800244e:	d02a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002450:	2b80      	cmp	r3, #128	@ 0x80
 8002452:	d825      	bhi.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002454:	2b60      	cmp	r3, #96	@ 0x60
 8002456:	d026      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002458:	2b60      	cmp	r3, #96	@ 0x60
 800245a:	d821      	bhi.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800245c:	2b40      	cmp	r3, #64	@ 0x40
 800245e:	d006      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002460:	2b40      	cmp	r3, #64	@ 0x40
 8002462:	d81d      	bhi.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d010      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800246c:	e018      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800246e:	4b89      	ldr	r3, [pc, #548]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4a88      	ldr	r2, [pc, #544]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002478:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800247a:	e015      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fb3e 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800248c:	e00c      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3320      	adds	r3, #32
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fc29 	bl	8002cec <RCCEx_PLLSAI2_Config>
 800249a:	4603      	mov	r3, r0
 800249c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800249e:	e003      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	74fb      	strb	r3, [r7, #19]
      break;
 80024a4:	e000      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80024a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10b      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024ae:	4b79      	ldr	r3, [pc, #484]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024b4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024bc:	4975      	ldr	r1, [pc, #468]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80024c4:	e001      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d047      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024de:	d030      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e4:	d82a      	bhi.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024ea:	d02a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024f0:	d824      	bhi.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024f6:	d008      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80024f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024fc:	d81e      	bhi.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002506:	d010      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002508:	e018      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800250a:	4b62      	ldr	r3, [pc, #392]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	4a61      	ldr	r2, [pc, #388]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002514:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002516:	e015      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f000 faf0 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002528:	e00c      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3320      	adds	r3, #32
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fbdb 	bl	8002cec <RCCEx_PLLSAI2_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800253a:	e003      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	74fb      	strb	r3, [r7, #19]
      break;
 8002540:	e000      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10b      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800254a:	4b52      	ldr	r3, [pc, #328]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800254c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002558:	494e      	ldr	r1, [pc, #312]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002560:	e001      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 809f 	beq.w	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002578:	4b46      	ldr	r3, [pc, #280]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b41      	ldr	r3, [pc, #260]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	4a40      	ldr	r2, [pc, #256]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	@ 0x58
 800259a:	4b3e      	ldr	r3, [pc, #248]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a6:	2301      	movs	r3, #1
 80025a8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025b6:	f7fe fb73 	bl	8000ca0 <HAL_GetTick>
 80025ba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025bc:	e009      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025be:	f7fe fb6f 	bl	8000ca0 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d902      	bls.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	74fb      	strb	r3, [r7, #19]
        break;
 80025d0:	e005      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025d2:	4b31      	ldr	r3, [pc, #196]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0ef      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d15b      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01f      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d019      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002602:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800260c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800260e:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002614:	4a1f      	ldr	r2, [pc, #124]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800261e:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002624:	4a1b      	ldr	r2, [pc, #108]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800262e:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d016      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fb2e 	bl	8000ca0 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002646:	e00b      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002648:	f7fe fb2a 	bl	8000ca0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d902      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	74fb      	strb	r3, [r7, #19]
            break;
 800265e:	e006      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002660:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0ec      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10c      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002674:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002684:	4903      	ldr	r1, [pc, #12]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800268c:	e008      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	74bb      	strb	r3, [r7, #18]
 8002692:	e005      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002694:	40021000 	.word	0x40021000
 8002698:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a0:	7c7b      	ldrb	r3, [r7, #17]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a6:	4ba0      	ldr	r3, [pc, #640]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	4a9f      	ldr	r2, [pc, #636]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026be:	4b9a      	ldr	r3, [pc, #616]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c4:	f023 0203 	bic.w	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	4996      	ldr	r1, [pc, #600]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026e0:	4b91      	ldr	r3, [pc, #580]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e6:	f023 020c 	bic.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	498e      	ldr	r1, [pc, #568]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002702:	4b89      	ldr	r3, [pc, #548]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002708:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002710:	4985      	ldr	r1, [pc, #532]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002724:	4b80      	ldr	r3, [pc, #512]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002732:	497d      	ldr	r1, [pc, #500]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002746:	4b78      	ldr	r3, [pc, #480]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002754:	4974      	ldr	r1, [pc, #464]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002768:	4b6f      	ldr	r3, [pc, #444]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002776:	496c      	ldr	r1, [pc, #432]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800278a:	4b67      	ldr	r3, [pc, #412]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002790:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002798:	4963      	ldr	r1, [pc, #396]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ba:	495b      	ldr	r1, [pc, #364]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ce:	4b56      	ldr	r3, [pc, #344]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027dc:	4952      	ldr	r1, [pc, #328]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fe:	494a      	ldr	r1, [pc, #296]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002812:	4b45      	ldr	r3, [pc, #276]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002818:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002820:	4941      	ldr	r1, [pc, #260]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002834:	4b3c      	ldr	r3, [pc, #240]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002836:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002842:	4939      	ldr	r1, [pc, #228]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d028      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002856:	4b34      	ldr	r3, [pc, #208]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002864:	4930      	ldr	r1, [pc, #192]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002874:	d106      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002876:	4b2c      	ldr	r3, [pc, #176]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4a2b      	ldr	r2, [pc, #172]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800287c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002880:	60d3      	str	r3, [r2, #12]
 8002882:	e011      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002888:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800288c:	d10c      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	2101      	movs	r1, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f000 f935 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d04d      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028bc:	d108      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80028be:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028c4:	4a18      	ldr	r2, [pc, #96]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ca:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80028ce:	e012      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80028d0:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028d6:	4a14      	ldr	r2, [pc, #80]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028dc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028ee:	490e      	ldr	r1, [pc, #56]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028fe:	d106      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002900:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a08      	ldr	r2, [pc, #32]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800290a:	60d3      	str	r3, [r2, #12]
 800290c:	e020      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002912:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002916:	d109      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002918:	4b03      	ldr	r3, [pc, #12]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a02      	ldr	r2, [pc, #8]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002922:	60d3      	str	r3, [r2, #12]
 8002924:	e014      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002930:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002934:	d10c      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f8e1 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d028      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800295c:	4b68      	ldr	r3, [pc, #416]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800296a:	4965      	ldr	r1, [pc, #404]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800297a:	d106      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800297c:	4b60      	ldr	r3, [pc, #384]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a5f      	ldr	r2, [pc, #380]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002986:	60d3      	str	r3, [r2, #12]
 8002988:	e011      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800298e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002992:	d10c      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	2101      	movs	r1, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f8b2 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80029aa:	7cfb      	ldrb	r3, [r7, #19]
 80029ac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01e      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029ba:	4b51      	ldr	r3, [pc, #324]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ca:	494d      	ldr	r1, [pc, #308]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2102      	movs	r1, #2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 f88d 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a04:	4b3e      	ldr	r3, [pc, #248]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a0a:	f023 0204 	bic.w	r2, r3, #4
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a14:	493a      	ldr	r1, [pc, #232]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00b      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a28:	4b35      	ldr	r3, [pc, #212]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a2e:	f023 0218 	bic.w	r2, r3, #24
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a38:	4931      	ldr	r1, [pc, #196]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d035      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2b      	ldr	r2, [pc, #172]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a58:	f7fe f922 	bl	8000ca0 <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a5e:	e009      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a60:	f7fe f91e 	bl	8000ca0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d902      	bls.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	74fb      	strb	r3, [r7, #19]
        break;
 8002a72:	e005      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a74:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ef      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d113      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8002a86:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a96:	491a      	ldr	r1, [pc, #104]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3320      	adds	r3, #32
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 f921 	bl	8002cec <RCCEx_PLLSAI2_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d017      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002aca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad4:	490a      	ldr	r1, [pc, #40]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002af2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002af4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000

08002b04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b12:	4b72      	ldr	r3, [pc, #456]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00e      	beq.n	8002b3c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0203 	and.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d103      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
       ||
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d142      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	e03f      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d018      	beq.n	8002b76 <RCCEx_PLLSAI1_Config+0x72>
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d825      	bhi.n	8002b94 <RCCEx_PLLSAI1_Config+0x90>
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d002      	beq.n	8002b52 <RCCEx_PLLSAI1_Config+0x4e>
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d009      	beq.n	8002b64 <RCCEx_PLLSAI1_Config+0x60>
 8002b50:	e020      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b52:	4b62      	ldr	r3, [pc, #392]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11d      	bne.n	8002b9a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b62:	e01a      	b.n	8002b9a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b64:	4b5d      	ldr	r3, [pc, #372]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d116      	bne.n	8002b9e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b74:	e013      	b.n	8002b9e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b76:	4b59      	ldr	r3, [pc, #356]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10f      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b82:	4b56      	ldr	r3, [pc, #344]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b92:	e006      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      break;
 8002b98:	e004      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e002      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e000      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ba2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002baa:	4b4c      	ldr	r3, [pc, #304]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4949      	ldr	r1, [pc, #292]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8086 	bne.w	8002cd0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bc4:	4b45      	ldr	r3, [pc, #276]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a44      	ldr	r2, [pc, #272]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd0:	f7fe f866 	bl	8000ca0 <HAL_GetTick>
 8002bd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bd6:	e009      	b.n	8002bec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bd8:	f7fe f862 	bl	8000ca0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d902      	bls.n	8002bec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bea:	e005      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bec:	4b3b      	ldr	r3, [pc, #236]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ef      	bne.n	8002bd8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d168      	bne.n	8002cd0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d113      	bne.n	8002c2c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c04:	4b35      	ldr	r3, [pc, #212]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	4b35      	ldr	r3, [pc, #212]	@ (8002ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6892      	ldr	r2, [r2, #8]
 8002c10:	0211      	lsls	r1, r2, #8
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68d2      	ldr	r2, [r2, #12]
 8002c16:	06d2      	lsls	r2, r2, #27
 8002c18:	4311      	orrs	r1, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6852      	ldr	r2, [r2, #4]
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	0112      	lsls	r2, r2, #4
 8002c22:	430a      	orrs	r2, r1
 8002c24:	492d      	ldr	r1, [pc, #180]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	610b      	str	r3, [r1, #16]
 8002c2a:	e02d      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d115      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c32:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6892      	ldr	r2, [r2, #8]
 8002c3e:	0211      	lsls	r1, r2, #8
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6912      	ldr	r2, [r2, #16]
 8002c44:	0852      	lsrs	r2, r2, #1
 8002c46:	3a01      	subs	r2, #1
 8002c48:	0552      	lsls	r2, r2, #21
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6852      	ldr	r2, [r2, #4]
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	430a      	orrs	r2, r1
 8002c56:	4921      	ldr	r1, [pc, #132]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	610b      	str	r3, [r1, #16]
 8002c5c:	e014      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	4b21      	ldr	r3, [pc, #132]	@ (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6892      	ldr	r2, [r2, #8]
 8002c6a:	0211      	lsls	r1, r2, #8
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6952      	ldr	r2, [r2, #20]
 8002c70:	0852      	lsrs	r2, r2, #1
 8002c72:	3a01      	subs	r2, #1
 8002c74:	0652      	lsls	r2, r2, #25
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6852      	ldr	r2, [r2, #4]
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	430a      	orrs	r2, r1
 8002c82:	4916      	ldr	r1, [pc, #88]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c88:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a13      	ldr	r2, [pc, #76]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe f804 	bl	8000ca0 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c9a:	e009      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c9c:	f7fe f800 	bl	8000ca0 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d902      	bls.n	8002cb0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	73fb      	strb	r3, [r7, #15]
          break;
 8002cae:	e005      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	4904      	ldr	r1, [pc, #16]	@ (8002cdc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	07ff800f 	.word	0x07ff800f
 8002ce4:	ff9f800f 	.word	0xff9f800f
 8002ce8:	f9ff800f 	.word	0xf9ff800f

08002cec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cfa:	4b72      	ldr	r3, [pc, #456]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00e      	beq.n	8002d24 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d06:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0203 	and.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d103      	bne.n	8002d1e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
       ||
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d142      	bne.n	8002da4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e03f      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d018      	beq.n	8002d5e <RCCEx_PLLSAI2_Config+0x72>
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d825      	bhi.n	8002d7c <RCCEx_PLLSAI2_Config+0x90>
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d002      	beq.n	8002d3a <RCCEx_PLLSAI2_Config+0x4e>
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d009      	beq.n	8002d4c <RCCEx_PLLSAI2_Config+0x60>
 8002d38:	e020      	b.n	8002d7c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d3a:	4b62      	ldr	r3, [pc, #392]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11d      	bne.n	8002d82 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4a:	e01a      	b.n	8002d82 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d4c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d116      	bne.n	8002d86 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5c:	e013      	b.n	8002d86 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d5e:	4b59      	ldr	r3, [pc, #356]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d6a:	4b56      	ldr	r3, [pc, #344]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d7a:	e006      	b.n	8002d8a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d80:	e004      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d82:	bf00      	nop
 8002d84:	e002      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d108      	bne.n	8002da4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002d92:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4949      	ldr	r1, [pc, #292]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 8086 	bne.w	8002eb8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dac:	4b45      	ldr	r3, [pc, #276]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a44      	ldr	r2, [pc, #272]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db8:	f7fd ff72 	bl	8000ca0 <HAL_GetTick>
 8002dbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dbe:	e009      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dc0:	f7fd ff6e 	bl	8000ca0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d902      	bls.n	8002dd4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	73fb      	strb	r3, [r7, #15]
        break;
 8002dd2:	e005      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ef      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d168      	bne.n	8002eb8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d113      	bne.n	8002e14 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dec:	4b35      	ldr	r3, [pc, #212]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	4b35      	ldr	r3, [pc, #212]	@ (8002ec8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6892      	ldr	r2, [r2, #8]
 8002df8:	0211      	lsls	r1, r2, #8
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68d2      	ldr	r2, [r2, #12]
 8002dfe:	06d2      	lsls	r2, r2, #27
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6852      	ldr	r2, [r2, #4]
 8002e06:	3a01      	subs	r2, #1
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	492d      	ldr	r1, [pc, #180]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	614b      	str	r3, [r1, #20]
 8002e12:	e02d      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d115      	bne.n	8002e46 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <RCCEx_PLLSAI2_Config+0x1e0>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6892      	ldr	r2, [r2, #8]
 8002e26:	0211      	lsls	r1, r2, #8
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6912      	ldr	r2, [r2, #16]
 8002e2c:	0852      	lsrs	r2, r2, #1
 8002e2e:	3a01      	subs	r2, #1
 8002e30:	0552      	lsls	r2, r2, #21
 8002e32:	4311      	orrs	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6852      	ldr	r2, [r2, #4]
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	4921      	ldr	r1, [pc, #132]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	614b      	str	r3, [r1, #20]
 8002e44:	e014      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e46:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	4b21      	ldr	r3, [pc, #132]	@ (8002ed0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6892      	ldr	r2, [r2, #8]
 8002e52:	0211      	lsls	r1, r2, #8
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6952      	ldr	r2, [r2, #20]
 8002e58:	0852      	lsrs	r2, r2, #1
 8002e5a:	3a01      	subs	r2, #1
 8002e5c:	0652      	lsls	r2, r2, #25
 8002e5e:	4311      	orrs	r1, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6852      	ldr	r2, [r2, #4]
 8002e64:	3a01      	subs	r2, #1
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	4916      	ldr	r1, [pc, #88]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e70:	4b14      	ldr	r3, [pc, #80]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a13      	ldr	r2, [pc, #76]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fd ff10 	bl	8000ca0 <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e82:	e009      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e84:	f7fd ff0c 	bl	8000ca0 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d902      	bls.n	8002e98 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	73fb      	strb	r3, [r7, #15]
          break;
 8002e96:	e005      	b.n	8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ef      	beq.n	8002e84 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	4904      	ldr	r1, [pc, #16]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	07ff800f 	.word	0x07ff800f
 8002ecc:	ff9f800f 	.word	0xff9f800f
 8002ed0:	f9ff800f 	.word	0xf9ff800f

08002ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e042      	b.n	8002f6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7fd fcfd 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2224      	movs	r2, #36	@ 0x24
 8002f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f001 f82e 	bl	8003f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fd2f 	bl	8003988 <UART_SetConfig>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e01b      	b.n	8002f6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f001 f8ad 	bl	80040c4 <UART_CheckIdleState>
 8002f6a:	4603      	mov	r3, r0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	@ 0x28
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	f040 80b5 	bne.w	80030fa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_UART_Receive+0x28>
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0ad      	b.n	80030fc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2222      	movs	r2, #34	@ 0x22
 8002fac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb6:	f7fd fe73 	bl	8000ca0 <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_UART_Receive+0x80>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_UART_Receive+0x76>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002fe4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002fe8:	e02d      	b.n	8003046 <HAL_UART_Receive+0xd2>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22ff      	movs	r2, #255	@ 0xff
 8002fee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002ff2:	e028      	b.n	8003046 <HAL_UART_Receive+0xd2>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10d      	bne.n	8003018 <HAL_UART_Receive+0xa4>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <HAL_UART_Receive+0x9a>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	22ff      	movs	r2, #255	@ 0xff
 8003008:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800300c:	e01b      	b.n	8003046 <HAL_UART_Receive+0xd2>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	227f      	movs	r2, #127	@ 0x7f
 8003012:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003016:	e016      	b.n	8003046 <HAL_UART_Receive+0xd2>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003020:	d10d      	bne.n	800303e <HAL_UART_Receive+0xca>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_UART_Receive+0xc0>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	227f      	movs	r2, #127	@ 0x7f
 800302e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003032:	e008      	b.n	8003046 <HAL_UART_Receive+0xd2>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	223f      	movs	r2, #63	@ 0x3f
 8003038:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800303c:	e003      	b.n	8003046 <HAL_UART_Receive+0xd2>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800304c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003056:	d108      	bne.n	800306a <HAL_UART_Receive+0xf6>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	e003      	b.n	8003072 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003072:	e036      	b.n	80030e2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	2120      	movs	r1, #32
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f001 f8ca 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e032      	b.n	80030fc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10c      	bne.n	80030b6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	8a7b      	ldrh	r3, [r7, #18]
 80030a6:	4013      	ands	r3, r2
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	3302      	adds	r3, #2
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e00c      	b.n	80030d0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	8a7b      	ldrh	r3, [r7, #18]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	4013      	ands	r3, r2
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1c2      	bne.n	8003074 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003104:	b480      	push	{r7}
 8003106:	b091      	sub	sp, #68	@ 0x44
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003118:	2b20      	cmp	r3, #32
 800311a:	d178      	bne.n	800320e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_UART_Transmit_IT+0x24>
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e071      	b.n	8003210 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2221      	movs	r2, #33	@ 0x21
 8003154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800315c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003160:	d12a      	bne.n	80031b8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800316a:	d107      	bne.n	800317c <HAL_UART_Transmit_IT+0x78>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a29      	ldr	r2, [pc, #164]	@ (800321c <HAL_UART_Transmit_IT+0x118>)
 8003178:	679a      	str	r2, [r3, #120]	@ 0x78
 800317a:	e002      	b.n	8003182 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a28      	ldr	r2, [pc, #160]	@ (8003220 <HAL_UART_Transmit_IT+0x11c>)
 8003180:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3308      	adds	r3, #8
 8003188:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003198:	63bb      	str	r3, [r7, #56]	@ 0x38
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3308      	adds	r3, #8
 80031a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80031a4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80031b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e5      	bne.n	8003182 <HAL_UART_Transmit_IT+0x7e>
 80031b6:	e028      	b.n	800320a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c0:	d107      	bne.n	80031d2 <HAL_UART_Transmit_IT+0xce>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a15      	ldr	r2, [pc, #84]	@ (8003224 <HAL_UART_Transmit_IT+0x120>)
 80031ce:	679a      	str	r2, [r3, #120]	@ 0x78
 80031d0:	e002      	b.n	80031d8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a14      	ldr	r2, [pc, #80]	@ (8003228 <HAL_UART_Transmit_IT+0x124>)
 80031d6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	613b      	str	r3, [r7, #16]
   return(result);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f6:	623b      	str	r3, [r7, #32]
 80031f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	69f9      	ldr	r1, [r7, #28]
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	61bb      	str	r3, [r7, #24]
   return(result);
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e6      	bne.n	80031d8 <HAL_UART_Transmit_IT+0xd4>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3744      	adds	r7, #68	@ 0x44
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	0800488b 	.word	0x0800488b
 8003220:	080047ab 	.word	0x080047ab
 8003224:	080046e9 	.word	0x080046e9
 8003228:	08004631 	.word	0x08004631

0800322c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	@ 0x28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003240:	2b20      	cmp	r3, #32
 8003242:	d137      	bne.n	80032b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_UART_Receive_IT+0x24>
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e030      	b.n	80032b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a18      	ldr	r2, [pc, #96]	@ (80032c0 <HAL_UART_Receive_IT+0x94>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d01f      	beq.n	80032a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d018      	beq.n	80032a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	613b      	str	r3, [r7, #16]
   return(result);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	69f9      	ldr	r1, [r7, #28]
 8003296:	6a3a      	ldr	r2, [r7, #32]
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	61bb      	str	r3, [r7, #24]
   return(result);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e6      	bne.n	8003272 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f001 f822 	bl	80042f4 <UART_Start_Receive_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	e000      	b.n	80032b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3728      	adds	r7, #40	@ 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40008000 	.word	0x40008000

080032c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b0ba      	sub	sp, #232	@ 0xe8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80032ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80032f2:	4013      	ands	r3, r2
 80032f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80032f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11b      	bne.n	8003338 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800331c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8300 	beq.w	800392e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
      }
      return;
 8003336:	e2fa      	b.n	800392e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8123 	beq.w	8003588 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003342:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003346:	4b8d      	ldr	r3, [pc, #564]	@ (800357c <HAL_UART_IRQHandler+0x2b8>)
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800334e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003352:	4b8b      	ldr	r3, [pc, #556]	@ (8003580 <HAL_UART_IRQHandler+0x2bc>)
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8116 	beq.w	8003588 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800335c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d011      	beq.n	800338c <HAL_UART_IRQHandler+0xc8>
 8003368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00b      	beq.n	800338c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2201      	movs	r2, #1
 800337a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	f043 0201 	orr.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800338c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d011      	beq.n	80033bc <HAL_UART_IRQHandler+0xf8>
 8003398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00b      	beq.n	80033bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2202      	movs	r2, #2
 80033aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b2:	f043 0204 	orr.w	r2, r3, #4
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d011      	beq.n	80033ec <HAL_UART_IRQHandler+0x128>
 80033c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2204      	movs	r2, #4
 80033da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e2:	f043 0202 	orr.w	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d017      	beq.n	8003428 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80033f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003404:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003408:	4b5c      	ldr	r3, [pc, #368]	@ (800357c <HAL_UART_IRQHandler+0x2b8>)
 800340a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00b      	beq.n	8003428 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2208      	movs	r2, #8
 8003416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341e:	f043 0208 	orr.w	r2, r3, #8
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003430:	2b00      	cmp	r3, #0
 8003432:	d012      	beq.n	800345a <HAL_UART_IRQHandler+0x196>
 8003434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003438:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00c      	beq.n	800345a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003448:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8266 	beq.w	8003932 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d013      	beq.n	800349a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d105      	bne.n	800348a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800347e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ae:	2b40      	cmp	r3, #64	@ 0x40
 80034b0:	d005      	beq.n	80034be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d054      	beq.n	8003568 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f001 f83a 	bl	8004538 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ce:	2b40      	cmp	r3, #64	@ 0x40
 80034d0:	d146      	bne.n	8003560 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3308      	adds	r3, #8
 80034d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3308      	adds	r3, #8
 80034fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800350a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1d9      	bne.n	80034d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003524:	2b00      	cmp	r3, #0
 8003526:	d017      	beq.n	8003558 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800352e:	4a15      	ldr	r2, [pc, #84]	@ (8003584 <HAL_UART_IRQHandler+0x2c0>)
 8003530:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd fd2a 	bl	8000f92 <HAL_DMA_Abort_IT>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d019      	beq.n	8003578 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800354a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003552:	4610      	mov	r0, r2
 8003554:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003556:	e00f      	b.n	8003578 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f9ff 	bl	800395c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355e:	e00b      	b.n	8003578 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f9fb 	bl	800395c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003566:	e007      	b.n	8003578 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f9f7 	bl	800395c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003576:	e1dc      	b.n	8003932 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	bf00      	nop
    return;
 800357a:	e1da      	b.n	8003932 <HAL_UART_IRQHandler+0x66e>
 800357c:	10000001 	.word	0x10000001
 8003580:	04000120 	.word	0x04000120
 8003584:	08004605 	.word	0x08004605

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 8170 	bne.w	8003872 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8169 	beq.w	8003872 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8162 	beq.w	8003872 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2210      	movs	r2, #16
 80035b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c0:	2b40      	cmp	r3, #64	@ 0x40
 80035c2:	f040 80d8 	bne.w	8003776 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80af 	beq.w	800373c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80035e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035e8:	429a      	cmp	r2, r3
 80035ea:	f080 80a7 	bcs.w	800373c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 8087 	bne.w	800371a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003620:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003628:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800363a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003642:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800364e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1da      	bne.n	800360c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3308      	adds	r3, #8
 800365c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3308      	adds	r3, #8
 8003676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800367a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800367e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003682:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800368c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e1      	bne.n	8003656 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3308      	adds	r3, #8
 8003698:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3308      	adds	r3, #8
 80036b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e3      	bne.n	8003692 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036e8:	f023 0310 	bic.w	r3, r3, #16
 80036ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003700:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e4      	bne.n	80036d8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003714:	4618      	mov	r0, r3
 8003716:	f7fd fbe0 	bl	8000eda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800372c:	b29b      	uxth	r3, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	b29b      	uxth	r3, r3
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f91b 	bl	8003970 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800373a:	e0fc      	b.n	8003936 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003746:	429a      	cmp	r2, r3
 8003748:	f040 80f5 	bne.w	8003936 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b20      	cmp	r3, #32
 800375c:	f040 80eb 	bne.w	8003936 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800376c:	4619      	mov	r1, r3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8fe 	bl	8003970 <HAL_UARTEx_RxEventCallback>
      return;
 8003774:	e0df      	b.n	8003936 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003782:	b29b      	uxth	r3, r3
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80d1 	beq.w	800393a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80cc 	beq.w	800393a <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e4      	bne.n	80037a2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	623b      	str	r3, [r7, #32]
   return(result);
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3308      	adds	r3, #8
 80037fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003800:	633a      	str	r2, [r7, #48]	@ 0x30
 8003802:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800380e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e1      	bne.n	80037d8 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	60fb      	str	r3, [r7, #12]
   return(result);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f023 0310 	bic.w	r3, r3, #16
 800383c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	69b9      	ldr	r1, [r7, #24]
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	617b      	str	r3, [r7, #20]
   return(result);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e4      	bne.n	8003828 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f880 	bl	8003970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003870:	e063      	b.n	800393a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00e      	beq.n	800389c <HAL_UART_IRQHandler+0x5d8>
 800387e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003892:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 fe22 	bl	80054de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800389a:	e051      	b.n	8003940 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d014      	beq.n	80038d2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80038a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80038b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d03a      	beq.n	800393e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
    }
    return;
 80038d0:	e035      	b.n	800393e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_UART_IRQHandler+0x62e>
 80038de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f001 f842 	bl	8004974 <UART_EndTransmit_IT>
    return;
 80038f0:	e026      	b.n	8003940 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80038f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_UART_IRQHandler+0x64e>
 80038fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003902:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f001 fdfb 	bl	8005506 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003910:	e016      	b.n	8003940 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003916:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d010      	beq.n	8003940 <HAL_UART_IRQHandler+0x67c>
 800391e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003922:	2b00      	cmp	r3, #0
 8003924:	da0c      	bge.n	8003940 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f001 fde3 	bl	80054f2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800392c:	e008      	b.n	8003940 <HAL_UART_IRQHandler+0x67c>
      return;
 800392e:	bf00      	nop
 8003930:	e006      	b.n	8003940 <HAL_UART_IRQHandler+0x67c>
    return;
 8003932:	bf00      	nop
 8003934:	e004      	b.n	8003940 <HAL_UART_IRQHandler+0x67c>
      return;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <HAL_UART_IRQHandler+0x67c>
      return;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <HAL_UART_IRQHandler+0x67c>
    return;
 800393e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8003940:	37e8      	adds	r7, #232	@ 0xe8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop

08003948 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800398c:	b08c      	sub	sp, #48	@ 0x30
 800398e:	af00      	add	r7, sp, #0
 8003990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4baa      	ldr	r3, [pc, #680]	@ (8003c60 <UART_SetConfig+0x2d8>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a9f      	ldr	r2, [pc, #636]	@ (8003c64 <UART_SetConfig+0x2dc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f0:	4313      	orrs	r3, r2
 80039f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80039fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	f023 010f 	bic.w	r1, r3, #15
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a90      	ldr	r2, [pc, #576]	@ (8003c68 <UART_SetConfig+0x2e0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d125      	bne.n	8003a78 <UART_SetConfig+0xf0>
 8003a2c:	4b8f      	ldr	r3, [pc, #572]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d81a      	bhi.n	8003a70 <UART_SetConfig+0xe8>
 8003a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <UART_SetConfig+0xb8>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a61 	.word	0x08003a61
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a69 	.word	0x08003a69
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a56:	e116      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5e:	e112      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003a60:	2304      	movs	r3, #4
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e10e      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e10a      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003a70:	2310      	movs	r3, #16
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a76:	e106      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a7c      	ldr	r2, [pc, #496]	@ (8003c70 <UART_SetConfig+0x2e8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d138      	bne.n	8003af4 <UART_SetConfig+0x16c>
 8003a82:	4b7a      	ldr	r3, [pc, #488]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	d82d      	bhi.n	8003aec <UART_SetConfig+0x164>
 8003a90:	a201      	add	r2, pc, #4	@ (adr r2, 8003a98 <UART_SetConfig+0x110>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003acd 	.word	0x08003acd
 8003a9c:	08003aed 	.word	0x08003aed
 8003aa0:	08003aed 	.word	0x08003aed
 8003aa4:	08003aed 	.word	0x08003aed
 8003aa8:	08003add 	.word	0x08003add
 8003aac:	08003aed 	.word	0x08003aed
 8003ab0:	08003aed 	.word	0x08003aed
 8003ab4:	08003aed 	.word	0x08003aed
 8003ab8:	08003ad5 	.word	0x08003ad5
 8003abc:	08003aed 	.word	0x08003aed
 8003ac0:	08003aed 	.word	0x08003aed
 8003ac4:	08003aed 	.word	0x08003aed
 8003ac8:	08003ae5 	.word	0x08003ae5
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad2:	e0d8      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ada:	e0d4      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003adc:	2304      	movs	r3, #4
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae2:	e0d0      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aea:	e0cc      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003aec:	2310      	movs	r3, #16
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003af2:	e0c8      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c74 <UART_SetConfig+0x2ec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d125      	bne.n	8003b4a <UART_SetConfig+0x1c2>
 8003afe:	4b5b      	ldr	r3, [pc, #364]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b08:	2b30      	cmp	r3, #48	@ 0x30
 8003b0a:	d016      	beq.n	8003b3a <UART_SetConfig+0x1b2>
 8003b0c:	2b30      	cmp	r3, #48	@ 0x30
 8003b0e:	d818      	bhi.n	8003b42 <UART_SetConfig+0x1ba>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d00a      	beq.n	8003b2a <UART_SetConfig+0x1a2>
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d814      	bhi.n	8003b42 <UART_SetConfig+0x1ba>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <UART_SetConfig+0x19a>
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d008      	beq.n	8003b32 <UART_SetConfig+0x1aa>
 8003b20:	e00f      	b.n	8003b42 <UART_SetConfig+0x1ba>
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b28:	e0ad      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b30:	e0a9      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b32:	2304      	movs	r3, #4
 8003b34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b38:	e0a5      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b40:	e0a1      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b42:	2310      	movs	r3, #16
 8003b44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b48:	e09d      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c78 <UART_SetConfig+0x2f0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d125      	bne.n	8003ba0 <UART_SetConfig+0x218>
 8003b54:	4b45      	ldr	r3, [pc, #276]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b60:	d016      	beq.n	8003b90 <UART_SetConfig+0x208>
 8003b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b64:	d818      	bhi.n	8003b98 <UART_SetConfig+0x210>
 8003b66:	2b80      	cmp	r3, #128	@ 0x80
 8003b68:	d00a      	beq.n	8003b80 <UART_SetConfig+0x1f8>
 8003b6a:	2b80      	cmp	r3, #128	@ 0x80
 8003b6c:	d814      	bhi.n	8003b98 <UART_SetConfig+0x210>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <UART_SetConfig+0x1f0>
 8003b72:	2b40      	cmp	r3, #64	@ 0x40
 8003b74:	d008      	beq.n	8003b88 <UART_SetConfig+0x200>
 8003b76:	e00f      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7e:	e082      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b80:	2302      	movs	r3, #2
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b86:	e07e      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8e:	e07a      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b90:	2308      	movs	r3, #8
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b96:	e076      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b98:	2310      	movs	r3, #16
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9e:	e072      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a35      	ldr	r2, [pc, #212]	@ (8003c7c <UART_SetConfig+0x2f4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d12a      	bne.n	8003c00 <UART_SetConfig+0x278>
 8003baa:	4b30      	ldr	r3, [pc, #192]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb8:	d01a      	beq.n	8003bf0 <UART_SetConfig+0x268>
 8003bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bbe:	d81b      	bhi.n	8003bf8 <UART_SetConfig+0x270>
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc4:	d00c      	beq.n	8003be0 <UART_SetConfig+0x258>
 8003bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bca:	d815      	bhi.n	8003bf8 <UART_SetConfig+0x270>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <UART_SetConfig+0x250>
 8003bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd4:	d008      	beq.n	8003be8 <UART_SetConfig+0x260>
 8003bd6:	e00f      	b.n	8003bf8 <UART_SetConfig+0x270>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bde:	e052      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003be0:	2302      	movs	r3, #2
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be6:	e04e      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003be8:	2304      	movs	r3, #4
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bee:	e04a      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf6:	e046      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfe:	e042      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a17      	ldr	r2, [pc, #92]	@ (8003c64 <UART_SetConfig+0x2dc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d13a      	bne.n	8003c80 <UART_SetConfig+0x2f8>
 8003c0a:	4b18      	ldr	r3, [pc, #96]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c18:	d01a      	beq.n	8003c50 <UART_SetConfig+0x2c8>
 8003c1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c1e:	d81b      	bhi.n	8003c58 <UART_SetConfig+0x2d0>
 8003c20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c24:	d00c      	beq.n	8003c40 <UART_SetConfig+0x2b8>
 8003c26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c2a:	d815      	bhi.n	8003c58 <UART_SetConfig+0x2d0>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <UART_SetConfig+0x2b0>
 8003c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c34:	d008      	beq.n	8003c48 <UART_SetConfig+0x2c0>
 8003c36:	e00f      	b.n	8003c58 <UART_SetConfig+0x2d0>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c3e:	e022      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c40:	2302      	movs	r3, #2
 8003c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c46:	e01e      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c4e:	e01a      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c50:	2308      	movs	r3, #8
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c56:	e016      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c58:	2310      	movs	r3, #16
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5e:	e012      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c60:	cfff69f3 	.word	0xcfff69f3
 8003c64:	40008000 	.word	0x40008000
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40004400 	.word	0x40004400
 8003c74:	40004800 	.word	0x40004800
 8003c78:	40004c00 	.word	0x40004c00
 8003c7c:	40005000 	.word	0x40005000
 8003c80:	2310      	movs	r3, #16
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4aae      	ldr	r2, [pc, #696]	@ (8003f44 <UART_SetConfig+0x5bc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	f040 8097 	bne.w	8003dc0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d823      	bhi.n	8003ce2 <UART_SetConfig+0x35a>
 8003c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <UART_SetConfig+0x318>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003ce3 	.word	0x08003ce3
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003ce3 	.word	0x08003ce3
 8003cb0:	08003cd3 	.word	0x08003cd3
 8003cb4:	08003ce3 	.word	0x08003ce3
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003ce3 	.word	0x08003ce3
 8003cc0:	08003cdb 	.word	0x08003cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7fe fa9a 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8003cc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cca:	e010      	b.n	8003cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ccc:	4b9e      	ldr	r3, [pc, #632]	@ (8003f48 <UART_SetConfig+0x5c0>)
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cd0:	e00d      	b.n	8003cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd2:	f7fe f9fb 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8003cd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cd8:	e009      	b.n	8003cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ce0:	e005      	b.n	8003cee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003cec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8130 	beq.w	8003f56 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	4a94      	ldr	r2, [pc, #592]	@ (8003f4c <UART_SetConfig+0x5c4>)
 8003cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d305      	bcc.n	8003d26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d903      	bls.n	8003d2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d2c:	e113      	b.n	8003f56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	2200      	movs	r2, #0
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	60fa      	str	r2, [r7, #12]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	4a84      	ldr	r2, [pc, #528]	@ (8003f4c <UART_SetConfig+0x5c4>)
 8003d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2200      	movs	r2, #0
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d50:	f7fc fa54 	bl	80001fc <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	020b      	lsls	r3, r1, #8
 8003d66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d6a:	0202      	lsls	r2, r0, #8
 8003d6c:	6979      	ldr	r1, [r7, #20]
 8003d6e:	6849      	ldr	r1, [r1, #4]
 8003d70:	0849      	lsrs	r1, r1, #1
 8003d72:	2000      	movs	r0, #0
 8003d74:	460c      	mov	r4, r1
 8003d76:	4605      	mov	r5, r0
 8003d78:	eb12 0804 	adds.w	r8, r2, r4
 8003d7c:	eb43 0905 	adc.w	r9, r3, r5
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	469a      	mov	sl, r3
 8003d88:	4693      	mov	fp, r2
 8003d8a:	4652      	mov	r2, sl
 8003d8c:	465b      	mov	r3, fp
 8003d8e:	4640      	mov	r0, r8
 8003d90:	4649      	mov	r1, r9
 8003d92:	f7fc fa33 	bl	80001fc <__aeabi_uldivmod>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da4:	d308      	bcc.n	8003db8 <UART_SetConfig+0x430>
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dac:	d204      	bcs.n	8003db8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a3a      	ldr	r2, [r7, #32]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	e0ce      	b.n	8003f56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003dbe:	e0ca      	b.n	8003f56 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc8:	d166      	bne.n	8003e98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003dca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d827      	bhi.n	8003e22 <UART_SetConfig+0x49a>
 8003dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <UART_SetConfig+0x450>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003dfd 	.word	0x08003dfd
 8003ddc:	08003e05 	.word	0x08003e05
 8003de0:	08003e0d 	.word	0x08003e0d
 8003de4:	08003e23 	.word	0x08003e23
 8003de8:	08003e13 	.word	0x08003e13
 8003dec:	08003e23 	.word	0x08003e23
 8003df0:	08003e23 	.word	0x08003e23
 8003df4:	08003e23 	.word	0x08003e23
 8003df8:	08003e1b 	.word	0x08003e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dfc:	f7fe f9fe 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8003e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e02:	e014      	b.n	8003e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e04:	f7fe fa10 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 8003e08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e0a:	e010      	b.n	8003e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8003f48 <UART_SetConfig+0x5c0>)
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e10:	e00d      	b.n	8003e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e12:	f7fe f95b 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8003e16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e18:	e009      	b.n	8003e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e20:	e005      	b.n	8003e2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8090 	beq.w	8003f56 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	4a44      	ldr	r2, [pc, #272]	@ (8003f4c <UART_SetConfig+0x5c4>)
 8003e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e48:	005a      	lsls	r2, r3, #1
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	085b      	lsrs	r3, r3, #1
 8003e50:	441a      	add	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	d916      	bls.n	8003e90 <UART_SetConfig+0x508>
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e68:	d212      	bcs.n	8003e90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f023 030f 	bic.w	r3, r3, #15
 8003e72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	8bfb      	ldrh	r3, [r7, #30]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	8bfa      	ldrh	r2, [r7, #30]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	e062      	b.n	8003f56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e96:	e05e      	b.n	8003f56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d828      	bhi.n	8003ef2 <UART_SetConfig+0x56a>
 8003ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <UART_SetConfig+0x520>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003ef3 	.word	0x08003ef3
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003ef3 	.word	0x08003ef3
 8003ec8:	08003eeb 	.word	0x08003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe f996 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8003ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ed2:	e014      	b.n	8003efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7fe f9a8 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 8003ed8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eda:	e010      	b.n	8003efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003edc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <UART_SetConfig+0x5c0>)
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ee0:	e00d      	b.n	8003efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7fe f8f3 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8003ee6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ee8:	e009      	b.n	8003efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ef0:	e005      	b.n	8003efe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003efc:	bf00      	nop
    }

    if (pclk != 0U)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d028      	beq.n	8003f56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	4a10      	ldr	r2, [pc, #64]	@ (8003f4c <UART_SetConfig+0x5c4>)
 8003f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	441a      	add	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	2b0f      	cmp	r3, #15
 8003f2c:	d910      	bls.n	8003f50 <UART_SetConfig+0x5c8>
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f34:	d20c      	bcs.n	8003f50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60da      	str	r2, [r3, #12]
 8003f40:	e009      	b.n	8003f56 <UART_SetConfig+0x5ce>
 8003f42:	bf00      	nop
 8003f44:	40008000 	.word	0x40008000
 8003f48:	00f42400 	.word	0x00f42400
 8003f4c:	080057d8 	.word	0x080057d8
      }
      else
      {
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f72:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3730      	adds	r7, #48	@ 0x30
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01a      	beq.n	8004096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800407e:	d10a      	bne.n	8004096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]
  }
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b098      	sub	sp, #96	@ 0x60
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d4:	f7fc fde4 	bl	8000ca0 <HAL_GetTick>
 80040d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d12f      	bne.n	8004148 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	2200      	movs	r2, #0
 80040f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f88e 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d022      	beq.n	8004148 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004116:	653b      	str	r3, [r7, #80]	@ 0x50
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004120:	647b      	str	r3, [r7, #68]	@ 0x44
 8004122:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800412e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e6      	bne.n	8004102 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e063      	b.n	8004210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d149      	bne.n	80041ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004156:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415e:	2200      	movs	r2, #0
 8004160:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f857 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d03c      	beq.n	80041ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	623b      	str	r3, [r7, #32]
   return(result);
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004184:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800418e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004190:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e6      	bne.n	8004170 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041c2:	61fa      	str	r2, [r7, #28]
 80041c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	69b9      	ldr	r1, [r7, #24]
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	617b      	str	r3, [r7, #20]
   return(result);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e012      	b.n	8004210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3758      	adds	r7, #88	@ 0x58
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004228:	e04f      	b.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d04b      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fc fd35 	bl	8000ca0 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <UART_WaitOnFlagUntilTimeout+0x30>
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e04e      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d037      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b80      	cmp	r3, #128	@ 0x80
 800425e:	d034      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b40      	cmp	r3, #64	@ 0x40
 8004264:	d031      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b08      	cmp	r3, #8
 8004272:	d110      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2208      	movs	r2, #8
 800427a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f95b 	bl	8004538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2208      	movs	r2, #8
 8004286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e029      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a4:	d111      	bne.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f941 	bl	8004538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e00f      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4013      	ands	r3, r2
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	bf0c      	ite	eq
 80042da:	2301      	moveq	r3, #1
 80042dc:	2300      	movne	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d0a0      	beq.n	800422a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b0a3      	sub	sp, #140	@ 0x8c
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004326:	d10e      	bne.n	8004346 <UART_Start_Receive_IT+0x52>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <UART_Start_Receive_IT+0x48>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004336:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800433a:	e02d      	b.n	8004398 <UART_Start_Receive_IT+0xa4>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	22ff      	movs	r2, #255	@ 0xff
 8004340:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004344:	e028      	b.n	8004398 <UART_Start_Receive_IT+0xa4>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10d      	bne.n	800436a <UART_Start_Receive_IT+0x76>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <UART_Start_Receive_IT+0x6c>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	22ff      	movs	r2, #255	@ 0xff
 800435a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800435e:	e01b      	b.n	8004398 <UART_Start_Receive_IT+0xa4>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	227f      	movs	r2, #127	@ 0x7f
 8004364:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004368:	e016      	b.n	8004398 <UART_Start_Receive_IT+0xa4>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004372:	d10d      	bne.n	8004390 <UART_Start_Receive_IT+0x9c>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d104      	bne.n	8004386 <UART_Start_Receive_IT+0x92>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	227f      	movs	r2, #127	@ 0x7f
 8004380:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004384:	e008      	b.n	8004398 <UART_Start_Receive_IT+0xa4>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	223f      	movs	r2, #63	@ 0x3f
 800438a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800438e:	e003      	b.n	8004398 <UART_Start_Receive_IT+0xa4>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2222      	movs	r2, #34	@ 0x22
 80043a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80043b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3308      	adds	r3, #8
 80043c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80043cc:	673a      	str	r2, [r7, #112]	@ 0x70
 80043ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80043d2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80043da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e3      	bne.n	80043a8 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043e8:	d14f      	bne.n	800448a <UART_Start_Receive_IT+0x196>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80043f0:	88fa      	ldrh	r2, [r7, #6]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d349      	bcc.n	800448a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fe:	d107      	bne.n	8004410 <UART_Start_Receive_IT+0x11c>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d103      	bne.n	8004410 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4a47      	ldr	r2, [pc, #284]	@ (8004528 <UART_Start_Receive_IT+0x234>)
 800440c:	675a      	str	r2, [r3, #116]	@ 0x74
 800440e:	e002      	b.n	8004416 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a46      	ldr	r2, [pc, #280]	@ (800452c <UART_Start_Receive_IT+0x238>)
 8004414:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d01a      	beq.n	8004454 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800442c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800442e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004442:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004446:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800444e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e4      	bne.n	800441e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800446a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3308      	adds	r3, #8
 8004472:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004474:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004476:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800447a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <UART_Start_Receive_IT+0x160>
 8004488:	e046      	b.n	8004518 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004492:	d107      	bne.n	80044a4 <UART_Start_Receive_IT+0x1b0>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a24      	ldr	r2, [pc, #144]	@ (8004530 <UART_Start_Receive_IT+0x23c>)
 80044a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80044a2:	e002      	b.n	80044aa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a23      	ldr	r2, [pc, #140]	@ (8004534 <UART_Start_Receive_IT+0x240>)
 80044a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d019      	beq.n	80044e6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80044c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044d2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80044de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e6      	bne.n	80044b2 <UART_Start_Receive_IT+0x1be>
 80044e4:	e018      	b.n	8004518 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	613b      	str	r3, [r7, #16]
   return(result);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004504:	623b      	str	r3, [r7, #32]
 8004506:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	69f9      	ldr	r1, [r7, #28]
 800450a:	6a3a      	ldr	r2, [r7, #32]
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	61bb      	str	r3, [r7, #24]
   return(result);
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e6      	bne.n	80044e6 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	378c      	adds	r7, #140	@ 0x8c
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	080050a1 	.word	0x080050a1
 800452c:	08004d3d 	.word	0x08004d3d
 8004530:	08004b85 	.word	0x08004b85
 8004534:	080049cd 	.word	0x080049cd

08004538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004538:	b480      	push	{r7}
 800453a:	b095      	sub	sp, #84	@ 0x54
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800454e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800455e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004560:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004564:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800456c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e6      	bne.n	8004540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3308      	adds	r3, #8
 8004578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	61fb      	str	r3, [r7, #28]
   return(result);
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3308      	adds	r3, #8
 8004594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004598:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800459c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e3      	bne.n	8004572 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d118      	bne.n	80045e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f023 0310 	bic.w	r3, r3, #16
 80045c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6979      	ldr	r1, [r7, #20]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	613b      	str	r3, [r7, #16]
   return(result);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e6      	bne.n	80045b2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045f8:	bf00      	nop
 80045fa:	3754      	adds	r7, #84	@ 0x54
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004610:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff f99a 	bl	800395c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004630:	b480      	push	{r7}
 8004632:	b08f      	sub	sp, #60	@ 0x3c
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463e:	2b21      	cmp	r3, #33	@ 0x21
 8004640:	d14c      	bne.n	80046dc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d132      	bne.n	80046b4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	61fb      	str	r3, [r7, #28]
   return(result);
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004662:	637b      	str	r3, [r7, #52]	@ 0x34
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800466e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e6      	bne.n	800464e <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	60bb      	str	r3, [r7, #8]
   return(result);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004694:	633b      	str	r3, [r7, #48]	@ 0x30
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6979      	ldr	r1, [r7, #20]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	613b      	str	r3, [r7, #16]
   return(result);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e6      	bne.n	8004680 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80046b2:	e013      	b.n	80046dc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b8:	781a      	ldrb	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80046dc:	bf00      	nop
 80046de:	373c      	adds	r7, #60	@ 0x3c
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b091      	sub	sp, #68	@ 0x44
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	2b21      	cmp	r3, #33	@ 0x21
 80046f8:	d151      	bne.n	800479e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d132      	bne.n	800476c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	623b      	str	r3, [r7, #32]
   return(result);
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800471a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004724:	633b      	str	r3, [r7, #48]	@ 0x30
 8004726:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800472a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e6      	bne.n	8004706 <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	60fb      	str	r3, [r7, #12]
   return(result);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800474c:	637b      	str	r3, [r7, #52]	@ 0x34
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	69b9      	ldr	r1, [r7, #24]
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	617b      	str	r3, [r7, #20]
   return(result);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e6      	bne.n	8004738 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800476a:	e018      	b.n	800479e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004770:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004780:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800479e:	bf00      	nop
 80047a0:	3744      	adds	r7, #68	@ 0x44
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b091      	sub	sp, #68	@ 0x44
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b8:	2b21      	cmp	r3, #33	@ 0x21
 80047ba:	d160      	bne.n	800487e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80047c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80047c4:	e057      	b.n	8004876 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d133      	bne.n	800483a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3308      	adds	r3, #8
 80047d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	623b      	str	r3, [r7, #32]
   return(result);
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80047e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3308      	adds	r3, #8
 80047f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80047f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e5      	bne.n	80047d2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	60fb      	str	r3, [r7, #12]
   return(result);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	69b9      	ldr	r1, [r7, #24]
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	617b      	str	r3, [r7, #20]
   return(result);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e6      	bne.n	8004806 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004838:	e021      	b.n	800487e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004870:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004872:	3b01      	subs	r3, #1
 8004874:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004876:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1a4      	bne.n	80047c6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800487c:	e7ff      	b.n	800487e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800487e:	bf00      	nop
 8004880:	3744      	adds	r7, #68	@ 0x44
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800488a:	b480      	push	{r7}
 800488c:	b091      	sub	sp, #68	@ 0x44
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004898:	2b21      	cmp	r3, #33	@ 0x21
 800489a:	d165      	bne.n	8004968 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80048a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80048a4:	e05c      	b.n	8004960 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d133      	bne.n	800491a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80048c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e5      	bne.n	80048b2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6979      	ldr	r1, [r7, #20]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	613b      	str	r3, [r7, #16]
   return(result);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e6      	bne.n	80048e6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004918:	e026      	b.n	8004968 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004924:	2b00      	cmp	r3, #0
 8004926:	d018      	beq.n	800495a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800492c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800492e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800493c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004942:	1c9a      	adds	r2, r3, #2
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800495a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800495c:	3b01      	subs	r3, #1
 800495e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004960:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004962:	2b00      	cmp	r3, #0
 8004964:	d19f      	bne.n	80048a6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004966:	e7ff      	b.n	8004968 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004968:	bf00      	nop
 800496a:	3744      	adds	r7, #68	@ 0x44
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	60bb      	str	r3, [r7, #8]
   return(result);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6979      	ldr	r1, [r7, #20]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	613b      	str	r3, [r7, #16]
   return(result);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e6      	bne.n	800497c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fe ffc3 	bl	8003948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049c2:	bf00      	nop
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b09c      	sub	sp, #112	@ 0x70
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80049da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049e4:	2b22      	cmp	r3, #34	@ 0x22
 80049e6:	f040 80be 	bne.w	8004b66 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80049f8:	b2d9      	uxtb	r1, r3
 80049fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a04:	400a      	ands	r2, r1
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 80a1 	bne.w	8004b76 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e6      	bne.n	8004a34 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3308      	adds	r3, #8
 8004a84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a86:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e5      	bne.n	8004a66 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a33      	ldr	r2, [pc, #204]	@ (8004b80 <UART_RxISR_8BIT+0x1b4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d01f      	beq.n	8004af8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d018      	beq.n	8004af8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ada:	663b      	str	r3, [r7, #96]	@ 0x60
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e6      	bne.n	8004ac6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d12e      	bne.n	8004b5e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0310 	bic.w	r3, r3, #16
 8004b1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	69b9      	ldr	r1, [r7, #24]
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	617b      	str	r3, [r7, #20]
   return(result);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e6      	bne.n	8004b06 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d103      	bne.n	8004b4e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fe ff0a 	bl	8003970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b5c:	e00b      	b.n	8004b76 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fb fcc4 	bl	80004ec <HAL_UART_RxCpltCallback>
}
 8004b64:	e007      	b.n	8004b76 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0208 	orr.w	r2, r2, #8
 8004b74:	619a      	str	r2, [r3, #24]
}
 8004b76:	bf00      	nop
 8004b78:	3770      	adds	r7, #112	@ 0x70
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40008000 	.word	0x40008000

08004b84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b09c      	sub	sp, #112	@ 0x70
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004b92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b9c:	2b22      	cmp	r3, #34	@ 0x22
 8004b9e:	f040 80be 	bne.w	8004d1e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004bb2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004bb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004bba:	4013      	ands	r3, r2
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bc0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc6:	1c9a      	adds	r2, r3, #2
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f040 80a1 	bne.w	8004d2e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c00:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c0c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e6      	bne.n	8004bec <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	f023 0301 	bic.w	r3, r3, #1
 8004c34:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e5      	bne.n	8004c1e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a33      	ldr	r2, [pc, #204]	@ (8004d38 <UART_RxISR_16BIT+0x1b4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01f      	beq.n	8004cb0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d018      	beq.n	8004cb0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c9e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e6      	bne.n	8004c7e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d12e      	bne.n	8004d16 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f023 0310 	bic.w	r3, r3, #16
 8004cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6979      	ldr	r1, [r7, #20]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e6      	bne.n	8004cbe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d103      	bne.n	8004d06 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2210      	movs	r2, #16
 8004d04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fe fe2e 	bl	8003970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d14:	e00b      	b.n	8004d2e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fb fbe8 	bl	80004ec <HAL_UART_RxCpltCallback>
}
 8004d1c:	e007      	b.n	8004d2e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699a      	ldr	r2, [r3, #24]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0208 	orr.w	r2, r2, #8
 8004d2c:	619a      	str	r2, [r3, #24]
}
 8004d2e:	bf00      	nop
 8004d30:	3770      	adds	r7, #112	@ 0x70
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40008000 	.word	0x40008000

08004d3c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b0ac      	sub	sp, #176	@ 0xb0
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004d4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d72:	2b22      	cmp	r3, #34	@ 0x22
 8004d74:	f040 8183 	bne.w	800507e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004d7e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d82:	e126      	b.n	8004fd2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d8e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004d92:	b2d9      	uxtb	r1, r3
 8004d94:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9e:	400a      	ands	r2, r1
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d053      	beq.n	8004e7e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d011      	beq.n	8004e06 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004de2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2201      	movs	r2, #1
 8004df4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfc:	f043 0201 	orr.w	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d011      	beq.n	8004e36 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00b      	beq.n	8004e36 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2202      	movs	r2, #2
 8004e24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2c:	f043 0204 	orr.w	r2, r3, #4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d011      	beq.n	8004e66 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2204      	movs	r2, #4
 8004e54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5c:	f043 0202 	orr.w	r2, r3, #2
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d006      	beq.n	8004e7e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7fe fd73 	bl	800395c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f040 80a3 	bne.w	8004fd2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8004e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004eb0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004eb4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004ebc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e4      	bne.n	8004e8c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004eea:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004eec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004ef0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004ef8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e1      	bne.n	8004ec2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a60      	ldr	r2, [pc, #384]	@ (8005098 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d021      	beq.n	8004f60 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01a      	beq.n	8004f60 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f4e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e4      	bne.n	8004f2a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d130      	bne.n	8004fca <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	f023 0310 	bic.w	r3, r3, #16
 8004f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e4      	bne.n	8004f6e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b10      	cmp	r3, #16
 8004fb0:	d103      	bne.n	8004fba <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fe fcd4 	bl	8003970 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004fc8:	e00e      	b.n	8004fe8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fb fa8e 	bl	80004ec <HAL_UART_RxCpltCallback>
        break;
 8004fd0:	e00a      	b.n	8004fe8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004fd2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8004fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f47f aece 	bne.w	8004d84 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004fee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004ff2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d049      	beq.n	800508e <UART_RxISR_8BIT_FIFOEN+0x352>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005000:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005004:	429a      	cmp	r2, r3
 8005006:	d242      	bcs.n	800508e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3308      	adds	r3, #8
 800500e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	61fb      	str	r3, [r7, #28]
   return(result);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800502c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800502e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e3      	bne.n	8005008 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a16      	ldr	r2, [pc, #88]	@ (800509c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8005044:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	60bb      	str	r3, [r7, #8]
   return(result);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f043 0320 	orr.w	r3, r3, #32
 800505a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6979      	ldr	r1, [r7, #20]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	613b      	str	r3, [r7, #16]
   return(result);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e4      	bne.n	8005046 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800507c:	e007      	b.n	800508e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699a      	ldr	r2, [r3, #24]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0208 	orr.w	r2, r2, #8
 800508c:	619a      	str	r2, [r3, #24]
}
 800508e:	bf00      	nop
 8005090:	37b0      	adds	r7, #176	@ 0xb0
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40008000 	.word	0x40008000
 800509c:	080049cd 	.word	0x080049cd

080050a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b0ae      	sub	sp, #184	@ 0xb8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80050ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050d6:	2b22      	cmp	r3, #34	@ 0x22
 80050d8:	f040 8187 	bne.w	80053ea <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80050e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80050e6:	e12a      	b.n	800533e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80050fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80050fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005102:	4013      	ands	r3, r2
 8005104:	b29a      	uxth	r2, r3
 8005106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800510a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005110:	1c9a      	adds	r2, r3, #2
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005132:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d053      	beq.n	80051e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800513e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d011      	beq.n	800516e <UART_RxISR_16BIT_FIFOEN+0xce>
 800514a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800514e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00b      	beq.n	800516e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2201      	movs	r2, #1
 800515c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005164:	f043 0201 	orr.w	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800516e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d011      	beq.n	800519e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800517a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2202      	movs	r2, #2
 800518c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005194:	f043 0204 	orr.w	r2, r3, #4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800519e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d011      	beq.n	80051ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80051aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2204      	movs	r2, #4
 80051bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c4:	f043 0202 	orr.w	r2, r3, #2
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d006      	beq.n	80051e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fe fbbf 	bl	800395c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f040 80a5 	bne.w	800533e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005216:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800521a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800521e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005228:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e2      	bne.n	80051f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3308      	adds	r3, #8
 8005234:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800523e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005256:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005258:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800525c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e1      	bne.n	800522e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a60      	ldr	r2, [pc, #384]	@ (8005404 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d021      	beq.n	80052cc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01a      	beq.n	80052cc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052ba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e4      	bne.n	8005296 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d130      	bne.n	8005336 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ea:	f023 0310 	bic.w	r3, r3, #16
 80052ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800530a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e4      	bne.n	80052da <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	2b10      	cmp	r3, #16
 800531c:	d103      	bne.n	8005326 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2210      	movs	r2, #16
 8005324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fe fb1e 	bl	8003970 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005334:	e00e      	b.n	8005354 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fb f8d8 	bl	80004ec <HAL_UART_RxCpltCallback>
        break;
 800533c:	e00a      	b.n	8005354 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800533e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005342:	2b00      	cmp	r3, #0
 8005344:	d006      	beq.n	8005354 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8005346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	f47f aeca 	bne.w	80050e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800535a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800535e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005362:	2b00      	cmp	r3, #0
 8005364:	d049      	beq.n	80053fa <UART_RxISR_16BIT_FIFOEN+0x35a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800536c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005370:	429a      	cmp	r2, r3
 8005372:	d242      	bcs.n	80053fa <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3308      	adds	r3, #8
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	623b      	str	r3, [r7, #32]
   return(result);
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800538a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005398:	633a      	str	r2, [r7, #48]	@ 0x30
 800539a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800539e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e3      	bne.n	8005374 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80053b0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f043 0320 	orr.w	r3, r3, #32
 80053c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	617b      	str	r3, [r7, #20]
   return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e4      	bne.n	80053b2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053e8:	e007      	b.n	80053fa <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699a      	ldr	r2, [r3, #24]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0208 	orr.w	r2, r2, #8
 80053f8:	619a      	str	r2, [r3, #24]
}
 80053fa:	bf00      	nop
 80053fc:	37b8      	adds	r7, #184	@ 0xb8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40008000 	.word	0x40008000
 8005408:	08004b85 	.word	0x08004b85

0800540c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e058      	b.n	80054d6 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7fb fa5e 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2224      	movs	r2, #36	@ 0x24
 8005440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7fe fd8f 	bl	8003f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7fe fa90 	bl	8003988 <UART_SetConfig>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e031      	b.n	80054d6 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005480:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	430a      	orrs	r2, r1
 8005494:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	055b      	lsls	r3, r3, #21
 800549a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	041b      	lsls	r3, r3, #16
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80054b0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	6979      	ldr	r1, [r7, #20]
 80054ba:	430b      	orrs	r3, r1
 80054bc:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0201 	orr.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7fe fdf8 	bl	80040c4 <UART_CheckIdleState>
 80054d4:	4603      	mov	r3, r0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_UARTEx_DisableFifoMode+0x16>
 800552c:	2302      	movs	r3, #2
 800552e:	e027      	b.n	8005580 <HAL_UARTEx_DisableFifoMode+0x66>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2224      	movs	r2, #36	@ 0x24
 800553c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800555e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e02d      	b.n	8005600 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2224      	movs	r2, #36	@ 0x24
 80055b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f84f 	bl	8005684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800561c:	2302      	movs	r3, #2
 800561e:	e02d      	b.n	800567c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2224      	movs	r2, #36	@ 0x24
 800562c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f811 	bl	8005684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005690:	2b00      	cmp	r3, #0
 8005692:	d108      	bne.n	80056a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056a4:	e031      	b.n	800570a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056a6:	2308      	movs	r3, #8
 80056a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056aa:	2308      	movs	r3, #8
 80056ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	0e5b      	lsrs	r3, r3, #25
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	0f5b      	lsrs	r3, r3, #29
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056ce:	7bbb      	ldrb	r3, [r7, #14]
 80056d0:	7b3a      	ldrb	r2, [r7, #12]
 80056d2:	4911      	ldr	r1, [pc, #68]	@ (8005718 <UARTEx_SetNbDataToProcess+0x94>)
 80056d4:	5c8a      	ldrb	r2, [r1, r2]
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056da:	7b3a      	ldrb	r2, [r7, #12]
 80056dc:	490f      	ldr	r1, [pc, #60]	@ (800571c <UARTEx_SetNbDataToProcess+0x98>)
 80056de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	7b7a      	ldrb	r2, [r7, #13]
 80056f0:	4909      	ldr	r1, [pc, #36]	@ (8005718 <UARTEx_SetNbDataToProcess+0x94>)
 80056f2:	5c8a      	ldrb	r2, [r1, r2]
 80056f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056f8:	7b7a      	ldrb	r2, [r7, #13]
 80056fa:	4908      	ldr	r1, [pc, #32]	@ (800571c <UARTEx_SetNbDataToProcess+0x98>)
 80056fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005702:	b29a      	uxth	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	080057f0 	.word	0x080057f0
 800571c:	080057f8 	.word	0x080057f8

08005720 <memset>:
 8005720:	4402      	add	r2, r0
 8005722:	4603      	mov	r3, r0
 8005724:	4293      	cmp	r3, r2
 8005726:	d100      	bne.n	800572a <memset+0xa>
 8005728:	4770      	bx	lr
 800572a:	f803 1b01 	strb.w	r1, [r3], #1
 800572e:	e7f9      	b.n	8005724 <memset+0x4>

08005730 <__libc_init_array>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	4d0d      	ldr	r5, [pc, #52]	@ (8005768 <__libc_init_array+0x38>)
 8005734:	4c0d      	ldr	r4, [pc, #52]	@ (800576c <__libc_init_array+0x3c>)
 8005736:	1b64      	subs	r4, r4, r5
 8005738:	10a4      	asrs	r4, r4, #2
 800573a:	2600      	movs	r6, #0
 800573c:	42a6      	cmp	r6, r4
 800573e:	d109      	bne.n	8005754 <__libc_init_array+0x24>
 8005740:	4d0b      	ldr	r5, [pc, #44]	@ (8005770 <__libc_init_array+0x40>)
 8005742:	4c0c      	ldr	r4, [pc, #48]	@ (8005774 <__libc_init_array+0x44>)
 8005744:	f000 f818 	bl	8005778 <_init>
 8005748:	1b64      	subs	r4, r4, r5
 800574a:	10a4      	asrs	r4, r4, #2
 800574c:	2600      	movs	r6, #0
 800574e:	42a6      	cmp	r6, r4
 8005750:	d105      	bne.n	800575e <__libc_init_array+0x2e>
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	f855 3b04 	ldr.w	r3, [r5], #4
 8005758:	4798      	blx	r3
 800575a:	3601      	adds	r6, #1
 800575c:	e7ee      	b.n	800573c <__libc_init_array+0xc>
 800575e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005762:	4798      	blx	r3
 8005764:	3601      	adds	r6, #1
 8005766:	e7f2      	b.n	800574e <__libc_init_array+0x1e>
 8005768:	08005808 	.word	0x08005808
 800576c:	08005808 	.word	0x08005808
 8005770:	08005808 	.word	0x08005808
 8005774:	0800580c 	.word	0x0800580c

08005778 <_init>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	bf00      	nop
 800577c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577e:	bc08      	pop	{r3}
 8005780:	469e      	mov	lr, r3
 8005782:	4770      	bx	lr

08005784 <_fini>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr
